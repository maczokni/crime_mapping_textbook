[["index.html", "Crime Mapping in R Prelude 0.1 Introduction 0.2 Disclaimer", " Crime Mapping in R Reka Solymosi and Juanjo Medina 2025-01-31 Prelude 0.1 Introduction This workbook contains the lab materials for our Crime Mapping module in Department of Criminology at the University of Manchester. This module is an optional unit open to 3rd year undergraduate and postgraduate students. It makes use of R, as it is a free, open source tool, that has tremendous community support, and great versatility in mapping applications. You can find more details about the advantages of R for geospatial work here Crime Mapping introduces students to the concepts of spatial data analysis. The aim is to familiarise students with basic concepts of GIS, and get acquainted with spatial statistics to be able to talk about data about crime, policing, and criminal justice topics situated in the places they occur. Details can be found in the Syllabus. 0.2 Disclaimer Please beware that: In making these notes, while we briefly cover some concepts, students are expected to do the weekly reading, and attend the weekly lectures, as well as participate in lab disucssions to receive a complete course experience. These notes are not intended to be a stand-alone reference or textbook, rather a set of exercises to gain hands-on practice with the concepts introduced during the course. These pages are the content of the university course mentioned above. They are meant to (very gently) introduce students to the concept of spatial data analysis, and cover descriptive statsitics and the key concepts required to build an understanding of quantitative data analysis in crime research. The handouts below use, among other data sets, dara from the UK data service such as the Crime Survey for England and Wales that is available under a Open Government Licence. This dataset is designed to be a learning resource and should not be used for research purposes or the production of summary statistics. "],["a-first-lesson-about-r.html", "Chapter 1 A first lesson about R 1.1 Install R &amp; R Studio 1.2 Open up and explore RStudio 1.3 Customising the RStudio look 1.4 Packages 1.5 Exploring data 1.6 Getting organised: R Projects", " Chapter 1 A first lesson about R In this lesson, you will be introduced to the programming language, R. After installing the related software and getting a basic idea of the R Studio interface, you will learn three R basics: operators, objects, and packages. Unlike other statistical software like SPSS and STATA, R is a free, open-source software for performing statistical analysis and data visualization. In addition, R offers more analytical solutions, flexibility, and customization than these commonly used statistical software, and its popularity has increased substantially over the years. We learn R because we hope that this is an important tool that you will continue to use in future. As it is free and has a community feel to it where anyone can create and upload new techniques, the idea is that you can use R long after this course. Even if data analysis is not in the future for you, learning how to conduct and interpret statistical output is a good skill to have – much of our knowledge of the world includes statistics, so understanding the numbers and how they were derived are advantages. R uses a language called object-oriented programming, and though it may seem daunting at first, practice makes familiarity. Also, you can impress your friends with all your coding. 1.1 Install R &amp; R Studio As R and R Studio are free software, you should be able to install these on your own machines at home. You may be working with different IT, so there are different options to allow a successful install. Our first activity will be to decide what approach to working with R and R Studio will be best for you. 1.1.1 Activity 1: Identifying your operating system In this activity, you need to answer a question about your computer/IT that you will be working with for this class. That question is: What is your operating system? Operating system refers to the software that your computer is running to deliver the basic functions. You may have, for example: Windows or Linux - if you have these, you are most likely going to have an easy time installing R and R Studio, so you should give the installation instructions below a try Apple - if you have a Mac, there are some extra steps to install R and R Studio. Specifically, there will be an additional programme to download called Xcode, and additional steps to take. Chromebook - Installing R and R Studio on a Chromebook involves installing Linux. Like with a Mac, there are some additional steps you will need to take, and some patience. 1.1.2 Activity 2: Install R &amp; R Studio 1.1.2.1 Some notes specific to your operating system. Before you move on to the installation steps, look at your answer from Activity 1, and read or watch the advice specific to your operating system: Windows: click here for instructions Chromebook: read the tutorial here Mac, follow the guidance in the video here and then, you will also need to install command line tools, for that you can watch another video here Linux: for ubuntu see the video here and if you have questions, let the teaching team know! Once you have watched or read the instructions for your relevant operating system, you are now ready to actually have a go at downloading the software for yourself. Before you start, make sure to ask us any questions or concerns, and once ready, install! Install R: Go to https://www.r-project.org/ Click the download R link under the Getting Started heading You will be asked to select a Comprehensive R Archive Network (CRAN) mirror. Click the URL closest to your location Click whichever download link is appropriate for your operating system (see above). Then click the install R for the first-time link and proceed to install R Install R Studio: Go to https://rstudio.com/ Click the Download link Scroll down and then click the DOWNLOAD button for the free version of RStudio You will be taken to a website to download the free version of RStudio that is appropriate for your computer. Download and then install it. 1.1.2.2 Plan B: accessing R Studio remotely throught a web browser It might be that the above does not work and you find that there are some issues specific to your computer, or something just is not working. In that case, you have two options: Option 1: You can remotely access one of the university PCs from your browser (Firefox, Chrome, Safari, etc). You can find instructions how to do this here , and the university IT helpdesk can help you access this too. If you do this, you will be able to use the version of RStudio installed in the computer clusters. Option 2: You can access an online version of R Studio, which you can access through any web browser (Firefox, Chrome, Safari, etc). To do this, you visit https://rstudio.cloud/, click on ‘get started for free’, choose the free account, and click on ‘sign up’. Then you can always visit this website and log in to use R Studio in the cloud. Note that you should start a New Project and name it Modelling Crime Data, and then all your work will be saved in this project. 1.2 Open up and explore RStudio In this session we will focus in developing basic familiarity with R Studio. You can use R without using R Studio, but R Studio is an app that makes it easier to work with R. R Studio is what we call an IDE, an integrated development environment. It is a fancy way of saying that it is a cool interface designed to write programming code. Every time you open up R Studio you are in fact starting a R session. R Studio automatically runs R in the background. We will be interacting with R in this course unit via R Studio. When you first open R Studio, you will see (as in the image above) that there are 3 main windows. The bigger one to your left is the console. If you read the text in the console you will see that R Studio is indeed opening R and you can see what version of R you are running. Since R is constantly being updated the version you installed is likely more recent that the one we used at time of writing. 1.2.1 Activity 3: Opening up the script pane The view in R Studio is structured so that you have 4 open windows in a regular session. However when you first open, you might be starting with only 3. To open the script pane (the one missing) click in the File drop down Menu, select New File, then R Script. You will now see the 4 window areas in display. On each of these areas you can shift between different views and panels. You can also use your mouse to re-size the different windows if that is convenient. 1.2.2 The four panes of R Studio The purposes of the four panes in Figure above are the following: Window 1. Script and data view: where you type your programming code that tells R what you want to do. These are essentially instructions that you type and save as a script, so that you can return to it later to remember what you did and to share it with others so that they can reproduce what you did. Window 2. Environment and history view: a) 2.1 Environment tab- gives you the names of all the (data) objects that you have defined during your current R session, including number of observations and rows in those objects. We learn more about objects later. 2.2 History tab- shows you a history of all the code you have previously evaluated in the main console. One of the key advantages of doing data analysis this way - with code versus with a point and click interface like Excel or ArcGIS is that you are producing a written record of every step you take in the analysis. First time around it will take you time to write these instructions, it may be slower than pointing and clicking. And unlike with pointing and clicking you need to know the “words” and “grammar” of this language. Window 3. Main console: this is considered R's heart, and it is where R evaluates the codes that you run. You can type your codes directly in the console, but for the sake of good habits, type them in the script and data view so you can save a record of them. Only type and run code from here if you want to debug or do some quick analysis. Window 4. File directory, Plots, Packages, Help: a) 4.1 Files tab- allows you to see the files in the folder that is currently set as your working directory. 4.2 Plots tab- you will see any data visualizations that you produce here. You have not produced any yet, so it is empty now. 4.3 Packages tab- you will see the packages that are currently available to install. We will explain what these are soon, but know that they are an essential feature when working with R. 4.4 Help tab- you can access further information on the various packages. 1.2.3 Activity 4: Interacting with the 4 panes In the previous activity, you opened up the ‘script’ pane. We now write some code in it, and see what happens. To do this, go to your open version of R Studio, and type in the script pane the following: print(&quot;Hello world!&quot;) When you have typed this, you will have typed your first bit of code. Yet nothing is happening? That is because you also have to RUN the code. You can do this by highlighting the code you wish to run, and clicking on ‘run’ in the top right hand corner: When you ‘run’ the code, it will print the text ‘Hello World!’ in the bottom pane, which is the console. That means you have written and executed your first line of code. In the rest of the session, we will be unpacking how this all works, and getting more familiar and comfortable with using R Studio. To recap: the script is where you write your programming code. A script is nothing but a text file with some code on it. Unlike other programs for data analysis you may have used in the past (Excel, SPSS), you need to interact with R by means of writing down instructions and asking R to evaluate those instructions. R is an interpreted programming language: you write instructions (code) that the R engine has to interpret in order to do something. And all the instructions we write can and should be saved in a script, so that you can return later to what you did. One of the key advantages of doing spatial data analysis this way - with code versus with a point and click interface like ArcGIS or MapInfo (or even QGIS) is that you are producing a written record of every step you take in the analysis. First time around it will take you time to write these instructions, it may be slower than pointing and clicking. And unlike with pointing and clicking you need to know the “words” and “grammar” of this language. The advantage of doing analysis this way is that once you have written your instructions and saved them in a file, you will be able to share it with others and run it every time you want in a matter of seconds. This creates a reproducible record of your analysis: something that your collaborators or someone else anywhere (including your future self, the one that will have forgotten how to do the stuff) could run and get the same results than you did at some point earlier. This makes science more transparent and transparency brings with it many advantages. For example, it makes your research more trustworthy. Don’t underestimate how critical this is. Reproducibility is becoming a key criteria to assess good quality research. The University of Manchester just joined the UK Reproducibility Network, and is promoting this good practice. If you’re interested you can join the Open Science working group or the reading club ReproducibiliTea. You can read up on reproducibility and its importance here or get Stuart Richie’s book Science Fictions for an engaging further read. 1.3 Customising the RStudio look R Studio allows you to customise the way it looks. Working with white backgrounds is not generally a good idea if you care about your eyesight. If you don’t want to end up with dry eyes not only it is good you follow the 20-20-20 rule (every 20 minutes look for 20 seconds to an object located 20 feet away from you), but it may also be a good idea to use more eye friendly screen displays. Click in the Tools menu and select Global options. This will open up a pop up window with various options. Select Appearance. In this section you can change the font type and size, but also the kind of theme background that R will use in the various windows. You can make any changes you’d like to here, including the theme background that R will use as the interface. For example, you may choose a darker theme like ‘tomorrow night bright’. As indicated above, the window in the bottom left corner is the main console.You will see that the words “I hate computers” appear printed there. If rather than using R Studio you were working directly from R, that’s all you would get: the main console where you can write code interactively (rather than all the different windows you see in R Studio). You can write your code directly in the main console and execute it line by line in an interactive fashion. However, we will be running code from scripts, so that you get used to the idea of properly documenting all the steps you take. 1.3.1 Functions Functions do things. They are called by a certain name, usually a name which represents what they do, and they are followed by brackets (). Within the brackets, you can put whatever it is that you want the function to work with. For example, the code we wrote in Activity 4 was the print() function. This function told R to print into the console whatever we put in the brackets (“Hello World!”). Same idea with a personalised greeting: if you want to print ‘Hello Manchester’, you will need to have “Hello Manchester” inside the brackets: print(&quot;Hello Manchester&quot;) ## [1] &quot;Hello Manchester&quot; There are so many functions in R. We will be learning many of them throughout our class. Print is fun, but most of the time, we will be using functions to help us with our data analysis. For example, getting the minimum, maximum, or mean of a list of numbers. R does this using functions in a very similar way. For example, if we have a bunch of numbers, we just find the appropriate function to get the summary we want: mean(10, 34, 5, 3, 77) ## [1] 10 min(10, 34, 5, 3, 77) ## [1] 3 max(10, 34, 5, 3, 77) ## [1] 77 How can you find the function you need? Throughout this class, you will learn a list that appears at the top of each lesson. A recommendation is to also create a ‘function cookbook’, where you write down a list of functions, what the functions do, and some examples. Here is an example: You can use google to make your cookbook, and the website stackoverflow, in particular, can help you find the function you need. But be wary, especially in the beginning, that you understand what the function does. There can be several different functions for the same action. One good approach is to add a function of interest to your cookbook and ask the teaching team about what it does, and how it might be different to other functions that do the same thing. 1.3.1.1 Activity 5: Play around with functions Have a guess (or google) about what you think is the function to get the median. Once you have your answer, speak to the person next to you. Then, use it to get the median of the numbers 10, 34, 5, 3, 77. The answer is further below, after the note: NOTE: R is case-sensitive! For example: # Calculating the logarithm Log(100) # ERROR! # Instead, it should be: log(100) ## [1] 4.60517 Okay, now you know these, the answer to Activity 5 was… median(10, 34, 5, 3, 77) ## [1] 10 Now let us move on to our second key topic: objects! 1.3.2 Objects Everything that exists in R is an object. Think of objects as boxes where you put things in. Imagine a big, empty cardboard box. We can create this big empty box in R by simply giving it a name. Usually, you want your object/box to have a good descriptive name, which will tell people what is in it. Imagine moving house. If you have a cardboard box full of places, you might want to label it “plates”. That way, when carrying, you know to be careful, and when unpacking, you know its contents will go in the kitchen. On the other hand, if you named it “box1”, then this is a lot less helpful when it comes to unpacking. 1.3.2.1 Activity 6: Creating an object Let us create an object called ‘plates’. To do this, you go to your script, and type ‘plates’. But if you run this code, you will get an error. Let’s see: You see the error ‘Error! Object plates not found’. This is because you have not yet put anything inside the plates ‘box’. Remember objects are like boxes,so there must be something inside our object ‘plates’. In order for this object to exist, you have to put something inside it, or in R-speak assign it some value. Therefore, we make an object by using an assignment operator ( &lt;- ). In other words, we assign something to an object (i.e., put something in the box). For example: plates &lt;- &quot;yellow plate&quot; Now if we run this, we will see no error message, but instead, we will see the plates object appear in our environment pane: Here are some more examples to illustrate: # Putting &#39;10&#39; in the &#39;a&#39; box a &lt;- 10 # Putting &#39;Hello!&#39; in the &#39;abc123&#39; box abc123 &lt;- &quot;Hello!&quot; In these examples, we are putting the value of 10 into the object a, and the value of ‘Hello!’ into the object abc123. Earlier, we introduced you to the Environment and History pane. We mentioned that it lists objects you defined. After making the ‘a’ and ‘abc123’ objects, they should appear in that very pane under the Environment tab. 1.3.2.2 Types of objects Why are objects important? We will be storing everything in our data analysis process in these objects. Depending on what is inside them, they can become a different type of object. Here are some examples: Data structures are important objects that store your data, and there are five main types but we focus on three for this course: (atomic) vector: an ordered set of elements that are of the same class. Vectors are a basic data structure in R. Below are five different classes of vectors: # 1. numeric vector with three elements my_1st_vector &lt;- c(0.5, 8.9, 0.6) # 2. integer vector with addition of L at the end of the value my_2nd_vector &lt;- c(1L, 2L, 3L) # 3. logical vector my_3rd_vector &lt;- c(TRUE, FALSE, FALSE) # &#39;my_4th_vector&#39; creates a logical vector using abbreviations of True and False, but you should use the full words instead my_4th_vector &lt;- c(T, F) # 4. character vector my_5th_vector &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) # 5. complex vector (we will not use this for our class) my_6th_vector &lt;- c(1+0i, 2+4i) lists: technically they, too, are vectors but they are more complex because they are not restricted on the length, structure, or class of the included elements. For example, to create a list containing strings, numbers, vectors and a logical, use the list() function, and inside the brackets, put everything tat you want to combine into a list: list_data &lt;- list(&quot;teal&quot;, &quot;sky blue&quot;, c(10, 5, 10), TRUE, 68.26, 95.46, 99.7) Above, we created list_data, an object that contains all those things that we put inside the list() function. This function serves to create a list from combining everything that is put inside its brackets. Use the class() function to confirm that the objects have been defined as a list class(list_data) ## [1] &quot;list&quot; data frames: also stores elements but differ from lists because they are defined by their number of columns and rows; the vectors (columns) must be of the same length. Data frames can contain different classes but each column must be of the same class. For example, if you want to combine some related vectors to make a data frame on violent American cities, use the function data.frame(): # Making some relevant vectors TopVioCities &lt;- c(&quot;St. Louis&quot;, &quot;Detroit&quot;, &quot;Baltimore&quot;) # some violent US cities VioRatePer1k = c(20.8, 20.6, 20.3) # their violence rates per 1,000 persons State &lt;- c(&quot;Missouri&quot;, &quot;Michigan&quot;, &quot;Maryland&quot;) # in what states are these cities found #Join them to make a data frame called &#39;df&#39; df&lt;-data.frame(TopVioCities, VioRatePer1k, State) We can then view the data frame, ‘df’, with the View() function: View(df) 1.3.2.3 Activity 7: Doing things to objects We have learned what functions are (i.e., things that do things) and what are objects (i.e., the boxes that hold things). We also saw some functions which helped us create objects. Functions can also do things to objects. For example, we saw the function class() that told us about what kind of object list_data was, and View() which allowed us to have a look at our dataframe we called df. Let us look back at our plates object. Remember it was the object that held our kitchen items. We added ‘yellow plate’ to it. Now let us add some more items and let us use the concatenate c() function for this again: plates &lt;- c(&quot;yellow plate&quot;, &quot;purple plate&quot;, &quot;silver plate&quot;, &quot;orange bowl&quot;) Let us say that we suddenly forgot what was in our object called ‘plates’. Like what we learned earlier, we use the function print() to see what is inside this object: print(plates) ## [1] &quot;yellow plate&quot; &quot;purple plate&quot; &quot;silver plate&quot; &quot;orange bowl&quot; This can apply to creating nums object and then obtaining the mean, the minimum, and maximum. nums &lt;- c(10, 34, 5, 3, 77) Now if we want to know the mean, we can take the mean of the object nums, which we just created: mean(nums) ## [1] 25.8 The object we will use most frequently though is data frames. These hold your data in a format whereby each column represents a variable, and each row an observation. Just earlier, we had created a dataframe called df previously. If you have not yet copied this over into your own R Studio, do this now. You should have the object df in your environment. When you run View(df), you should see this dataset: To do something to an entire dataframe, we would use the name of the object (df) to refer to it. In the case of the View() function, we want to see the whole thing, so we will call View(df). On the other hand, if we want to refer to only one variable in the data, (remember back to term 1 - each varible is held in each column) there is a special notation to do this. To refer to a variable (column) inside a dataframe, you use: dataframe name + $ + variable name/column For example, to refer to the variable VioRatePer1k, we use the notation df$VioRatePer1k. Say we wanted to know the mean violence rate across our units of analysis, the cities, for example, we would take the numeric column to calculate this: mean(df$VioRatePer1k) ## [1] 20.56667 You can also use the following syntax to select specific columns in a dataframe: select columns by name: df[c(‘TopVioCities’, ‘VioRatePer1k’, ‘State’)] select columns by index: df[c(1, 2, 3)] If we wanted to View only VioRatePer1k column, we use: View(df[c(2)]) #If you want to view only one variable, you can remove concatenate, View(df[2]) You should see: 1.4 Packages Packages are a very important element of R. Packages are elements that add the functionality of R. What most packages do is they introduce new functions that allow you to ask R to do new different things. Anybody can write a package, so consequently R packages vary on quality and complexity. You can find packages in different places, as well, from official repositories (which means they have passed a minimum of quality control), something called Git Hub (a webpage where software developers post work in progress), to personal webpages (danger danger!). Throughout the course, and hopefully afterwards, you will find yourself installing numerous open source software packages that allow R to do new and different things. There are loads of packages out there. In early 2020, there were over 150,000 packages available. Anyone can write one, so you will need to be careful on which ones you use as the quality can vary. Official repositories, like CRAN, are your best bet for packages as they will have passed some quality controls. You can see what packages are available in your local install by looking at the packages tab in the File directory, Plots, Packages pane. A number of the packages we will use belong to a set of packages called tidyverse. These packages help make your data tidy. According to Statistician and Chief Scientist at RStudio, Hadley Wickham, transforming your data into tidy data is one of the most important steps of the data analysis process. It will ensure your data are in the format you need to conduct your analyses. We will also be using the simple features package sf and many more associated with spatial data analysis. Packages can be installed using the install.packages() function. Remember that while you only need to install packages once, they need to be loaded with the library()function each time you open up RStudio. Let us install the package dplyr from tidyverse and load it: library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union A lot of code and activity appears in the console. Warnings may manifest. Most of the time, the warnings explain what is being loaded and confirm that the package is successfully loaded. If there is an error, you will have to figure out what the warnings are telling you to successfully load the package. This happens and is normal. To double check that you have actually installed dplyr, go to that File Directory, Plots, Packages pane and click on the Packages tab. The list of packages is in alphabetical order and dplyr should be there. If there is a tick in its box, it means that this package is currently loaded and you can use it; if there is no tick, it means that it is inactive, and you will have to bring it up with library(), or just tick its box (Figure 1.6). On masking: sometimes packages introduce functions that have the same name as those that are already loaded into your session. When that happens, the newly loaded ones will override the previous ones. You can still use them but you will have to refer to them explicitly by bringing them up by specifying to which package they belong with library(). How do you find out what a package does? You look at the relevant documentation. In the Packages window scroll down until you find the new package we installed listed. Here you will see the name of the package (dplyr), a brief description of what the program is about, and the version you have installed (an indication that a package is a good package is that it has gone through several versions, that means that someone is making sure the package gets regular updates and improvements). Click in the name dplyr. You will see that R Studio has now brought you to the Help tab. Here is where you find the help files for this package, including all the available documentation. Every beginner in R will find these help files a bit confusing. But after a while, their format and structure will begin to make sense to you. Click where it says User guides, package vignettes, and other documentation. Documentation in R has become much better since people started to write vignettes for their packages. They are little tutorials that explain with examples what each package does. Click in the cowsay::cowsay_tutorial that you see listed here (the html link). What you will find there is an html file that gives you a detailed tutorial on this package. You don’t need to read it now, but remember that this is one way to find help when using R. You will learn to love vignettes. 1.5 Exploring data Now that we know the basic component, let’s play around with using R as we will throughout the course, for some data analysis. We will get some data by installing a package which has data in it as well as functions, and then go on to produce some basic summaries. This should give some practice! 1.5.1 Activity 8: Playing around with data We are going to look at some data that are part of the fivethirtyeight package. This package contains data sets and code behind the stories in this particular online newspaper. This package is not part of the base installation of R, so you will need to install it first. I won’t give you the code for it. See if you can figure it out by looking at previous examples. Discuss in small groups what you think the code will be. Done? Ok, now we are going to look at the data sets that are included in this package. Remember first we have to load the package if we want to use it: library(&quot;fivethirtyeight&quot;) ## Some larger datasets need to be installed separately, like senators and ## house_district_forecast. To install these, we recommend you install the ## fivethirtyeightdata package by running: ## install.packages(&#39;fivethirtyeightdata&#39;, repos = ## &#39;https://fivethirtyeightdata.github.io/drat/&#39;, type = &#39;source&#39;) data(package=&quot;fivethirtyeight&quot;) #This function will return all the data frames that are available in the named package. Notice that this package has some data sets that relate to stories covered in this newspaper that had a criminological angle. Let’s look for example at the hate_crimes data set. How do you that? First we have to load the data frame into our global environment. To do so use the following code: data(&quot;hate_crimes&quot;) This function will search among all the loaded packages and locate the hate_crimes data set. Notice that it now appears in the global environment, although it also says “promise” next to it. To see the data in full you need to do something to it first. So let’s do that. Every object in R can have attributes. These are: names; dimensions (for matrices and arrays: number of rows and columns) and dimensions names; class of object (numeric, character, etc.); length (for a vector this will be the number of elements in the vector); and other user-defined. You can access the attributes of an object using the attributes() function. Let’s query R for the attributes of this data frame. attributes(hate_crimes) ## $row.names ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## [51] 51 ## ## $class ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; ## ## $names ## [1] &quot;state&quot; &quot;state_abbrev&quot; ## [3] &quot;median_house_inc&quot; &quot;share_unemp_seas&quot; ## [5] &quot;share_pop_metro&quot; &quot;share_pop_hs&quot; ## [7] &quot;share_non_citizen&quot; &quot;share_white_poverty&quot; ## [9] &quot;gini_index&quot; &quot;share_non_white&quot; ## [11] &quot;share_vote_trump&quot; &quot;hate_crimes_per_100k_splc&quot; ## [13] &quot;avg_hatecrimes_per_100k_fbi&quot; This prints out the row names (not very exciting here..) the class (see above when we used class() function) and the names, which are the column headers - or the names of the variables within this data set. You can see there are things like state, and share who voted trump (in the 2016 election, not most recent!). Now use the View() function to glance at your data frame. What you get there is a spreadsheet with 12 variables and 51 observations. Each variable in this case is providing you with information (demographics, voting patterns, and hate crime) about each of the US states. Ok, let’s now have a quick look at the data. There are so many different ways of producing summary stats for data stored in R that is impossible to cover them all! We will just introduce a few functions that you may find useful for summarising data. Before we do any of that it is important you get a sense for what is available in this data set. Go to the help tab and in the search box input the name of the data frame, this will take you to the documentation for this data frame. Here you can see a list of the available variables. Let’s start with the mean. This function takes as an argument the numeric variable for which you want to obtain the mean. You have done this above, so it should be familiar now! If you want to obtain the mean of the variable that gives us the proportion of people that voted for Donald Trump you can use the following expression: mean(hate_crimes$share_vote_trump) ## [1] 0.49 Another function you may want to use with numeric variables is summary(): summary(hate_crimes$share_vote_trump) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.040 0.415 0.490 0.490 0.575 0.700 This gives you the five number summary (minimum, first quartile, median, third quartile, and maximum, plus the mean and the count of missing values if there are any). You don’t have to specify a variable you can ask for these summaries from the whole data frame: summary(hate_crimes) ## state state_abbrev median_house_inc share_unemp_seas ## Length:51 Length:51 Min. :35521 Min. :0.02800 ## Class :character Class :character 1st Qu.:48657 1st Qu.:0.04200 ## Mode :character Mode :character Median :54916 Median :0.05100 ## Mean :55224 Mean :0.04957 ## 3rd Qu.:60719 3rd Qu.:0.05750 ## Max. :76165 Max. :0.07300 ## ## share_pop_metro share_pop_hs share_non_citizen share_white_poverty ## Min. :0.3100 Min. :0.7990 Min. :0.01000 Min. :0.04000 ## 1st Qu.:0.6300 1st Qu.:0.8405 1st Qu.:0.03000 1st Qu.:0.07500 ## Median :0.7900 Median :0.8740 Median :0.04500 Median :0.09000 ## Mean :0.7502 Mean :0.8691 Mean :0.05458 Mean :0.09176 ## 3rd Qu.:0.8950 3rd Qu.:0.8980 3rd Qu.:0.08000 3rd Qu.:0.10000 ## Max. :1.0000 Max. :0.9180 Max. :0.13000 Max. :0.17000 ## NA&#39;s :3 ## gini_index share_non_white share_vote_trump hate_crimes_per_100k_splc ## Min. :0.4190 Min. :0.0600 Min. :0.040 Min. :0.06745 ## 1st Qu.:0.4400 1st Qu.:0.1950 1st Qu.:0.415 1st Qu.:0.14271 ## Median :0.4540 Median :0.2800 Median :0.490 Median :0.22620 ## Mean :0.4538 Mean :0.3157 Mean :0.490 Mean :0.30409 ## 3rd Qu.:0.4665 3rd Qu.:0.4200 3rd Qu.:0.575 3rd Qu.:0.35694 ## Max. :0.5320 Max. :0.8100 Max. :0.700 Max. :1.52230 ## NA&#39;s :4 ## avg_hatecrimes_per_100k_fbi ## Min. : 0.2669 ## 1st Qu.: 1.2931 ## Median : 1.9871 ## Mean : 2.3676 ## 3rd Qu.: 3.1843 ## Max. :10.9535 ## NA&#39;s :1 There are multiple ways of getting results in R. Particularly for basic and intermediate-level statistical analysis many core functions and packages can give you the answer that you are looking for. For example, there are a variety of packages that allow you to look at summary statistics using functions defined within those packages. You will need to install these packages before you can use them. I am only going to introduce one of them here skimr. You will need to install it before anything else. Once you have loaded the skimr package you can use it. Its main function is skim. Like summary for data frames, skim presents results for all the columns and the statistics will depend on the class of the variable. skim(hate_crimes) Hopefully in your statistical modules you had taken previously, you have learned some things about how to graphically display variables. So you may have some memory about the amount of work involved with this. Hopefully R will offer some respite. Of course, there are many different ways of producing graphics in R. In this course we rely on a package called ggplot2, which is part of the tidyverse set of packages mentioned earlier. library(ggplot2) Then we will use one of its functions to create a scatterplot. ggplot(hate_crimes, aes(x=share_vote_trump, y=avg_hatecrimes_per_100k_fbi)) + geom_point(shape=1) + geom_smooth(method=lm) ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## Warning: Removed 1 row containing non-finite outside the scale range ## (`stat_smooth()`). ## Warning: Removed 1 row containing missing values or values outside the scale ## range (`geom_point()`). What do you think this graphic is telling you? Discuss with the person next to you. Graphing is very powerful in R, and much of the spatial visualisation we will produce throughout the module will build on this. If you are not already familiar with this, I recommend a read of the data visualisation chapter of R for Data Science https://r4ds.had.co.nz/data-visualisation.html 1.6 Getting organised: R Projects One thing that can help you tremendously throughout this module is keeping your code organised.R Studio helps with this by virtue of something called R Projects. Technically, a R Studio project is just a directory with the name of the project, and a few files and folders created by R Studio for internal purposes. This is where you should hold your scripts, your data, and reports. You can manage this folder with your own operating system manager (discussed earlier, e.g., Windows) or through the R Studio file manager (that you access in the bottom right corner set of windows in R Studio). When a project is reopened, R Studio opens every file and data view that was open when the project was closed last time around. Trust me, this is a really helpful thing! If you create a project for this module, you can keep everything in once place, and refer back to your old code and your learnings throughout the module. 1.6.0.1 Activity 9: Saving your work and projects First things first, hopefully you have already created a separate folder on your desktop, or dropbox, or something like this. Now save the script you’ve been working on into this folder. By clicking on “File” and “Save as…”. Then navigate to your folder for this module, and for your script make sure to give it some meaningful name like week1lab.R or something like this. Then click ‘save’. Now, go back to “File” and select “New project…” Then in the options that appear choose “Existing Directory”. This is because you already have a folder for this work, this is where you saved your script just before. For me this was my folder called ‘crime_mapping’ you saw above. So select ‘Existing Directory’, and on the next page use the “Browse” button to select this folder (the directory) where you saved the script earlier. Once you have done this, click on ‘Create Project’ on the bottom. This will now open up a new R Studio window with your project. In the future, you can start right back up where you finished last time by navigating to the .Rproj file, and double clicking it. It helps you keep everything in one place, and lets R read everything from that folder. With simple projects a single script file and a data file is all you may have. But with more complex projects, things can rapidly become messy. So you may want to create subdirectories within this project folder. I typically use the following structure in my own work to put all files of a certain type in the same subdirectory: Scripts and code: Here I put all the text files with my analytic code, including rmarkdown files which is something we will introduce much later in the semester. Source data: Here I put the original data. I tend not to touch this once I have obtained the original data. Documentation: This is the subdirectory where I place all the data documentation (e.g., codebooks, questionnaires, etc.) Modified data: All analysis involve doing transformations and changing things in the original data files. You don’t want to mess up the original data files, so what you should do is create new data files as soon as you start changing your source data. I go so far as to place them in a different subdirectory. Literature: Analysis is all about answering research questions. There is always a literature about these questions. I place the relevant literature for the analytic project I am conducting in this subdirectory. Reports and write up: Here is where I file all the reports and data visualisations that are associated with my analysis. If you come to my office, you will see it is a very messy place. But my computer is, in contrast, a very tidy environment. You should aim for your computer workspace to be very organised as well. You can read up here on why projects are useful here: https://www.r-bloggers.com/2020/01/rstudio-projects-and-working-directories-a-beginners-guide/ "],["making-maps-in-r.html", "Chapter 2 Making Maps in R 2.1 A quick introduction of terms 2.2 Getting some spatial data to put on a map 2.3 From dataframes to spatial objects: finding spatial information in our data 2.4 Putting crime on the map - simple features 2.5 Summary", " Chapter 2 Making Maps in R This week we will start making some maps in R, and learn about how we can take regular crime data, and assign the appropriate geometry for our chosen unit of analysis. We will produce some maps, using possibly familiar ggplot notation, and learn some key terms around projection and coordinate reference systems which will be essential for your work in the coming weeks. Today we will use the following packages, so make sure you have them installed: dplyr ggplot2 ggspatial janitor readr sf tibble 2.1 A quick introduction of terms 2.1.1 Geospatial Perspective - The Basics Geospatial analysis provides a distinct perspective on the world, a unique lens through which to examine events, patterns, and processes that operate on or near the surface of our planet. Ultimately geospatial analysis concerns what happens where, and makes use of geographic information that links features and phenomena on the Earth’s surface to their locations. We can talk about a few different concepts when it comes to spatial information. These are: Place Attributes Objects 2.1.1.1 Place At the center of all spatial analysis is the concept of place. People identify with places of various sizes and shapes, from the room with the parcel of land, to the neighbourhood, to the city, the country, the state or the nation state. Places often have names, and people use these to talk about and distinguish names. Names can be official. Places also change continually as people move. The basis of rigorous and precise definition of place is a coordinate system, a set of measurements that allows place to be specified unambiguously and in a way that is meaningful to everyone. 2.1.1.2 Attributes Attribute has become the preferred term for any recorded characteristic or property of a place. A place’s name is an obvious example of an attribute. But there can be other pieces of information, such as number of crimes in a neighbourhood, or the GDP of a country. Within GIS the term ‘attributes’ usually refers to records in a data table associated with individual elements in a vector map or cells in a grid (raster or image file). These data behave exactly as data you have encountered in your past experience. The rows represent observations, and the columns represent variables. The variables can be numeric or categorical, and depending on what they are, you can apply different methods to making sense of them. The difference with other kind of data table is that the observations, your rows, correspond to places or locations. 2.1.1.3 Objects In spatial analysis it is customary to refer to places as objects. These objects can be a whole country, or a road. In forestry, the objects of interest might be trees, and their location will be represented as points. On the other hand, studies of social or economic patterns may need to consider the two-dimensional extent of places, which will therefore be represented as areas. These representations of the world are part of what is called the vector data model: A representation of the world using points, lines, and polygons. Vector models are useful for storing data that have discrete boundaries, such as country borders, land parcels, and streets. This is made up of pointsn (e.g., coordinates), lines (e.g., roads, rivers), and polygons (e.g., regions, areas): Points Points are pairs of coordinates, in latitude/longitude or some other standard system Lines Lines are ordered sequences of points connected by straight lines Polygons Polygons are ordered rings of points, also connected by straight lines to form polygons. It can contain holes, or be linked with separate islands. Objects can also be raster data. Raster data is made up of pixels (or cells), and each pixel has an associated value. Simplifying slightly, a digital photograph is an example of a raster dataset where each pixel value corresponds to a particular colour. In GIS, the pixel values may represent elevation above sea level, or chemical concentrations, or rainfall etc. The key point is that all of this data is represented as a grid of (usually square) cells. You can find more on raster data here 2.1.1.4 Networks We already mentioned lines that constitute objects of spatial data, such as streets, roads, railroads, etc. Networks constitute one-dimensional structures embedded in two or three dimensions (e.g., . Discrete point objects may be distributed on the network, representing phenomena such as landmarks, or observation points. Mathematically, a network forms a graph, and many techniques developed for graphs have application to networks. These include various ways of measuring a network’s connectivity, or of finding the shortest path between pairs of points on a network. You can have a look at the lesson on network analysis in the QGIS documentation 2.1.1.5 Maps: reference and thematic maps Historically maps have been the primary means to store and communicate spatial data. Objects and their attributes can be readily depicted, and the human eye can quickly discern patterns and anomalies in a well-designed map. In GIS we distinguish between reference and thematic maps. A reference map places the emphasis on the location of spatial objects such as cities, mountains, rivers, parks, etc. You use these maps to orient yourself in space and find out the location of particular places. Thematic maps, on the other hand, are about the spatial distribution of attributes or statistics. For example, the number of crimes across different neighbourhouds. Our focus in this book is on thematic maps. 2.1.1.6 Map projections and geographic coordinate systems Whenever we put something into a map we need some sort of system to pinpoint the location. A coordinate system allows you to integrate any dataset with other geographical datasets within a common framework. There are hundreds of them. It is common to distinguish between geographic coordinate systems and projected coordinate systems. A geographic coordinate system is a three dimensional reference system that enables you to locate any location on earth. Often this is done with longitude, latitute and elevation. Projected coordinate systems or map projections, on the other hand, try to portray the surface of the earth or a portion of the earth on a two dimensional flat piece of paper or computer screen. All projections of a sphere like the earth in a two dimensional map involve some sort of distortion. You can’t fit a three dimensional object into two dimensions without doing so. Projections differ to a large extent on the kind of distortion that they introduce. The decision as to which map projection and coordinate reference system to use, depends on the regional extent of the area you want to work in, on the analysis you want to do and often on the availability of data. Knowing the system you use would allow you to translate your data into other systems whenever this may be necessary. Often you may have to integrate data that is provided to you in different coordinate or projected systems. As long as you know the systems, you can do this. [Footnote to this for more detail: https://www.youtube.com/watch?v=6tmDxTAjux0] A traditional method of representing the earth’s shape is the use of globes. When viewed at close range the earth appears to be relatively flat. However when viewed from space, we can see that the earth is relatively spherical. Maps, are representations of reality. They are designed to not only represent features, but also their shape and spatial arrangement. Each map projection has advantages and disadvantages. The best projection for a map depends on the scale of the map, and on the purposes for which it will be used. For your purposes, you just need to understand that essentially there are different ways to flatten out the earth, in order to get it into a 2-dimensional map. The process of creating map projections can be visualised by positioning a light source inside a transparent globe on which opaque earth features are placed. Then project the feature outlines onto a two-dimensional flat piece of paper. Different ways of projecting can be produced by surrounding the globe in a cylindrical fashion, as a cone, or even as a flat surface. Each of these methods produces what is called a map projection family. Therefore, there is a family of planar projections, a family of cylindrical projections, and another called conical projections. figure_projection_families With the help of coordinate reference systems (CRS) every place on the earth can be specified by a set of three numbers, called coordinates. In general CRS can be divided into projected coordinate reference systems (also called Cartesian or rectangular coordinate reference systems) and geographic coordinate reference systems. The use of Geographic Coordinate Reference Systems is very common. They use degrees of latitude and longitude and sometimes also a height value to describe a location on the earth’s surface. The most popular is called WGS 84. This is the one you will most likely be using, and if you get your data in latitude and longitude, then this is the CRS you are working in. It is also possible that you will be using a projected CRS. This two-dimensional coordinate reference system is commonly defined by two axes. At right angles to each other, they form a so called XY-plane. The horizontal axis is normally labelled X, and the vertical axis is normally labelled Y. Working with data in the UK, on the other hand, you are most likely to be using British National Grid (BNG). The Ordnance Survey National Grid reference system is a system of geographic grid references used in Great Britain, different from using Latitude and Longitude. In this case, points will be defined by “Easting” and “Northing” rather than “Longitude” and “Latitude”. It basically divides the UK into a series of squares, and uses references to these to locate something. The most common usage is the six figure grid reference, employing three digits in each coordinate to determine a 100 m square. For example, the grid reference of the 100 m square containing the summit of Ben Nevis is NN 166 712. Grid references may also be quoted as a pair of numbers: eastings then northings in meters, measured from the southwest corner of the SV square. For example, the grid reference for Sullom Voe oil terminal in the Shetland Islands may be given as HU396753 or 439668,1175316 This will be important later on when we are linking data from different projections, or when you look at your map and you try to figure out why it might look “squished”. 2.1.1.7 Density estimation One of the more useful concepts in spatial analysis is density - the density of humans in a crowded city, or the density of retail stores in a shopping centre. Mathematically, the density of some kind of object is calculated by counting the number of such objects in an area, and dividing by the size of the area. To read more about this, I recommend Silverman, Bernard W. Density estimation for statistics and data analysis. Vol. 26. CRC press, 1986. 2.1.2 Summary Hopefully this gives you a few things to think about. Be sure that you are confident to know about: Spatial objects - what they are and how they are represented Attributes - the bits of information that belong to your spatial objects Maps and projections - especially what WSG84 and BNG mean, and why it’s important that you know what CRS your data have 2.2 Getting some spatial data to put on a map Alright let’s get some practical experience where we take some crime data, and find out how we can put it on the map! 2.2.1 Find some relevant data to show: obtaining data on crime For your first crime map, we better get some real world crime data. This can be done for the UK easily, as anonymised open crime data are released for the public to use. We can play around with police recorded crime data, which can be downloaded from the police.uk website. Let’s download some data for crime in Manchester. 2.2.2 Activity 1: Get some crime data To do acquire the police recorded crime data in the UK, you can use data.police.uk/data website. If you want to use the data from ‘data.police.uk’, you need to follow these steps: Choose Custom download under Data tab, in order to download some data. In Date range just select one month of data. Choose whatever month you like. Unfortunately, for GMP there is no more recent data available since June 2019. This is because they are having some serious IT issues see this article which apparently have disrupted this flow of data. Select the Force you are interested in and tick the box next to it. In Data sets tick Include crime data. Finally click on Generate File button. As you may notice, the data is available from Jan 2020 under Custom download tab. Because the latest data of GMP is June 2019, we should download GMP data from Archive tab, not Custom download tab. If you scroll down, you will find June 2021 folder which contains crime data from July 2018 to June 2021. I know!!😩 it’s a huge file as it has ‘crime’ and ‘stop and search’ data of all police forces from July 2018 to June 2021. You could download the data folder as a practice or use the data that we already have downloaded for you. You can go to this week’s learning materials to download from Blackboard or download the data from a website where we keep the data. Before we can use this data we need to read it or import it into R and turn it into a dataframe object. To read in the .csv file, which is the format we just downloaded, the command is read_csv() from the readr package. You’ll need to load this package first. library(readr) Again there are two ways to read in the data, if you want to open a window where you can manually navigate and open the file, you can pass file.choose() argument to the read_csv() function as illustrated earlier. #This code creates a dataframe object called crimes which will include the spreadsheet in the file we have downloaded. In my case, that is 2007-11-greater-manchester-street.csv. crimes &lt;- read_csv(file.choose()) Or, if you know the path to your file, you can code it in there, within quotation marks: crimes &lt;- read_csv(&quot;data/2019-06-greater-manchester-street.csv&quot;) ## Rows: 32058 Columns: 12 ## ── Column specification ───────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (9): Crime ID, Month, Reported by, Falls within, Location, LSOA code, LS... ## dbl (2): Longitude, Latitude ## lgl (1): Context ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Or, you can download it from the a website where we keep the data with the following code: # save URL into an object urlfile &lt;- &quot;https://raw.githubusercontent.com/eonk/cm_book/main/data/2019-06-greater-manchester-street.csv&quot; crimes &lt;- read_csv(url(urlfile)) You might notice that the object crimes has appeared in your work environment window. It will tell you how many observations (rows - and incidentally the number of recorded crimes in June 2019 within the GMP jurisdiction) and how many variables (columns) your data has. Let’s have a look at the crimes dataframe with the View() function. This will open the data browser in RStudio View(crimes) If you rather just want your results in the console, you can use the glimpse() function from the tibble package. This function does just that, it gives you a quick glimpse of the first few cases in the dataframe. Notice that there are two columns (Longitude and Latitude) that provide the require geographical coordinates that we need to plot this data. library(tibble) glimpse(crimes) ## Rows: 32,058 ## Columns: 12 ## $ `Crime ID` &lt;chr&gt; NA, &quot;aa1cc4cb0c436f463635890bcb4ff2cba08f59925… ## $ Month &lt;chr&gt; &quot;2019-06&quot;, &quot;2019-06&quot;, &quot;2019-06&quot;, &quot;2019-06&quot;, &quot;2… ## $ `Reported by` &lt;chr&gt; &quot;Greater Manchester Police&quot;, &quot;Greater Manchest… ## $ `Falls within` &lt;chr&gt; &quot;Greater Manchester Police&quot;, &quot;Greater Manchest… ## $ Longitude &lt;dbl&gt; -2.464422, -2.441166, -2.444807, -2.444807, -2… ## $ Latitude &lt;dbl&gt; 53.61250, 53.61604, 53.61151, 53.61151, 53.606… ## $ Location &lt;chr&gt; &quot;On or near Parking Area&quot;, &quot;On or near Pitcomb… ## $ `LSOA code` &lt;chr&gt; &quot;E01004768&quot;, &quot;E01004768&quot;, &quot;E01004768&quot;, &quot;E01004… ## $ `LSOA name` &lt;chr&gt; &quot;Bolton 001A&quot;, &quot;Bolton 001A&quot;, &quot;Bolton 001A&quot;, &quot;… ## $ `Crime type` &lt;chr&gt; &quot;Anti-social behaviour&quot;, &quot;Violence and sexual … ## $ `Last outcome category` &lt;chr&gt; NA, &quot;Unable to prosecute suspect&quot;, &quot;Unable to … ## $ Context &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… You may notice that a lot of the variable names are messy in that they have a space in them - this can cause issues, so before playing around too much with the data we want to clean this up. Luckily there is a very handy package you can use for this called janitor which contains the function clean_names(). library(janitor) ## ## Attaching package: &#39;janitor&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## chisq.test, fisher.test crimes &lt;- clean_names(crimes) Now the names are much neater. You can print them all for a view using the names() function: names(crimes) ## [1] &quot;crime_id&quot; &quot;month&quot; &quot;reported_by&quot; ## [4] &quot;falls_within&quot; &quot;longitude&quot; &quot;latitude&quot; ## [7] &quot;location&quot; &quot;lsoa_code&quot; &quot;lsoa_name&quot; ## [10] &quot;crime_type&quot; &quot;last_outcome_category&quot; &quot;context&quot; 2.3 From dataframes to spatial objects: finding spatial information in our data Having had a chance to inspect the data set you’ve downloaded, let’s consider what sort of spatial information we might be able to use. 2.3.1 Activity 2: Find the spatial data If you have a look at the column names, what are some of the variables which you think might have some spatial component? Have a think about each column, and how you think it may help to put these crimes on the map. Discuss in your groups. Once you are done, read on. So what did you decide in your discussion? There are a few answers here. In fact there are one each to map onto point, line, and polygon, which we read about earlier. 2.3.2 The point First, and possibly most obvious, are the coordinates provided with each crime incident recorded. You can find this in the two columns - Longitude and Latitude. These two column help put each crime incident on a specific point on a map. For example, let’s take the very first crime incident. Here we use the head() function and specify that we want the first 1 rows only with n=1 parameter. head(crimes, n = 1) ## # A tibble: 1 × 12 ## crime_id month reported_by falls_within longitude latitude location lsoa_code ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; 2019-… Greater Ma… Greater Man… -2.46 53.6 On or n… E01004768 ## # ℹ 4 more variables: lsoa_name &lt;chr&gt;, crime_type &lt;chr&gt;, ## # last_outcome_category &lt;chr&gt;, context &lt;lgl&gt; You can see that the values are -2.464422 for Longitude and 53.612495 for Latitude. These two numbers allow us to put this point on a map. 2.3.3 The line Another column which contains information about where the crime happened is the aptly named location variable. This shows you a list of locations related to where the crimes happened. You may see a few values such as on or near XYZ street. Let’s look again at the first entry. head(crimes, n = 1) ## # A tibble: 1 × 12 ## crime_id month reported_by falls_within longitude latitude location lsoa_code ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; 2019-… Greater Ma… Greater Man… -2.46 53.6 On or n… E01004768 ## # ℹ 4 more variables: lsoa_name &lt;chr&gt;, crime_type &lt;chr&gt;, ## # last_outcome_category &lt;chr&gt;, context &lt;lgl&gt; You can see that the value is On or near Parking Area this isn’t great, as we might struggle to identify which parking area… Some other ones are more useful, let’s look at the last entry for example with the tail() function. tail(crimes, n = 1) ## # A tibble: 1 × 12 ## crime_id month reported_by falls_within longitude latitude location lsoa_code ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 75e215f9… 2019… Greater Ma… Greater Man… -2.57 53.5 On or n… E01006347 ## # ℹ 4 more variables: lsoa_name &lt;chr&gt;, crime_type &lt;chr&gt;, ## # last_outcome_category &lt;chr&gt;, context &lt;lgl&gt; You can see that the value is On or near Fulwood Road. This makes our crime much easier to find, we just need to locate where is Fulwood Road. We might have a shapefile of lines of all the roads of Manchester, and if we did, we can link the crime to that particular road, in order to map it. 2.3.4 The polygon What more? You may also have seen the column lsao_name seems to have some spatial component, Let’s have a look at the first crime again. head(crimes, n = 1) ## # A tibble: 1 × 12 ## crime_id month reported_by falls_within longitude latitude location lsoa_code ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; 2019-… Greater Ma… Greater Man… -2.46 53.6 On or n… E01004768 ## # ℹ 4 more variables: lsoa_name &lt;chr&gt;, crime_type &lt;chr&gt;, ## # last_outcome_category &lt;chr&gt;, context &lt;lgl&gt; You see the value for LSOA name is Bolton 001A - Bolton we know is a Borough of Greater Manchester, but what is the 001 for ? Well it denotes a sparticular geographical sub-unit within Bolton called a Lower Layer Super Output Area. This is a unit of UK Census Geography. The basic unit for Census Geography is an ‘Outout area’ - this is the resolution at which we can access data from the UK Census. We will be making use of census data later in the course. The Ourput Area (OA) is therefore the smallest unit we could use. Normally, in this module, we will be using a slightly larger version - the Lower Super Output Area (LSOA). There are now 181,408 OAs, 34,753 lower layer super output areas (LSOA) and 7,201 middle layer super output areas (MSOA) in England and Wales. The neat thing about these Census geographies is the idea is that they don’t change (unlike administrative boundaries such as wards) and were created with statistical analysis in mind. The less neat thing is that although we use them to operationalise the concept of neighbourhood a lot, they may not bear much resemblance to what residents might think of as their neighbourhood. Think for a minute - do you know what LSOA you live in? Most likely you answered no. If you answered yes, I am impressed and you get geography nerd cred. Well done. Anyway back to our crime data. You see we have two columns that reference LSOAs, lsoa_name and lsoa_code. We can use these to link our crime data to a shapefile of a polygon which contains the geometries needed to put the crime data on the map. 2.4 Putting crime on the map - simple features So how can we use these spatial details to put our crimes on the map? We need to somehow specify a geometry for our data, which links each unit of analysis (whether that is the point, line, or polygon) to a relevant geographical representation, which allows us to put this thing on the map. How you add geographical information will vary with the type of information we have, but in all of these, we will use the simple features framework. (Illustration (c) by Allison Horst) What are simple features? sf package author Edzer Pebesma describes simple features as a standardized way of encoding spatial vector data (points, lines, polygons) in computers. The sf package is an R package for reading, writing, handling, and manipulating simple features in R, implementing the vector (points, lines, polygons) data handling functionality. Traditionally spatial analysis in R were done using the sp package which creates a particular way of storing spatial objects in R. When most packages for spatial data analysis in R and for thematic cartography were first developed sp was the only way to work with spatial data in R. There are more than 450 packages rely on sp, making it an important part of the R ecosystem. More recently a new package, sf (which stands for “simple features”), is revolutionising the way that R does spatial analysis. This new package provides a new way of storing spatial objects in R and most recent R packages for spatial analysis and cartography are using it as the new default. It is easy to transform sf objects into sp objects, so that those packages that still don’t use this new format can be used. But in this course we will emphasise the use of sf whenever possible. You can read more about the history of spatial packages and the sf package in the first two chapters of this book. Features can be thought of as “things” or objects that have a spatial location or extent; they may be physical objects like a building, or social conventions like a political state. Feature geometry refers to the spatial properties (location or extent) of a feature, and can be described by a point, a point set, a linestring, a set of linestrings, a polygon, a set of polygons, or a combination of these. The simple adjective of simple features refers to the property that linestrings and polygons are built from points connected by straight line segments. Features typically also have other properties (temporal properties, color, name, measured quantity), which are called feature attributes. For more detailed insight I recommend reading the paper Simple Features for R: Standardized Support for Spatial Vector Data 2.4.1 Mapping points with sf Let’s get started with making some maps using sf. First, make sure you install the package, and then load with library() function. library(sf) ## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE Now we can use the functions of sf in order to introduce geometries. Let’s start with the points 2.4.1.1 Activity 3: Creating a sf object of points We know that we have two columns one for Longitude and one for Latitude, which pinpoint each crime event to a specific point, close to where it happened. Not quite where it happened, as the data are anonymised (more on this later), but for our purposes here, we can assume this is the location of the crime. To map these points, we can transform our ordinary dataframe into a simple features object. To do so, we can use the st_as_sf() function, into which we need to specify what we are to transform (our dataframe), where the spatial data can be found (our columns which hold the latitude and longidude information), and also what coordinate reference system the object has (see above our discussion about projections and coordinate reference systems). Latitude longitude coordinates specify location on the WGS 84 CRS (remember I said to keep this one in mind!). We can tell R that this is our CRS of choice by including it’s [EPSG identifier] (https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset) as a parameter in our function. It is handy to know the more common EPSG identifiers. For example, for WGS84 the EPSG identifier is 4326. For British National Grid, the identifier is 27700. We will be making use of these numbers, so do note them down somewhere. Putting it all together in practice, we can create a simple features object from our dataframe using the latitude and longitude columns: crimes_sf &lt;- st_as_sf(crimes, #dataframe coords = c(&quot;longitude&quot;, &quot;latitude&quot;), #columns with coordinates crs = 4326) #crs is WGS84 We can see that this is now a simple features object using the class() function the we see the result “sf”: class(crimes_sf) ## [1] &quot;sf&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; You might also notice something else that is different between crimes and crimes_sf. Have a look at the dimension (hint look in your ‘Environment’ tab). Do you see? Discuss what you think is different with your neighour or one of the teaching team. 2.4.1.2 Activity 4: Mapping our points Now that we have this sf object, how can we map it? I mentioned before about the graphical package ggplot2. We can use this, and its syntax, in order to map spatial data using the geom_sf() geometry. First, a quick refresher on ggplot and the grammar of graphics. The grammar of graphics upon which this package is based on defines various components of a graphic. Some of the most important are: -The data: For using ggplot2 the data has to be stored as a data frame or tibble. -The geoms: They describe the objects that represent the data (e.g., points, lines, polygons, etc..). This is what gets drawn. And you can have various different types layered over each other in the same visualisation. -The aesthetics: They describe the visual characteristics that represent data (e.g., position, size, colour, shape, transparency). -Facets: They describe how data is split into subsets and displayed as multiple small graphs. -Stats: They describe statistical transformations that typically summarise data. Let’s take it one step at the time. Essentially the philosophy behind this is that all graphics are made up of layers. The package ggplot2 is based on the grammar of graphics, the idea that you can build every graph from the same few components: a data set, a set of geoms—visual marks that represent data points, and a coordinate system. Take this example (all taken from Wickham, H. (2010). A layered grammar of graphics. Journal of Computational and Graphical Statistics, 19(1), 3-28.) You have a table such as: You then want to plot this. To do so, you want to create a plot that combines the following layers: This will result in a final plot: Taking our crime data as an example, we would build up our plot as follows: Load ggplot2 package library(ggplot2) Data: ggplot(crimes, aes(x = crime_type)) Geometry: ggplot(crimes, aes(x = crime_type)) + geom_bar() Aesthetics: ggplot(crimes, aes(x = crime_type, fill = last_outcome_category)) + geom_bar() And then you could add any facets (for example if we had more than one month of data) or any statistics (for example error bars) with facet and stats layers. One more thing I do want to show is tidying up your chart, you can add theme and clean up your labels and titles and colour scheme. ggplot(crimes, aes(x = crime_type, fill = last_outcome_category)) + geom_bar() + coord_flip() + theme_minimal() + xlab(&quot;Crime Type&quot;) + ylab(&quot;Number of cases&quot;) + scale_fill_brewer(type = &quot;qual&quot;, palette = 3, name = &quot;Outcome&quot;) This is not the greatest graph you’ll ever see, but it illustrates the process. Do read up on ggplot2 for example in Hadley Wickham’s book R4DS chapter on data visualisation. So how can we use this for spatial data? We can use the geom_sf() function to do so. 2.4.1.3 Activity 5: Mapping our points Using geom_sf is slightly different to other geometries, for example how we used geom_bar() above. First we initiate the plot with the ggplot() function but don’t include the data in there. Instead, it is in the geometry where we add the data. And second we don’t need to specify the mapping of x and y. Since this is in the geometry column of our spatial object. Like so: ggplot() + geom_sf(data = crimes_sf) And here we have a map of each point in our data set, each recorded crime in June 2019 in Greater Manchester. Would you call this a map though? While it is presenting spatial data, there is not a lot of meaning being communicated. Point maps generally can be messy and their uses are specific to certain situations and cases, usually when you have fewer points, but here, these points are especially devoid of any meaning, as they are floating in a graph grid. SO let’s give it a basemap. We can do this by adding a layer to our graph object. Specifically we will use the annotation_map_tile() from the ggspatial package. This provides us with a static Open Street Map layer behind our data, giving it (some) more context. Remember to load the package (and install if you haven’t already) library(ggspatial) And then use the annotation_map_tile() function, making sure to place it before the geom_sf points layer, so the background map is placed first, and the points on top of that: ggplot() + annotation_map_tile() + geom_sf(data = crimes_sf) ## Zoom: 9 So what you see above is what we can call a basemap. The term basemap is seen often in GIS and refers to a collection of GIS data and/or orthorectified imagery that form the background setting for a map. The function of the basemap is to provide background detail necessary to orient the location of the map. Basemaps also add to the aesthetic appeal of a map. In the lecture and some readings these are described as reference maps. We often may want to use these reference maps as basemaps for our thematic and point maps. They may give us context and help with the interpretation. You can see above that you are seeing the Open Street Map Basemap. This is one option but there are others. Anyway let’s leave out points for now, and move on to how we might map our lines and polygons. 2.4.2 Mapping data by joining it to sf objects What about our other two columnds, location, and LSOAs? Well to put these on the map, we need a geometry representation of them. We will learn in this section where you may find these, how to download them, turn them into sf objects, and how to link your data to them to be able to map them. 2.4.2.1 Activity 6: Finding shapefiles In this section you are going to learn how you take one of the most popular data formats for spatial objects, the shapefile, and read it into R. The shapefile was developed by ESRI, the developers and vendors or ArcGIS. And although many other formats have developed since and ESRI no longer holds the same market position it once occupied (though they’re still the player to beat), shapefiles continue to be one of the most popular formats you will encounter in your work. You can read more about shapefiles here. We are going to learn here how to obtain shapefiles for British census geographies. In the class today we talked about the idea of neighborhouds and we explained how a good deal of sociological and criminological work traditionally used census geographies as proxies for neighbourhouds. As of today, they still are the geographical subdivisions for which we can obtain a greater number of attribute information (e.g., sociodemographics, etc.). For this activity we will focus on the polygon (the LSOA) rather than the lines of the streets, but the logic is more or less the same. Remember above we talked about what is a census geography. You can read more about census boundary data here. “Boundary data are a digitised representation of the underlying geography of the census”. Census Geography is often used in research and spatial analysis because it is divided into units based on population counts, created to form comparable units, rather than other administrative boundaries such as wards or police force areas. However depending on your research question and the context for your analysis, you might be using different units. The hierarchy of the census geographies goes from Country to Local Authority to Middle Layer Super Output Area (MSOA) to Lower Layer Super Output Area (LSOA) to Output Area: Here we will get some boundaries for Manchester. Let’s use the LSOA level, so that we can link back to our crime data earlier. These are geographical regions designed to be more stable over time and consistent in size than existing administrative and political boundaries. LSOAs comprise, on average, 600 households that are combined on the basis of spatial proximity and homogeneity of dwelling type and tenure. So to get some boundary data, you can use the UK Data Service website. There is a simple Boundary Data Selector tool which we can use. When you get to the link, you will see on the top there is some notification to help you with the boundary data selector. If in the future you are looking for boundary data and you are feeling unsure at any point, feel free to click on that note “How to use Boundary Data Selector” which will help to guide you. For now, let’s focus on the selector options. Here you can choose the country you want to select shapefiles for. We select “England”. You can also choose the type of geography we want to use. Here we select “Statistical Building Block”, as discussed above. And finally you can select when you want it for. If you are working with historical data, it makes sense to find boundaries that match the timescale for your data. Here we will be dealing with contemporary data, and therefore we want to be able to use the newest available boundary data. Once you have selected these options, click on the “Find” button. That will populate the box below: Here you can select the boundaries we want. As discussed, we want the census lower super output areas. But again, your future choices here will depend on what data you want to be mapping. Once you’ve made your choice, click on “List Areas”. This will now populate the box below. We are here concerned with Manchester. However you can select more than one if you want boundaries for more than one area as well. Just hold down “ctrl” to select multiple areas individually, or the shift key to select everything in between. Once you’ve made your decision click on the “Extract Boundary Data” button. You will see the following message: You can bookmark, or just stay on the page and wait. How long you have to wait will depend on how much data you have requested to download. When your data is read, you will see the following message: You have to right click on the “BoundaryData.zip”, and hit Save Target as on a PC or Save Link As on a Mac: Navigate to the folder you have created for this analysis, and save the .zip file there. Extract the file contents using whatever you like to use to unzip compressed files. # For example, unzip(&quot;BoundaryData.zip&quot;, exdir = &quot;BoundaryData&quot;) You should end up with a folder called “BoundaryData”. Have a look at its contents: So you can see immediately that there are some documentations around the usage of this shapefile, in the readme and the terms and conditions. Have a look at these as they will contain information about how you can use this map. For example, all your maps will have to mention where you got all the data from. So since you got this boundary data from the UKDS, you will have to note the following: “Contains National Statistics data © Crown copyright and database right [year] Contains OS data © Crown copyright [and database right] (year)” You can read more about this in the terms and conditions document. But then you will also notice that there are 4 files with the same name “england_oac_2011”. It is important that you keep all these files in the same location as each other! They all contain different bits of information about your shapefile (and they are all needed): .shp — shape format; the feature geometry itself - this is what you see on the map .shx — shape index format; a positional index of the feature geometry to allow seeking forwards and backwards quickly .dbf — attribute format; columnar attributes for each shape, in dBase IV format. .prj — projection format; the coordinate system and projection information, a plain text file describing the projection using well-known text format Sometimes there might be more files associated with your shapefile as well, but we will not cover them here. So unlike when you work with spreadsheets and data in tabular form, which typically is just all included in one file; when you work with spatial data, you have to live with the required information living in separate files that need to be stored together. So, being tidy and organised is even more important when you carry out projects that involve spatial data. Please do remember the suggestions we provided last week as to how to organise your RStudio project directories. 2.4.2.2 Activity 7: Reading shapefiles into R To read in your data, you will need to know the path to where you have saved it. Ideally this will be in your data folder in your project directory. Let’s create an object and assign it our shapefile’s name: # Remember to use the appropriate pathfile in your case # alt, manchester_lsoa &lt;- st_read(file.choose()) shp_name &lt;- &quot;data/BoundaryData/england_lsoa_2011.shp&quot; Make sure that this is saved in your working directory, and you have set your working directory. Now use the st_read() function to read in the shapefile: manchester_lsoa &lt;- st_read(shp_name) ## Reading layer `england_lsoa_2011&#39; from data source ## `/Users/user/Desktop/resquant/crime_mapping_textbook/data/BoundaryData/england_lsoa_2011.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 282 features and 3 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 378833.2 ymin: 382620.6 xmax: 390350.2 ymax: 405357.1 ## Projected CRS: OSGB36 / British National Grid Now you have your spatial data file. You can have a look at what sort of data it contains, the same way you would view a dataframe, with the View() function: View(manchester_lsoa) ## Rows: 282 ## Columns: 4 ## $ label &lt;chr&gt; &quot;E08000003E02001062E01005066&quot;, &quot;E08000003E02001092E01005073&quot;,… ## $ name &lt;chr&gt; &quot;Manchester 018E&quot;, &quot;Manchester 048C&quot;, &quot;Manchester 018A&quot;, &quot;Man… ## $ code &lt;chr&gt; &quot;E01005066&quot;, &quot;E01005073&quot;, &quot;E01005061&quot;, &quot;E01005062&quot;, &quot;E0100506… ## $ geometry &lt;POLYGON [m]&gt; POLYGON ((384850 397432, 38..., POLYGON ((382221.1 38… And of course, since it’s spatial data, you can map it using the geom_sf() function, as we did with our points: ggplot() + geom_sf(data = manchester_lsoa) Great, we now have an outline of the LSOAs in Manchester. Notice how the shape is different to that of the points in our crime data. Why do you think this is? Discuss your thoughts with your neighbour. Or one of the teaching team. Don’t be shy! 2.4.2.3 Activity 8: Data wrangling with dplyr In order to map crimes to LSOAs we might want to take a step back and think about unit of analysis at which our data are collected. In our original dataframe of crimes, we saw that each crime incident is one row. So the unit of anlysis is each crime. Since we were looking to map each crime at the location it happened, we used the latitude and longitude supplied with each one, and this supplied a geometry each for each crime type. However, when we are looking to map our data to LSOA level, we need to match the crime data to the geometry we wish to display. Have a look at the manchester_lsoa object we mapped above. How many rows (observations) does it have? You can check this by looking in the Environment pane, or by using the nrow() function. nrow(manchester_lsoa) ## [1] 282 You can see this has 282 rows. This means we have geometries for 282 LSOAs. On the other hand, our crimes dataframe has 32058 rows, one for each crime (observation). So how can we match these up? The answer lies in thinking about what it is that our map using LSOAs as our unit of analysis will be able to tell us. Think of other maps of areas - what are they usually telling you? Usually we expect to see crimes per neighbourhood - something like this. So our unit of analysis needs to be LSOA, and for each one we need to know how many crimes occurred in that area. To achieve this, we will wrangle our data using functions from the dplyr package. This is a package for conducting all sorts of operations with data frames. We are not going to cover the full functionality of dplyr (which you can consult in this tutorial), but we are going to cover three different very useful elements of dplyr: the select function, the group_by function, and the piping operator. First load the library: library(dplyr) The select() function provides you with a simple way of subsetting columns from a data frame. So, say we just want to use one variable, lsoa_code, from the crimes dataframe and store it in a new object we could write the following code: new_object &lt;- select(crimes, lsoa_code) We can also use the group_by() function for performing group operations. Essentially this function ask R to group cases within categories and then do something with those grouped cases. So, say, we want to count the number of cases within each LSOA, we could use the following code: #First we group the cases by LSOA code and stored this organised data into a new object grouped_crimes &lt;- group_by(new_object, lsoa_code) #Then we could count the number of cases within each category and use the summarise function to print the results summarise(grouped_crimes, count = n()) #We could infact create a new dataframe with these results crime_per_LSOA &lt;- summarise(grouped_crimes, count = n()) As you can see we can do what we wanted, create a new dataframe with the required info, but if we do this we are creating many objects that we don’t need, one at each step. Instead there is a more efficient way of doing this, without so many intermediate steps clogging up our environment with unnecessary objects. That’s where the piping operator comes handy. The piping operator is written like %&gt;% and it can be read as “and then”. Look at the code below: #First we say create a new object called crime_per_lsoa, and then select only the LSOA.code column to exist in this object, and then group this object by the LSOA.code, and then count the number of cases within each category, this is what I want in the new object. crimes_per_lsoa &lt;- crimes %&gt;% group_by(lsoa_code) %&gt;% summarise(count=n()) Essentially we obtain the same results but with more streamlined and elegant code, and not needing additional objects in our environment. And now we have a new object, crimes_per_lsoa if we have a look at this one, we can now see what each row represents one LSOA, and next to it we have a variable for the number of crimes from each area. We created a new dataframe from a frequency table, and as each row of the crimes data was one crime, the frequency table tells us the number of crimes which occurred in each LSOA. Those of you playing close attention might note that there are still more observations in this dataframe (1671) than in the manchester_lsoas one (282). Why do you think that might be? Look back at how you answered the final question for the previous activity for a hint. 2.4.2.4 Activity 9: Join data to sf object Our next task is to link our crimes data to our sf spatial object to help us map this. Notice anything similar between the data from the shapefile and the frequency table data we just created? Do they share a column? Yes! You might notice that the lsoa_code field in the crimes data matches the values in the code field in the spatial data. In theory we could join these two data tables. So how do we do this? Well what you can do is to link one data set with another. Data linking is used to bring together information from different sources in order to create a new, richer dataset. This involves identifying and combining information from corresponding records on each of the different source datasets. The records in the resulting linked dataset contain some data from each of the source datasets. Most linking techniques combine records from different datasets if they refer to the same entity (an entity may be a person, organisation, household or even a geographic region.) You can merge (combine) rows from one table into another just by pasting them in the first empty cells below the target table—the table grows in size to include the new rows. And if the rows in both tables match up, you can merge columns from one table with another by pasting them in the first empty cells to the right of the table—again, the table grows, this time to include the new columns. Merging rows is pretty straightforward, but merging columns can be tricky if the rows of one table don’t always line up with the rows in the other table. By using left_join() from the dplyr package, you can avoid some of the alignment problems. left_join() will return all rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned. So we’ve already identified that both our crimes data, and the spatial data contain a column with matching values, the codes for the LSOA that each row represents. You need a unique identifier to be present for each row in all the data sets that you wish to join. This is how R knows what values belong to what row! What you are doing is matching each value from one table to the next, using this unique identified column, that exists in both tables. For example, let’s say we have two data sets from some people in Hawkins, Indiana. In one data set we collected information about their age. In another one, we collected information about their hair colour. If we collected some information that is unique to each observation, and this is the same in both sets of data, for example their names, then we can link them up, based on this information. Something like this: And by doing so, we produce a final table that contains all values, lined up correctly for each individual observation, like this: This is all we are doing, when merging tables, is we are making use that we line up the correct value for all the variables, for all our observations. Why are we using left join though? There is a whole family of join functions as part of dplyr which join data sets. There is also a right_join, and an inner_join and an outer_join and a full_join. But here we use left join, because that way we keep all the rows in x (the left-hand side dataframe), and join to it all the matched columns in y (the right-hand side dataframe). So let’s join the crimes data to the spatial data, using left_join(): We have to tell left_join what are the dataframes we want to join, as well as the names of the columns that contain the matching values in each one. This is “code” in the manchester_lsoa dataframe and “lsoa_code” in the crimes_per_lsoa dataframe. Like so: manchester_lsoa &lt;- left_join(manchester_lsoa, crimes_per_lsoa, by = c(&quot;code&quot;=&quot;lsoa_code&quot;)) Now if you have a look at the data again, you will see that the column of number of crimes (n) has been added on. 2.4.2.5 Activity 10: Mapping our data at polygon level Now that we have joined the crimes data to the geometry, you can use this to make our map! Remember our original empty map: ggplot() + geom_sf(data = manchester_lsoa) Well now, since we have the column (variable) for number of crimes here, we can use that to share the polygons based on how many crimes there are in each LSOA. We can do this by specifying the fill= parameter of the geom_sf function. ggplot() + geom_sf(data = manchester_lsoa, aes(fill = count)) We can add a basemap, and adjust the colour scheme, and even the opacity to see under our shape files. ggplot() + annotation_map_tile() + # add basemap geom_sf(data = manchester_lsoa, aes(fill = count), alpha = 0.7) + # alpha sets the opacity scale_fill_gradient2(name =&quot;Number of crimes&quot;) #use scale_fill_gradient2() for a different palette and name the variable on the legend ## Zoom: 10 2.5 Summary In this session we had a play around with some regular old crime data and discovered how we can use the sf package in R to assign it a geometry (both at point and polygon level), and how that can help us visualise our results. We covered some very important concepts such as projections and coordinate reference systems, and we had a play at acquiring shapefiles which can help us visualise our data. We had a think about units of analysis, and how that will affect how we visualise our data. Make sure to complete the homework tasks available on Blackboard, and once you have done that, and read all the readings and watched all the videos, complete your homework quiz. Next week we will spend a bit of more time discussing how to make good choices when producing maps. "],["thematic-maps-in-r.html", "Chapter 3 Thematic maps in R 3.1 Introduction 3.2 Creating thematic maps 3.3 Classification systems for thematic maps 3.4 Using graduated symbols 3.5 Mapping rates rather than counts 3.6 Summary", " Chapter 3 Thematic maps in R 3.1 Introduction Last week we showed you fairly quickly how to create maps by understanding how data may have spatial elements, and how that can be linked to geometries. This week we will get to know how to think about thematic maps, and how to apply your learning to creating your own maps of this variety. In our lecture videos this week we discuss in detail issues with choropleth maps. So the focus of today’s lab is going to be around thematic maps and some of the choices we discussed. We will also introduce faceting and small multiples, which is a format for comparing the geographical distribution of different social phenomena. For this session we will be using the spatial object that you created last week and complement it with additional information from the census. So first of all you will have to rerun the code you used to create the manchester_lsoa sf object. Apart from doing so, you want to start your session loading the libraries you know for sure you will need: dplyr janitor readr sf shinyjs tmap You may not remember all of what you did to generate that file so let’s not waste time and just cut and paste from below (but try to remember what each of the lines of code is doing and if you are not clear look at the notes from last week). Imagine you had to do all of this again by pointing and clicking in a graphical user interface rather than just sending the code to the console! As you will see time and time again, code in the end is a much more efficient way of talking to a computer. crimes &lt;- read_csv(&quot;https://raw.githubusercontent.com/eonk/cm_book/main/data/2019-06-greater-manchester-street.csv&quot;) ## Rows: 32058 Columns: 12 ## ── Column specification ───────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (9): Crime ID, Month, Reported by, Falls within, Location, LSOA code, LS... ## dbl (2): Longitude, Latitude ## lgl (1): Context ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #The following assumes you have a subdirectory called BoundaryData in your data folder, if not then you will need to change to the &#39;pathfile&#39; where you store your LSOA shapefile. shp_name &lt;- &quot;data/BoundaryData/england_lsoa_2011.shp&quot; manchester_lsoa &lt;- st_read(shp_name) #Alternatively, you can download the &#39;LSOA shapefile&#39; from where we saved the data. #Important! note that I store it in on my &#39;Data&#39; folder You HAVE TO change that if needed. download.file(&quot;https://www.dropbox.com/s/h5c1okn4m6t3rqe/BoundaryData.zip?dl=1&quot; , destfile=&quot;data/BoundaryData.zip&quot;, # change to your local directory mode = &quot;wb&quot;) # write binary data #Important! note that I extract file to the data/BoundaryData folder. You HAVE TO change exdir (the directory to extract files to) unzip(&quot;data/BoundaryData.zip&quot;, exdir = &quot;data/BoundaryData&quot;) manchester_lsoa &lt;- st_read(&quot;data/BoundaryData/BoundaryData/england_lsoa_2011.shp&quot;) Once you import the data, let’s count the number of crimes in each LSOA units like what we did in the week 2. #count the number of crimes in each LSOA crimes_per_lsoa &lt;- crimes %&gt;% clean_names() %&gt;% select(lsoa_code) %&gt;% group_by(lsoa_code) %&gt;% summarise(count=n()) #merge the crime count with the LSOA file manchester_crime_lsoa &lt;- left_join(manchester_lsoa, crimes_per_lsoa, by = c(&quot;code&quot;=&quot;lsoa_code&quot;)) #Any LSOA units with no crime counted (E01005248 and E01005278) are treated as NA, so replace this as 0 #However, this process you need to carefully proceed. In some context, you could consider &#39;unknown&#39; or &#39;missing&#39; not 0 manchester_crime_lsoa$count[is.na(manchester_crime_lsoa$count)] &lt;- 0 You may not want to have to go through this process all the time. One thing you could do is to save the manchester_lsoa object as a physical file in your machine. You can use the st_write() function from the sf package to do this. If we want to write into a shapefile format we would do as shown below: st_write(manchester_crime_lsoa, &quot;data/BoundaryData/manchester_crime_lsoa.shp&quot;) Notice how four files have appeared in your working directory, in your “BoundaryData”” subdirectory or whatever you called it. Remember what we said last week about shapefiles, there are a collection of files that need to be kept together. If you wanted to bring this shapefile back into R at any future point, you would only need to use the st_read() function. manchester_crime_lsoa &lt;- st_read(&quot;data/BoundaryData/manchester_crime_lsoa.shp&quot;) ## Reading layer `manchester_crime_lsoa&#39; from data source ## `/Users/user/Desktop/resquant/crime_mapping_textbook/data/BoundaryData/manchester_crime_lsoa.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 282 features and 4 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 378833.2 ymin: 382620.6 xmax: 390350.2 ymax: 405357.1 ## Projected CRS: Transverse_Mercator 3.1.1 Activity 1: Spot the difference Before we carry on, can you tell what is different between manchester_lsoa.shp and manchester_crime_lsoa.shp that you now have saved for working with? Discuss in your groups. 3.2 Creating thematic maps Today we are going to introduce the tmap package. This package was developed to easily produce thematic maps. It is inspired by the ggplot2 package and the layered grammar of graphics. It was written by Martjin Tennekes a Dutch data scientist. There are a number of vignettes in the CRAN repository and the GitHub repo for this package that you can explore. GitHub is a collaborative website used by software developers and data scientist, also contains a useful readme section with additional resources to familiarise yourself with this package. Each map can be plotted as a static map (plot mode) and shown interactively (view mode) as we briefly saw last week. We will start by focusing on static maps. Every time you use this package you will need a line of code that specifies the spatial object you will be using. Although originally developed to handle sp objects only, it now also has support for sf objects. For specifying the spatial object we use the tm_shape() function and inside we specify the name of the spatial object we are using. On its own, this will do nothing apparent. No map will be created. We need to add additional functions to specify what we are doing with that spatial object. If you try to run this line on its own, you’ll get an error telling you you must “Error: no layer elements defined after tm_shape”. library(tmap) tm_shape(manchester_crime_lsoa) The main plotting method consists of elements that we can add. The first element is the tm_shape() function specifying the spatial object, and then we can add a series of elements specifying layers in the visualisation. They can include polygons, symbols, polylines, raster, and text labels as base layers. We will add a polygon using tm_polygon(). As noted, with tmap you can produce both static and interactive maps. The interactive maps rely on leaflet. You can control whether the map is static or interactive with the tmap_mode() function. If you want a static map you pass plot as an argument, if you want an interactive map you pass view as an argument. Let’s create a static map first. tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(manchester_crime_lsoa) + tm_polygons() Given that we are not passing any additional arguments all we are getting is a map with the shape of the geographies that we are representing, the census LSOAs for Manchester city. We can, however, ask R to produce a choropleth map by mapping the values of a variable in our data table using colour. In tmap we need to denote our variables between quotes. The first argument we pass then would be the name of the variable we want to visualise. If you remember we have a count for crimes (“count”), so let’s visualise that by creating a thematic map. tm_shape(manchester_crime_lsoa) + tm_polygons(&quot;count&quot;) We have been using tm_polygons() but we can also add the elements of a polygon map using different functions that break down what we represent here. In the map above you see the polygons have a dual representation, the borders are represented by lines and the colour is mapped to the intensity of the quantitative variable we are representing. With darker colours representing more of the variable, the areas with more crimes. Instead of using tm_polygon() we can use the related functions tm_fill(), for the colour inside the polygons, and tm_borders(), for the aesthetics representing the border of the polygons. Say we find the borders distracting and we want to set them to be transparent. In that case we could just use tm_fill(). tm_shape(manchester_crime_lsoa) + tm_fill(&quot;count&quot;) As you can see here, the look is a bit cleaner. We don’t need to get rid of the borders completely. Perhaps we want to make them a bit more translucent. We could do that by adding the border element but making the drawing of the borders less pronounced. tm_shape(manchester_crime_lsoa) + tm_fill(&quot;count&quot;) + tm_borders(alpha = 0.1) The alpha parameter that we are inserting within tm_borders() controls the transparency of the borders, we can go from 0 (totally transparent) to 1 (not transparent). You can play around with this value and see the results. Notice in the last few maps we did not have to specify whether we wanted the map to be static or interactive. When you use tmap, R will remember the mode you want to use. So once you specify tmap_mode(\"plot\"), all the subsequent maps will be static. It is only when you want to change this behaviour that you would need another tmap_mode call. Notice as well that the legend in this map is (a) not very informative and (b) located in a place that is less than optimal, since it covers part of the map. We can add a title within the tm_fill to clarify what count is and we can use the tm_layout() function to control the appearance of the legend. This later function tm_layout allows you to think about many of the more general cosmetics of the map. tm_shape(manchester_crime_lsoa) + tm_fill(&quot;count&quot;, title = &quot;Crime counts&quot;) + tm_borders(alpha = 0.1) + tm_layout(main.title = &quot;Crime in Manchester City, June/2019&quot;, main.title.size = 0.7 , legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8) We are also going to change the current style of the maps by making them more friendly to colour blind people. We can use the tmap_style() function to do so. current_style &lt;- tmap_style(&quot;col_blind&quot;) ## tmap style set to &quot;col_blind&quot; ## other available styles are: &quot;white&quot;, &quot;gray&quot;, &quot;natural&quot;, &quot;cobalt&quot;, &quot;albatross&quot;, &quot;beaver&quot;, &quot;bw&quot;, &quot;classic&quot;, &quot;watercolor&quot; See how the map changes. tm_shape(manchester_crime_lsoa) + tm_fill(&quot;count&quot;, title = &quot;Crime counts&quot;) + tm_borders(alpha = 0.1) + tm_layout(main.title = &quot;Crime in Manchester City, June/2019&quot;, main.title.size = 0.7 , legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8) 3.3 Classification systems for thematic maps In thematic mapping, you have to make some key decisions, the most important one being how to display your data. When mapping a quantitative variable, we have to “bin” this variable into groups. For example in the map we made below, the default binning applied was to display LSOAs grouped into those with 1 -200, 201-400, 401-600 and 601-800 crimes. But why these? How were these groupings decided upon? The quantitative information, being directly measured (e.g. total population) or derived (e.g. population density), is usually classified before its symbolization in a thematic map. Theoretically, accurate classes that best reflect the distributional character of the data set can be calculated. The equal interval (or equal step) classification method divides the range of attribute values into equally sized classes. What this means is that the values are divided into equal groups. This approach is best for continuous data. The quantile map bin the same count of features into each of its classes. This classification method places equal numbers of observations into each class. This method is best for data that is evenly distributed across its range. The natural breaks (or Jenks) classification method utilizes an algorithm to group values in classes that are separated by distinct break points. It is an optimisation method which takes an iterative approach to its groupings to achieve least variation within each class. This method is best used with data that is unevenly distributed but not skewed toward either end of the distribution. The standard deviation map uses the standard deviation (standardised measure of observations’ deviation from the mean) to bin the observations into classes. This classification method forms each class by adding and subtracting the standard deviation from the mean of the dataset. It is best suited to be used with data that conforms to a normal distribution. The above should be familiar from your reading, but if you would like another angle I recommend a browse of this guide which has some nice visualisations. 3.3.1 Activity 2: Comparing classifications For comparing the effects of using different methods we can use small multiples. Small multiples is simply a way of reproducing side by sides similar maps for comparative purposes. To be more precise small multiples are sets of charts of the same type, with the same scale, presented together at a small size and with minimal detail, usually in a grid of some kind. The term was at least popularized by Edward Tufte, appearing first in his Visual Display of Quantitative Information in 1983. There are different ways of creating small multiples with tmap as you could see in the vignettes for the package, some of which are quicker but a bit more restricted. Here we are going to use tmap_arrange(). With tmap_arrange() first we need to create the maps we want and then we arrange them together. Let’s make four maps, each one using a different classification method: Equal interval, Quantile, Natural breaks (Jenks), and Standard Deviation. For each map, instead of visualising them one by one, just assign them to a new object. Let’s call them map1, map2, map3 and map4. So let’s make map1. This will create a thematic map using equal intervals: map1 &lt;- tm_shape(manchester_crime_lsoa) + #use tm_shape function to specify spatial object tm_fill(&quot;count&quot;, style=&quot;equal&quot;, title = &quot;Equal&quot;) + #use tm_fill to specify variable, classification method, and give the map a title tm_layout(legend.position = c(&quot;right&quot;, &quot;bottom&quot;), #use tm_layout to make the legend look nice legend.title.size = 0.8, legend.text.size = 0.5) Now create map2, with the jenks method often preferred by geographers: map2 &lt;- tm_shape(manchester_crime_lsoa) + tm_fill(&quot;count&quot;, style=&quot;jenks&quot;, title = &quot;Jenks&quot;) + tm_layout(legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8, legend.text.size = 0.5) Now create map3, with the quantile method often preferred by epidemiologists: map3 &lt;- tm_shape(manchester_crime_lsoa) + tm_fill(&quot;count&quot;, style=&quot;quantile&quot;, title = &quot;Quantile&quot;) + tm_layout(legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8, legend.text.size = 0.5) And finally make map4, standard deviation map, which maps the values of our variable to distance to the mean value. map4 &lt;- tm_shape(manchester_crime_lsoa) + tm_fill(&quot;count&quot;, style=&quot;sd&quot;, title = &quot;Standard Deviation&quot;) + tm_borders(alpha=0.1) + tm_layout(legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8, legend.text.size = 0.5) Notice that we are not plotting the maps, we are storing them into R objects (map1 to map4). This way they are saved, and you can call them later, which is what we need in order to plot them together using the tmap_arrange() function. So if you wanted to map just map3 for example, all you need to do, is call the map3 object. Like so: map3 But now we will plot all 4 maps together, arranged using the tmap_arrange() function. Like so: #And now we deploy tmap_arrange to plot these maps together tmap_arrange(map1, map2, map3, map4) There are some other classification methods built into tmap which you can experiment with if you’d like. Your discrete gradient options are “cat”, “fixed”, “sd”, “equal”, “pretty”, “quantile”, “kmeans”, “hclust”, “bclust”, “fisher”, “jenks”, “dpih”, “headtails”, and “log10_pretty”. A numeric variable is processed as a categorical variable when using “cat”, i.e. each unique value will correspond to a distinct category. Taken from the help file we can find more information about these, for example the “kmeans” style uses kmeans clustering technique (a form of unsupervised statistical learning) to generate the breaks. The “hclust” style uses hclust to generate the breaks using hierarchical clustering and the “bclust” style uses bclust to generate the breaks using bagged clustering. These approaches are outisde the scope of what we cover, but just keep in mind that there are many different ways to classify your data, and you must think carefully about the choice you make, as it may affect your readers’ conclusions from your map. 3.4 Using graduated symbols Some of the literature on thematic cartography highlights how counts, like the ones above, are best represented using graduated symbols rather than choropleth maps (using colour, as we did above). So let’s try to go for a more appropriate representation. In tmap you can use tm_symbols for this. We will use tm_borders to provide some context. tm_shape(manchester_crime_lsoa) + tm_bubbles(&quot;count&quot;) First thing you see is that we loose the context (provided by the polygon borders) that we had earlier. The border.lwd argument set to NA in the tm_symbols() is asking R not to draw a border to the circles. Whereas tm_borders() brings back a layer with the borders of the polygons representing the different LSOAs in Manchester city. Notice how I am modifying the transparency of the borders with the alpha parameter. tm_shape(manchester_crime_lsoa) + #use tm_shape function to specify spatial object tm_bubbles(&quot;count&quot;, border.lwd=NA) + #use tm_bubbles to add the bubble visualisation, but set the &#39;border.lwd&#39; parameter to NA, meaning no symbol borders are drawn tm_borders(alpha=0.1) + #add the LSOA border outlines using tm_borders, but set their transparency using the alpha parameter (0 is totally transparent, 1 is not at all) tm_layout(legend.position = c(&quot;right&quot;, &quot;bottom&quot;), #use tm_layout to make the legend look nice legend.title.size = 0.8, legend.text.size = 0.5) 3.5 Mapping rates rather than counts In much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that population is not equally distributed in space. That means that if we do not account for how many people are somewhere, we end up mapping population size rather than our topic of interest. As always, there is a relevant xkcd for that: In specific to crime mapping, there is an ongoing issue of the denominators dilemma which has been cropping up in your reading. This is concerned with choosing the most appropriate measure for calculating crime rates. The best measure is one which captures opportunities. You read about some approaches to capturing ambient population for example to estimate risk for on-street crimes. Whatever denominator you choose, you will usually want to make a case as to why that is the best representation of the opportunities for the crime type you’re interested in. 3.5.1 Activity 3: Getting population data from the census Last week you learned how to obtain crime data from the police UK website and you also developed the skills to obtain shapefiles with the boundaries for the UK census geographies. Specifically you learnt how to obtain LSOAs boundaries. Then we taught you how to join these data tables using dplyr. If you open your manchester_lsoa object you will see that at the moment you only have one field in this dataframe providing you with statistical information. However, there is a great deal of additional information that you could add to these data frame. Given that you are using census geographies you could add to it all kind of socio demographic variables available from the census. You may want to read this brief tutorial to get a sense for how to obtain the data.We are going to get some data for Manchester city LSOAs. Let me warn you though, the census data portal is one of the closest things to hell you are going to come across on the internet. Using it will be a good reminder of why point and click interfaces can suck the life out of you. From the main Infuse portal select the 2011 census data then when queried pick selection by geography: Expand the local authorities and select Manchester. Expand Manchester and select LSOAs: At the bottom of the page click in Add and then where it says Next. Now big tip. Do not press back in your browser. If you need to navigate back once you get to that point use the previous button at the bottom of the screen. You will regret it if you don’t do this. Now you will need to practice navigating the Infuse system to generate a data table that has a number of relevant fields we are going to use today and at a later point this semester. I want you to create a file with information about: the resident population, the workday population, and the number of deprivation households. This will involve some trial and error but you should end up with a selection like the one below: Once you have those fields click next to get the data and download the file. Unzip them and see you have your .csv file. Save this into your data subfolder in your project directory. Use read_csv() function from the readr package to import this data. Notice that even all the variables that begin with “f” are numbers they have been read into R as characters. This is to do with the fact the first two lines do not represent cases and do have characters. R is coercing everything into character vectors. Let’s clean this a bit. First we will get rid of some of the first rows which are blank. Depending on how you have downloaded the data, the number of blank rows you have may vary - just use the head() function to look at the first rows of your data. Our data has two blank rows, so we will use the slice() function from dplyr to remove the first two rows. We can use slice to select cases based on row number. We don’t need the first two rows so we can select rows 3 to 284. census_lsoa_m &lt;- slice(census_lsoa_m, 3:284) There are also fields that we don’t need. We only need the variables beginning with F for those have the information about population and deprivation, and the GEO_CODE tag which will allow us to link this table to the manchester_lsoa file. census_lsoa_m &lt;- select(census_lsoa_m, GEO_CODE, F996:F323339) We also want to convert the character variables into numeric ones, whilst preserving the id as a character variable. For this we will use the lapply function. This is a convenient function that will administer a function to the elements we pass as an argument. In this case we are asking to apply the as.numeric() function to the columns 2 to 9 of the census_lsoa_m data frame. This is turning into numeric all those character columns. census_lsoa_m[2:9] &lt;- lapply(census_lsoa_m[2:9], as.numeric) The only problem we have now is that the variable names are not very informative. If you look at the metadata file that came along you can see that there is a key there to understand what these variables mean. We could use that information to create more meaningful names for the variables we have. We will use the rename() function from the dplyr package to do the renaming: census_lsoa_m &lt;- rename(census_lsoa_m, tothouse = F996, notdepr = F997, depriv1 = F998, depriv2 = F999, depriv3 = F1000, depriv4 = F1001, respop = F2384, wkdpop = F323339) The rename function takes as the first argument the name of the dataframe. Then for each variable you want to change you write down the new name followed by the old name. Now that we have the file ready we can link it to our manchester_lsoa file using code we learned last week. We use again the left_join() function to add to the manchester_lsoa dataframe the variables that are present in the census_lsoa_m. The first argument in the function is the name of the dataframe to which we want to add fields, the second argument the name of the dataframe from which those fields come, and then you need to specify using “by” the name of the variables on each of these two dataframes that have the id variable that will allow us to ensure that we are linking the information across the same observations. manchester_crime_lsoa &lt;- left_join(manchester_crime_lsoa, census_lsoa_m, by = c(&quot;code&quot;=&quot;GEO_CODE&quot;)) And there you go… Now you have a datafile with quite a few pieces of additional information about LSOAs in Manchester. The next step is to use this information. 3.5.1.1 Activity 4: Computing crime rates Ok, so now we have a field that provides us with the number of crimes and two alternative counts of population for each LSOA in Manchester in the same dataframe. We could compute the rate of crime in each using the population counts as our denominator. Let’s see how the maps may compare using these different denominators. But first we need to create new variables. For this we can use the mutate() function from the dplyr package. This is a very helpful function to create new variables in a dataframe based on transformations or mathematical operations performed in other variables within the dataframe. In this function, the first argument is the name of the data frame, and then we can pass as arguments all new variables we want to create as well as the instructions as to how we are creating those variables. First we want to create a rate using the usual residents, since crime rates are often expressed by 100,000 inhabitants we will multiply the division of the number of crimes by the number of usual residents by 100,000. We will then create another variable, crimr2, using the workday population as the denominator. We will store this new variables in our existing manchester_lsoa dataset. You can see that below then I specify the name of a new variable crimr1 and then I tell the function I want that variable to equal (for each case) the division of the values in the variable count (number of crimes) by the variable respop (number of people residing in the area) and then we multiply the result of this division by 100,000 to obtain a rate expressed in those terms. Then we do likewise for the alternative measure of crime. manchester_crime_lsoa &lt;- mutate(manchester_crime_lsoa, crimr1 = (count/respop)*100000, crimr2 = (count/wkdpop)*100000) And now we have two new variables, one for crime rate with residential population as a denominator, and another with workplace population as a denominator. 3.5.2 Activity 5: Mapping crime rates Now that we have our variables for crime rate per population, we can use this to produce our crime maps! Let’s first map crime count, next to residential population, and then the crime rate. We can do this by creating two maps, and then using our trusty tmap_arrange() to put them next to one another. Let’s also use a different palette for each map, that is a different fill colour. To change the colours for the fill of the polygons you can use the palette argument within the tm_fill() function. You can explore different palettes running the following code: tmaptools::palette_explorer() Pick the ones you like, and use them. Here I will use Blues, Greens and Reds crime_count_map &lt;- tm_shape(manchester_crime_lsoa) + tm_fill(&quot;count&quot;, style=&quot;quantile&quot;, palette= &quot;Blues&quot;, title = &quot;Crime count&quot;) + tm_layout(panel.labels = &quot;Crime count&quot;, legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8, legend.text.size = 0.5) res_pop_map &lt;- tm_shape(manchester_crime_lsoa) + tm_fill(&quot;respop&quot;, style=&quot;quantile&quot;, palette= &quot;Greens&quot;, title = &quot;Residential population&quot;) + tm_layout(panel.labels = &quot;Residential population&quot;, legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8, legend.text.size = 0.5) crime_rate_map &lt;- tm_shape(manchester_crime_lsoa) + tm_fill(&quot;crimr1&quot;, style=&quot;quantile&quot;, palette= &quot;Reds&quot;, title = &quot;Crime rate&quot;) + tm_layout(panel.labels = &quot;Crime per 100,000 population&quot;, legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8, legend.text.size = 0.5) tmap_arrange(crime_count_map, res_pop_map, crime_rate_map) What do you think about these three maps? How do you think this might be different if we were to look at workday population instead of residential population as a denominator? Discuss in your groups. Once you have completed this activity, let’s explore your map with the crime rate using the usual residents as the denominator using the interactive way. Assuming you want to display ‘crime_rate_map’ we just created, you could use the following code. tmap_mode(&quot;view&quot;) crime_rate_map You may find it useful to shift to the OpenStreetMap view by clicking in the box to the left, since it will give you a bit more contextual information than the default CartoDB basemap. In the first lecture we spoke a bit about Open Street Map, but if you’re interested it’s definitely worth reading up on. As I mentioned, Open Street Map is a non-profit foundation whose aim is to support and enable the development of freely-reusable geospatial data, and relies heavily on volunteers participating in this project to map their local areas. You can have a look here for ongoing humanitarian projects, or read here about the mapping parties I told you about. At the very least though, in the spirit of open source and crowdsourcing, take a moment to appreciate that all these volunteers of people just like you have contributed to creating such a detailed geographical database of our world. That’s definitely something kinda cool to think about! 3.6 Summary This week we learned some basic principles of thematic maps. We learned how to make them using the tmap package, we learned about the importance of classification schemes, and how each one may produce a different looking map, which may tell a different story. We learned how to access population data from the UK census, and how we can use that to calculate crime rates instead of crime counts. Taking this forward, make sure to think critically about the decisions that go into producing your thematic maps "],["performing-spatial-operations-in-r.html", "Chapter 4 Performing spatial operations in R 4.1 Criminality of place 4.2 Getting data of this week 4.3 Geocoding from an address 4.4 Making interactive maps with leaflet 4.5 Spatial operations", " Chapter 4 Performing spatial operations in R By now you have come a long way in terms of taking your spatial data, and visualising it using maps, and being able to present the values of a variable using thematic maps. You have had some practice in taking data which has a spatial component, and joining it to a shapefile, using the common column, in order to be able to visually demonstrate variation on something, such as the crime rate, across space. We hope that you are finding this to be really exciting stuff, and an opportunity to get yourselves accustomed to spatial data. If there is anything you are unsure about, or want to catch up on, please do not hesitate to revisit older material, and ask the teaching staff questions about it. We build on each week acquiring knowledge cumulatively, so don’t let yourself get stuck anywhere down the line. But, if you’re ready, today we will go a step further, and get your hands dirty with spatial manipulation of your data. Thus far, our data manipulation exercises were such that you might be familiar with, from your earlier exposures to data analysis. Linking datasets using a common column, calculating a new variable (new column) from values of existing variables, these are all tasks which you can perform on spatial or non-spatial data. However today we will explore some exercises in data manipulation which are specific to spatial data analysis. After this session you can truly say you are masters of spatial data manipulation. So let’s get started with that! The main objectives for this session are that by the end you will have: used geocoding methods to translate postcodes into geographic coordinates made interactive point map with leaflet met a new format of spatial shape file called geojson subset points that are within a certain area using a spatial operation created new polygons by generating buffers around points counted the number of points that fall within a polygon, known as points in polygon These are all very useful tools for the spatial crime analyst, and we will hope to demonstrate this by working through an example project, where you would make use of all of these tools. The packages we will use today are: dplyr janitor leaflet purrr readr rjson sf 4.1 Criminality of place Let’s consider the assumption that licenced premises which serve alcohol are associated with increased crimes. We might have some hypotheses about why this may be. One theory might be that some of these serve as crime attractors. Crime attractors are particular places, areas, neighbourhoods, districts which create well-known criminal opportunities to which strongly motivated, intending criminal offenders are attracted because of the known opportunities for particular types of crime. Examples might include bar districts; prostitution areas; drug markets; large shopping malls, particularly those near major public transit exchanges; large, insecure parking lots in business or commercial areas. The intending offender goes to rough bars looking for fights or other kinds of ‘action’. On the other hand, it is possible that these areas are crime generators. Crime generators are particular areas to which large numbers of people are attracted for reasons unrelated to any particular level of criminal motivation they might have or to any particular crime they might end up committing. Typical examples might include shopping precincts; entertainment districts; office concentrations; or sports stadiums. To read further in crime attractors vs crime generators turn to your recommended reading of Brantingham, P., &amp; Brantingham, P. (1995). Criminality of place. European journal on criminal policy and research, 3(3), 5-26.). There have since been more developments, for example about crime radiators and absorbers as well (watch this Risky Places lecture from Kate Bowers: to learn more! It’s possible that some licensed premises attract crimes, due to their reputation. However it is also possible that some of them are simply located in areas that are busy, attracts lots of people for lots of reasons, and crimes occurr as a result of an abundance of opportunities instead. In any case, what we want to do is to examine whether certain outlets have more crimes near them than others. We can do this using open data, some R code, and the spatial operations discussed above. So let’s get to it! 4.2 Getting data of this week Manchester City Council have an Open Data Catalogue on their website, which you can use to browse through what sorts of data they release to the public. There are some more and some less interesting data sets made available here. It’s not quite as impressive as the open data from some of the cities in the US such as New York or Dallas but we’ll take it. One interesting data set, especially for our questions about the different alcohol outlets is the Licensed Premises data set. This details all the currently active licenced premises in Manchester. You can see there is a link to download now. As always, there are a few ways you can download this data set. On the manual side of things, you can simply right click on the download link from the website, save it to your computer, and read it in from there, by specifying the file path. Remember, if you save it in your working directory, then you just need to specify the file name, as the working directory folder is where R will first look for this file. So without dragging this on any further, let’s read in the licensed premises data directly from the web: lic_prem &lt;- read_csv(&quot;http://www.manchester.gov.uk/open/download/downloads/id/169/licensed_premises.csv&quot;) ## Warning: One or more parsing issues, call `problems()` on your data frame for ## details, e.g.: ## dat &lt;- vroom(...) ## problems(dat) ## Rows: 65535 Columns: 36 ## ── Column specification ───────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (23): EXTRACTDATE, ORGANISATIONURI, ORGANISATIONLABEL, CASEDATE, SERVICE... ## dbl (1): CASEREFERENCE ## lgl (12): LATENIGHTREFRESHMENT, ALCOHOLSUPPLY, OPENINGHOURS, LICENCEENDDATE,... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. You can always check if this worked by looking to your global environment on the right hand side and seeing if this ‘lic_prem’ object has appeared. If it has, you should see it has 65535 observations (rows), and 36 variables (columns). Let’s have a look at what this data set looks like. You can use the View() function for this: View(lic_prem) We can see there are some interesting and perhaps less interesting columns in there. There are quite a lot of venues in this list as well. Let’s think about subsetting them. Let’s say we’re interested in city centre manchester. We can see that there is a column for postcodes. We know (from our local domain knowledge) That city centre postcodes are M1-M4. So let’s start by subsetting the data to include these. 4.2.1 Activity 1: Subsetting using pattern matching We could use spatial operations here, and geocode all the postcodes at this point, then use a spatial file of city centre to select only the points contained in this area. The only reason we’re not doing this is because the geocode function takes a bit of time to geocode each address. It would only be about 10 - 15 minutes, but we don’t want to leave you sitting around in the lab for this long, so instead we will try to subset the data using pattern matching in text. In particular we will be using the grepl() function. This function takes a pattern and looks for it in some text. If it finds the pattern, it returns TRUE, and if it does not, it returns FALSE. So you have to pass two parameters to the grepl() function, one of them being the pattern that you want it to look for, and the other being the object in which to search. So for example, if we have an object that is some text, and we want to find if it contains the letter “a”, we would pass those inside the grepl() function, which would tell us TRUE (yes it’s there) or FALSE (no it’s not there): #example 1: some_text with &#39;a&#39; some_text &lt;- &quot;this is some text that has some letter &#39;a&#39;s&quot; grepl(&quot;a&quot;, some_text) ## [1] TRUE You can see this returns TRUE, because there is at least one occurrence of the letter a. If there wasn’t, we’d get FALSE: #example 2: some_text without &#39;a&#39; some_text &lt;- &quot;this is some text tht h_s some letter &#39;_&#39;s&quot; grepl(&quot;a&quot;, some_text) ## [1] FALSE 4.2.2 Activity 2: Pattern matching to find city centre premises So we can use grepl(), to select all the cases where we find the pattern “M1” in the postcode. NOTICE the space in our search pattern. It’s not “M1” it’s “M1 ”. Can you guess why? Well, M1 will be found in M1 but also in M13, which is the University of Manchester’s postcode, and not the part of city centre in which we are interested. So let’s subset our data by creating a new object city_centre_prems, and using the piping (%&gt;%) and filter() functions from the dplyr package: #create the city_centre_prems object: city_centre_prems &lt;- lic_prem %&gt;% filter(grepl(&quot;M1 &quot;, POSTCODE) ) Now we only have 353 observations (see your global environment), which is a much more manageable number. 4.3 Geocoding from an address So we have this list of licensed premises, and we have their address, which is clearly some sort of spatial information, but how would you put this on a map? Any ideas? We can, at the most basic, geocode the postcode. This will put all the establishments to the centroid of the postcode. Postcodes are used in the United Kingdom as alphanumeric codes, that were devised by Royal Mail. A full postcode is known as a “postcode unit” and designates an area with a number of addresses or a single major delivery point. You can search the Royal Mail for information on post codes here.. Here is a map of the postcode areas in Greater Manchester: The centroid of the post code area represents the central point of the polygons. For example, here you can see some polygons with their centroids illustrated by points in polygons. This is not quite as precise as geocoding the actual address, but let’s stick with this approach for now. So we need something that will help us get the coordinates for the relevant post code centroid. For this we can use the Open postcode geo from data.gov.uk. Open Postcode Geo is a postcode dataset and API optimised for geocoding applications. You can use Open Postcode Geo to geocode a dataset, geocode user input, and therefore build a proximity search. Data is derived from the Office for National Statistics postcode database and is free to use, subject to including attributions to ONS, OS (Ordinance Survey) and Royal Mail. Postcodes can be entered at area, district, sector, and unit level - see Postcode map for the geographical relationship between these. We can use the Application Programme Interface (API) to query postcodes and read them directly into R, attaching a latitude and a longitude to our dataframe. 4.3.1 Activity 3: Getting address from post code using an API What is an API? I once gave an hour long demo on using APIs, if you would like to watch you can see here: APIs demo. But essentially, the way we use it here, an API is a way for us to query data from the web using an url. In this case, we will use the Open Postcode Geo API (detailed above), and give it an address in the URL. Then, it will return to us the coordinates of that address. Try this in a browser. Open up chrome, or firefox, or whatever you use and type “http://api.getthedata.com/postcode/” plus your post code, but instead of the space add a plus sign. For example, the uni postcode is “M13 9PL”. So to query the coordinates for the university we use the url: “http://api.getthedata.com/postcode/M13+9PL” You should see a result like this: This is called a JSON file, you can see it has lots of info about this post code, for example it tells us the country is England, and it gives us a value for latitude and for longitude. It’s all very well seeing this in a browser, but how can we import this into R? Well we can use a function called fromJSON() from the rjson package, which reads in JSON files and turns them into the dataframes we know and love. Inside the fromJSON() we use the readlines() function to get the data from the URL. We save all this into a geocode_result object: geocode_result &lt;- fromJSON(readLines(&quot;http://api.getthedata.com/postcode/M13+9PL&quot;)) ## Warning in readLines(&quot;http://api.getthedata.com/postcode/M13+9PL&quot;): incomplete ## final line found on &#39;http://api.getthedata.com/postcode/M13+9PL&#39; We get a warning about an incomplete final line. For now ignore this, as it seems we get our data anyway. So what do we get? Well let’s see this geocode_result object: geocode_result ## $status ## [1] &quot;match&quot; ## ## $match_type ## [1] &quot;unit_postcode&quot; ## ## $input ## [1] &quot;M13 9PL&quot; ## ## $data ## $data$postcode ## [1] &quot;M13 9PL&quot; ## ## $data$status ## [1] &quot;live&quot; ## ## $data$usertype ## [1] &quot;large&quot; ## ## $data$easting ## [1] 384591 ## ## $data$northing ## [1] 396711 ## ## $data$positional_quality_indicator ## [1] 1 ## ## $data$country ## [1] &quot;England&quot; ## ## $data$latitude ## [1] &quot;53.466926&quot; ## ## $data$longitude ## [1] &quot;-2.233578&quot; ## ## $data$postcode_no_space ## [1] &quot;M139PL&quot; ## ## $data$postcode_fixed_width_seven ## [1] &quot;M13 9PL&quot; ## ## $data$postcode_fixed_width_eight ## [1] &quot;M13 9PL&quot; ## ## $data$postcode_area ## [1] &quot;M&quot; ## ## $data$postcode_district ## [1] &quot;M13&quot; ## ## $data$postcode_sector ## [1] &quot;M13 9&quot; ## ## $data$outcode ## [1] &quot;M13&quot; ## ## $data$incode ## [1] &quot;9PL&quot; ## ## ## $copyright ## [1] &quot;Contains OS data (c) Crown copyright and database right 2025&quot; ## [2] &quot;Contains Royal Mail data (c) Royal Mail copyright and database right 2025&quot; ## [3] &quot;Contains National Statistics data (c) Crown copyright and database right 2025&quot; It contains all the information we saw earlier in the browser. How nice! This is great for one postcode at a time, but remember what I said about being lazy, and automating. We want the computer to do the work for us. To do this, we need to set up our query (the url) in a way that lets us give many postcodes in, and get many results out. For that we can use the paste0() function and the gsub() function. paste0() can be used to paste together different bits of text, while gsub() substitutes certain characters (in this case spaces) for other characters (in this case +). So to get from M13 9PL to M13+9PL we use gsub(\" \", \"+\", \"M13 9PL\"), first saying what to replace, then what to replace it with, and finally in what object (or character string). So let’s say we assign our postcode to an object called “address”: address &lt;- &quot;M13 9PL&quot; We can then use this in the combination of paste0 and gsub to build the URL for our query: geocode_result &lt;- fromJSON(readLines(paste0(&quot;http://api.getthedata.com/postcode/&quot;,gsub(&quot; &quot;, &quot;+&quot;, address)))) ## Warning in readLines(paste0(&quot;http://api.getthedata.com/postcode/&quot;, gsub(&quot; &quot;, : ## incomplete final line found on &#39;http://api.getthedata.com/postcode/M13+9PL&#39; You can see we get the same result as above. And if we want only the coordinates we can call them: geocode_result$data$latitude ## [1] &quot;53.466926&quot; geocode_result$data$longitude ## [1] &quot;-2.233578&quot; So how can we apply this to a whole dataframe? Well here I build two functions geocode_addys_getlng() to get the longitudes and geocode_addys_getlat() to get the latitudes. You can unpick this code if you like, but if you want, you’re welcome to just run these to create the functions in your environment and use #function 1: longitudes geocode_getlng &lt;- function(x){ geocode_result &lt;- fromJSON(readLines(paste0(&quot;http://api.getthedata.com/postcode/&quot;,gsub(&quot; &quot;, &quot;+&quot;, x)))) if (!is.null(geocode_result$data$longitude)) {return(geocode_result$data$longitude)} else {return(NA)}} #function 2: latitudes geocode_getlat &lt;- function(x){ geocode_result &lt;- fromJSON(readLines(paste0(&quot;http://api.getthedata.com/postcode/&quot;,gsub(&quot; &quot;, &quot;+&quot;, x)))) if (!is.null(geocode_result$data$latitude)) {return(geocode_result$data$latitude)} else {return(NA)}} Now to apply these functions to the whole dataframe, we will use the mutate() function to create a new column for longitude and one for latitude, and for each one apply the relevant function with the map_chr function from the purr package. city_centre_prems &lt;- city_centre_prems %&gt;% mutate(longitude = map_chr(POSTCODE, geocode_getlng), latitude = map_chr(POSTCODE, geocode_getlat)) Be patient, this will take a while, each postcode has to be referenced against their database and the relevant coordinates extracted. For each point you will see a note appear in red, and while R is working you will see the red stop sign on the top right corner of the Console window. Also think about how incredibly fast and easy this actually is, if you consider a potential alternative where you have to manualy find some coordinates for each address. That sounds pretty awful, doesn’t it? Compared to that, setting the above functions running, and stepping away to make a cup of tea is really a pretty excellent alternative, no? Right so hopefully that is done now, and you can have a look at your data again to see what this new column looks like. Remember you can use the View() function to make your data appear in this screen. View(city_centre_prems) And now we have a column called longitude for longitude and a column called latitude for latitude. Neat! I know there was a lot in there, so don’t worry about asking lots of questions on this, but also don’t worry too much if you just run the functions and get the coordinates, as long as you know where the coords come from! 4.4 Making interactive maps with leaflet Thus far we have explored a few approaches to making maps. We made great use of the tmaps package for example in the past few weeks. But now, we are going to step up our game, and introduce Leaflet as one way to easily make some neat maps. It is the leading open-source JavaScript library for mobile-friendly interactive maps. It is very most popular, used by websites ranging from The New York Times and The Washington Post to GitHub and Flickr, as well as GIS specialists like OpenStreetMap, Mapbox, and CartoDB, some of who’s names you’ll recognise from the various basemaps we played with in previous labs. In this section of the lab we will learn how to make really flashy looking maps using leaflet. If you haven’t already, you will need to have installed and loaded the leaflet and RColorBrewer packages. 4.4.1 Activity 4: Making an interactive map You create a map with this simple bit of code: m &lt;- leaflet() %&gt;% addTiles() And just print it: m Not a super usseful map, definitely won’t win map of the week, but it was really easy to make! You might of course want to add some content to your map. 4.4.1.1 Adding points manually You can add a point manually: m &lt;- leaflet() %&gt;% addTiles() %&gt;% addMarkers(lng=-2.230899, lat=53.464987, popup=&quot;burglary&quot;) m Or many points manually, with some popup text as well: latitudes = c(53.464987, 53.472726, 53.466649) longitudes = c(-2.230899, -2.245481, -2.243421) popups = c(&quot;burglary&quot;, &quot;robbery&quot;, &quot;stop and search&quot;) df = data.frame(latitudes, longitudes, popups) map_practice &lt;- leaflet(data = df) %&gt;% addTiles() %&gt;% addMarkers(lng=~longitudes, lat=~latitudes, popup=~popups) map_practice 4.4.1.2 Adding data Last time around we added crime data to our map. In this case, we want to be mapping our licensed premises in the city centre, right? So let’s do this: city_centre_prems$latitude &lt;- as.numeric(city_centre_prems$latitude) city_centre_prems$longitude &lt;- as.numeric(city_centre_prems$longitude) mcr_map &lt;- leaflet(data = city_centre_prems) %&gt;% addTiles() %&gt;% addMarkers(~longitude, ~latitude, popup = ~paste(&quot;Longitude: &quot;, longitude, &quot;, Latitude: &quot;, latitude)) ## Warning in validateCoords(lng, lat, funcName): Data contains 4 rows with either ## missing or invalid lat/lon values and will be ignored mcr_map Should be looking familiar as well. Now let’s say you wanted to save this map. You can do this by clicking on the export button at the top of the plot viewer, and choose the Save as Webpage option saving this as a .html file: Then you can open this file with any type of web browser (safari, firefox, chrome) and share your map that way. You can send this to your friends not on this course, and make them jealous of your fancy map making skills. One thing you might have noticed is that we still have some points that are not in Manchester. This should illustrate that the pattern matching approach is really just a work-around. Instead, what we really should be doing to subset our data spatially is to use spatial operations. So now we’ll learn how to do some of these in the next section. 4.5 Spatial operations Spatial operations are a vital part of geocomputation. Spatial objects can be modified in a multitude of ways based on their location and shape. For a comprehensive overview of spatial operations in R I would recommend the relevant chatper Chapter 4: Spatial Operations from the project of Robin Lovelace and Jakub Nowosad, Geocomputation with R. Spatial operations differ from non-spatial operations in some ways. To illustrate the point, imagine you are researching road safety. Spatial joins can be used to find road speed limits related with administrative zones, even when no zone ID is provided. But this raises the question: should the road completely fall inside a zone for its values to be joined? Or is simply crossing or being within a certain distance sufficent? When posing such questions it becomes apparent that spatial operations differ substantially from attribute operations on data frames: the type of spatial relationship between objects must be considered.(Lovelace &amp; Nowosad, 2018) So you can see we can do exciting spatial operations with our spatial data, which we cannot with the non-spatial stuff. 4.5.1 Coordinate reference systems revisited One important note before we begin to do this brings us back to some of the learning from the second session on map projections and coordinate reference systems, like we discussed in the lecture today. We spoke about all the ways of flattening out the earth, and ways of making sense what that means for the maps, and also how to be able to point to specific locations within these. The latter refers to the Coordinate Reference System or CRS the most common ones we will use are WGS84 and British National Grid. So why are we talking about this? It is important to note that spatial operations that use two spatial objects rely on both objects having the same coordinate reference system If we are looking to carry out operations that involve two different spatial objects, they need to have the same CRS!!! Funky weird things happen when this condition is not met, so beware! So how do we know what CRS our spatial objects are? Well the sf package contains a handy function called st_crs() which let’s us check. All you need to pass into the brackets of this function is the name of the object you want to know the CRS of. So let’s check what is the CRS of our licenced premises: #For our spatial operations we will be using functions that belong to the `sf` package. So make sure you have this loaded up. st_crs(city_centre_prems) ## Coordinate Reference System: NA You can see that we get the CRS returned as NA. Can you think of why? Have we made this into a spatial object? Or is this merely a dataframe with a latitude and longitude column? The answer is really in the question here. So we need to convert this to a sf object, or a spatial object, and make sure that R knows that the latitude and the longitude columns are, in fact, coordinates. In the st_as_sf() function we specify what we are transforming (the name of our dataframe), the column names that have the coordinates in them (longitude and latitude), the CRS we are using (4326 is the code for WGS 84, which is the CRS that uses latitude and longitude coordinates (remember BNG uses Easting and Northing)), and finally agr, the attribute-geometry-relationship, specifies for each non-geometry attribute column how it relates to the geometry, and can have one of following values: “constant”, “aggregate”, “identity”. “constant” is used for attributes that are constant throughout the geometry (e.g. land use), “aggregate” where the attribute is an aggregate value over the geometry (e.g. population density or population count), “identity” when the attributes uniquely identifies the geometry of particular “thing”, such as a building ID or a city name. The default value, NA_agr_, implies we don’t know. cc_spatial &lt;- st_as_sf(city_centre_prems, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326, agr = &quot;constant&quot;, na.fail = FALSE) Now let’s check the CRS of this spatial version of our licensed premises: st_crs(cc_spatial) ## Coordinate Reference System: ## User input: EPSG:4326 ## wkt: ## GEOGCRS[&quot;WGS 84&quot;, ## ENSEMBLE[&quot;World Geodetic System 1984 ensemble&quot;, ## MEMBER[&quot;World Geodetic System 1984 (Transit)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G730)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G873)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1150)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1674)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1762)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G2139)&quot;], ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]], ## ENSEMBLEACCURACY[2.0]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## CS[ellipsoidal,2], ## AXIS[&quot;geodetic latitude (Lat)&quot;,north, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## AXIS[&quot;geodetic longitude (Lon)&quot;,east, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## USAGE[ ## SCOPE[&quot;Horizontal component of 3D system.&quot;], ## AREA[&quot;World.&quot;], ## BBOX[-90,-180,90,180]], ## ID[&quot;EPSG&quot;,4326]] We can now see that we have this coordinate system as WGS84. We need to then make sure that any other spatial object with which we want to perform spatial operations is also in the same CRS. 4.5.2 Meet a new format of shapefile: geojson GeoJSON is an open standard format designed for representing simple geographical features, along with their non-spatial attributes. It is based on JSON, the JavaScript Object Notation. It is a format for encoding a variety of geographic data structures. Geometries are shapes. All simple geometries in GeoJSON consist of a type and a collection of coordinates. The features include points (therefore addresses and locations), line strings (therefore streets, highways and boundaries), polygons (countries, provinces, tracts of land), and multi-part collections of these types. GeoJSON features need not represent entities of the physical world only; mobile routing and navigation apps, for example, might describe their service coverage using GeoJSON. To tinker with GeoJSON and see how it relates to geographical features, try geojson.io, a tool that shows code and visual representation in two panes. Let’s read in a geoJSON spatial file, again from the web. This particular geojson represents the wards of Greater Manchester. manchester_ward &lt;- st_read(&quot;https://raw.githubusercontent.com/eonk/cm_book/main/data/wards.geojson&quot;) ## Reading layer `wards&#39; from data source ## `https://raw.githubusercontent.com/eonk/cm_book/main/data/wards.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 215 features and 12 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 351664 ymin: 381168.6 xmax: 406087.5 ymax: 421039.8 ## Projected CRS: OSGB36 / British National Grid Let’s select only the city centre ward, using the filter() function from dplyr city_centre &lt;- manchester_ward %&gt;% filter(wd16nm == &quot;City Centre&quot;) Let’s see how this looks, using the plot() function: plot(st_geometry(city_centre)) Now we could use this to make sure that our points included in cc_spatial are in fact only licensed premises in the city centre. This will be your first spatial operation. Excited? Let’s do this! 4.5.3 Activity 5: Subset points to those within a polygon So we have our polygon, our spatial file of the city centre ward. We now want to subset our point data, the cc_spatial data, which has points representing licensed premises. First things first, we check whether they have the same crs. st_crs(city_centre) == st_crs(cc_spatial) ## [1] FALSE Uh oh! They do not! So what can we do? Well we already know that cc_spatial is in WGS 84, because we made it so a little bit earlier. What about this new city_centre polygon? st_crs(city_centre) ## Coordinate Reference System: ## User input: OSGB36 / British National Grid ## wkt: ## PROJCRS[&quot;OSGB36 / British National Grid&quot;, ## BASEGEOGCRS[&quot;OSGB36&quot;, ## DATUM[&quot;Ordnance Survey of Great Britain 1936&quot;, ## ELLIPSOID[&quot;Airy 1830&quot;,6377563.396,299.3249646, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4277]], ## CONVERSION[&quot;British National Grid&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,49, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,-2, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996012717, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,400000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,-100000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;Engineering survey, topographic mapping.&quot;], ## AREA[&quot;United Kingdom (UK) - offshore to boundary of UKCS within 49°45&#39;N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.&quot;], ## BBOX[49.75,-9,61.01,2.01]], ## ID[&quot;EPSG&quot;,27700]] Aha, the key is in the 27700. This code in fact stands for…. British National Grid…! So what can we do? We can transform our spatial object. Yepp, we can convert between CRS. So let’s do this now. To do this, we can use the st_transform() function. cc_WGS84 &lt;- st_transform(city_centre, 4326) Let’s check that it worked: st_crs(cc_WGS84) ## Coordinate Reference System: ## User input: EPSG:4326 ## wkt: ## GEOGCRS[&quot;WGS 84&quot;, ## ENSEMBLE[&quot;World Geodetic System 1984 ensemble&quot;, ## MEMBER[&quot;World Geodetic System 1984 (Transit)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G730)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G873)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1150)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1674)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1762)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G2139)&quot;], ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]], ## ENSEMBLEACCURACY[2.0]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## CS[ellipsoidal,2], ## AXIS[&quot;geodetic latitude (Lat)&quot;,north, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## AXIS[&quot;geodetic longitude (Lon)&quot;,east, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## USAGE[ ## SCOPE[&quot;Horizontal component of 3D system.&quot;], ## AREA[&quot;World.&quot;], ## BBOX[-90,-180,90,180]], ## ID[&quot;EPSG&quot;,4326]] Looking good. Triple double check: st_crs(cc_WGS84) == st_crs(cc_spatial) ## [1] TRUE YAY! Now we can move on to our spatial operation, where we select only those points within the city centre polygon. To do this, we can use the st_intersects() function: # intersection cc_intersects &lt;- st_intersects(cc_WGS84, cc_spatial) # subsetting cc_intersects &lt;- cc_spatial[unlist(cc_intersects),] have a look at this new cc_intersects object in your environment. How many observations does it have? Is this now fewer than the previous cc_spatial object? Why do you think this is? (hint: you’re removing everything that is outside the city centre polygon) We can plot this too to have a look: # plot plot(st_geometry(cc_WGS84), border=&quot;#aaaaaa&quot;) plot(st_geometry(cc_intersects), col = &quot;red&quot;, add=T) COOL, we have successfully performed our first spatial operation, we managed to subset our points data set to include only those points which are inside the polgon for city centre. See how this was much easier, and more reliable than the hacky workaround using pattern matching? Yay! 4.5.4 Activity 6: Building buffers Right, but what we want to do really to go back to our original question. We want to know about crime in and around out areas of interest, in this case our licensed premises. But how can we count this? Well first we will need crime data. Let’s use the same data set from last week. I’m not going over the detail of how to read this in, if you forgot, go back to the notes from last week. crimes &lt;- read_csv(&quot;https://raw.githubusercontent.com/eonk/cm_book/main/data/2019-06-greater-manchester-street.csv&quot;) ## Rows: 32058 Columns: 12 ## ── Column specification ───────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (9): Crime ID, Month, Reported by, Falls within, Location, LSOA code, LS... ## dbl (2): Longitude, Latitude ## lgl (1): Context ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Notice that in this case the columns are spelled with upper case “L”. You should always familiarise yourself with your data set to make sure you are using the relevant column names. You can see just the column names using the names() function like so : names(crimes) ## [1] &quot;Crime ID&quot; &quot;Month&quot; &quot;Reported by&quot; ## [4] &quot;Falls within&quot; &quot;Longitude&quot; &quot;Latitude&quot; ## [7] &quot;Location&quot; &quot;LSOA code&quot; &quot;LSOA name&quot; ## [10] &quot;Crime type&quot; &quot;Last outcome category&quot; &quot;Context&quot; Arg so messy! Let’s use our handy helpful clean_names() function from the janitor package: crimes &lt;- crimes %&gt;% clean_names() names(crimes) ## [1] &quot;crime_id&quot; &quot;month&quot; &quot;reported_by&quot; ## [4] &quot;falls_within&quot; &quot;longitude&quot; &quot;latitude&quot; ## [7] &quot;location&quot; &quot;lsoa_code&quot; &quot;lsoa_name&quot; ## [10] &quot;crime_type&quot; &quot;last_outcome_category&quot; &quot;context&quot; Or you can have a look at the first 6 lines of your dataframe with the head() function: head(crimes) ## # A tibble: 6 × 12 ## crime_id month reported_by falls_within longitude latitude location lsoa_code ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; 2019… Greater Ma… Greater Man… -2.46 53.6 On or n… E01004768 ## 2 aa1cc4cb… 2019… Greater Ma… Greater Man… -2.44 53.6 On or n… E01004768 ## 3 e513df63… 2019… Greater Ma… Greater Man… -2.44 53.6 On or n… E01004768 ## 4 6ed763df… 2019… Greater Ma… Greater Man… -2.44 53.6 On or n… E01004768 ## 5 780d55b8… 2019… Greater Ma… Greater Man… -2.45 53.6 On or n… E01004768 ## 6 753fa25f… 2019… Greater Ma… Greater Man… -2.44 53.6 On or n… E01004768 ## # ℹ 4 more variables: lsoa_name &lt;chr&gt;, crime_type &lt;chr&gt;, ## # last_outcome_category &lt;chr&gt;, context &lt;lgl&gt; Or you can view, with the View() function. Now, we have our points that are crimes, right? Well… How do we connect them to our points that are licensed premises? First things first, let’s make sure again that R is aware that this is a spatial set of points, and that the columns latitude and longitude are used to create a geometry. crimes_spatial &lt;- st_as_sf(crimes, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326, agr = &quot;constant&quot;) Next, we should find a way to link each crime to the licenced premise which we might count it against. One approach is to build a buffer around our licensed premises, and say that we will count all the crimes which fall within a specific radius of this licensed premise. What should this radius be? Well this is where your domain knowledge as criminologist comes in. How far away would you consdier a crime to still be related to this pub? 400 meters? 500 meters? 900 meters? 1 km? What do you think? This is again one of them it depends questions. Whatever buffer you choose you should justify, and make sure that you can defend when someone might ask about it, as the further your reach obviously the more crimes you will include, and these might alter your results. So, let’s say we are interested in all crimes that occur within 400 meters of each licensed premise. We chose 400m here as this is the recommended distance for accessible bus stop guidance, so basically as far as people should walk to get to a bus stop (TfL, 2008). So in this case, we want to take our points, which represent the licensed premises, and build buffers of 400 meters around them. You can do with the st_buffer() function: prem_buffer &lt;- st_buffer(cc_intersects, 1) You should get a warning here. This message indicates that sf assumes a distance value is given in degrees. This is because we have lat/long data (WSG 48) One quick fix to avoid this message, is to convert to BNG: prem_BNG &lt;- st_transform(cc_intersects, 27700) Now we can try again, with meters prem_buffer &lt;- st_buffer(prem_BNG, 400) Let’s see how that looks: plot(st_geometry(prem_buffer)) plot(st_geometry(prem_BNG), add = T) That should look nice and squiggly. But also it looks like there is quite a lot of overlap here. Should we maybe consider smaller buffers? Let’s look at 100 meter buffers: prem_buffer_100 &lt;- st_buffer(prem_BNG, 100) plot(st_geometry(prem_buffer_100)) plot(st_geometry(prem_BNG), add = T) Still quite a bit of overlap, but this is possibly down to all the licensed premises being very densely close together in the city centre. Well now let’s have a look at our crimes. I think it might make sense (again using domain knowledge) to restrict the analysis to violent crime. So let’s do this: violent_spatial &lt;- crimes_spatial %&gt;% filter(crime_type==&quot;Violence and sexual offences&quot;) Now, remember the CRS is WGS 48 here, so we will need to convert our buffer layer back to this: buffer_WGS84 &lt;- st_transform(prem_buffer_100, 4326) Now let’s just have a look: plot(st_geometry(buffer_WGS84)) plot(st_geometry(violent_spatial), col = &#39;red&#39;, add = T) OKAY, so some crimes fall inside some buffers, others not so much. Well, let’s get to our last spatial operation of the day, the famous points in polygon, to get to answering which licensed premises have the most violent crimes near them. 4.5.5 Activity 7: Counting Points in Polygon When you have a polygon layer and a point layer - and want to know how many or which of the points fall within the bounds of each polygon, you can use this method of analysis. In computational geometry, the point-in-polygon (PIP) problem asks whether a given point in the plane lies inside, outside, or on the boundary of a polygon. As you can see, this is quite relevant to our problem, wanting to count how many crimes (points) fall within 100 meters of our licensed premises (our buffer polygons). crimes_per_prem &lt;- violent_spatial %&gt;% st_join(buffer_WGS84, ., left = FALSE) %&gt;% count(PREMISESNAME) You now have a new dataframe, crimes_per_prem which has a column for the name of the premises, a column for the number of violend crimes that fall within the buffer, and a column for the geometry. Take a moment to look at this table. Use the View() function. Which premises have the most violent crimes? Are you surprised? Now as a final step, let’s plot this, going back to leaflet. We can shade by the number of crimes within the buffer, and include a little popup label with the name of the establishment: pal &lt;- colorBin(&quot;RdPu&quot;, domain = crimes_per_prem$n, bins = 5, pretty = TRUE) leaflet(crimes_per_prem) %&gt;% addTiles() %&gt;% addPolygons(fillColor = ~pal(n), fillOpacity = 0.8, weight = 1, opacity = 1, color = &quot;black&quot;, label = ~as.character(PREMISESNAME)) %&gt;% addLegend(pal = pal, values = ~n, opacity = 0.7, title = &#39;Violent crimes&#39;, position = &quot;bottomleft&quot;) It’s not the neatest of maps, with all these overlaps, but we can talk about prettifying maps another day. You’ve done enough today.”m1 "],["more-on-thematic-maps.html", "Chapter 5 More on thematic maps 5.1 Pro-tip: do I need to install this package? 5.2 Smoothing rates: adjusting for small sample noise 5.3 Binning points 5.4 A note of caution: MAUP 5.5 Transforming polygons 5.6 References and further reading", " Chapter 5 More on thematic maps In this session we are going to discuss some additional features around thematic maps we did not cover in week 3. We are going to discuss how to address some of the problems we confront when we are trying to use use choropleth maps, as well as some alternatives to point based maps. We will also introduce the modifiable area unit problem. Before we do any of this, we need to load the libraries we will use today: cartogram DCluster dplyr geogrid ggplot2 ggspatial hexbin janitor sf sp spdep tmap readxl readr Some of the above are new packages we will use for the first time this week. Remember, if you don’t already have these you will need to install them. 5.1 Pro-tip: do I need to install this package? You might have noticed that in your list of available packages you might see more than you remember downloading. The idea of dependencies has come up throughout the semester. Packages have dependencies when their code is dependent on (uses code from) another package. For example, if we write some code that we think will be useful, so we release this in the form of the package “manchesterR”, but we use ggplot2 in the code, then ggplot2 will be a dependency of manchesterR. As a default, R will install all the dependencies for a package when we install our package, manchesterR. So this way we might end up with some packages there that we didn’t realise we had. Why are we telling you this? Well you should always check if you have a package, before installing it. And I wanted to share with you some neat code from a Stackoverflow discussion (if you are not yet familiar with Stackoverflow you have not been Google-ing your error messages enough) here to do this. We’ll comment it a bit, so you can follow along what it does but you don’t have to if you don’t want to. This is just an extra. So as a first step, you have to assign a list of all the packages you have to check to an object. Let’s say I tell you that today we will be using the following packaes: “sp”, “rgdal”, “classInt”, “RColorBrewer”, “ggplot2”, “hexbin”, “ggmap”, “XML”, and “dplyr”. Then you can add these to an object called libs, using the c() function: libs &lt;- c(&quot;sf&quot;, &quot;tmap&quot;, &quot;sp&quot;, &quot;spdep&quot;, &quot;DCluster&quot;, &quot;cartogram&quot;) Now you can run the below bit of code, and you will see in the console an output of what is and isn’t installed, as well as install the packages that are not! for (x in libs) { # Check if the package is installed if (!(x %in% rownames(installed.packages()))) { # If not installed, print a message and install the package cat(&quot;Installing &quot;, x, &quot;...\\n&quot;) install.packages(x) } else { # If installed, print a message cat(x, &quot;is already installed.\\n&quot;) } # Load the package library(x, character.only = TRUE) } ## sf is already installed. ## tmap is already installed. ## sp is already installed. ## spdep is already installed. ## DCluster is already installed. ## cartogram is already installed. As you can see if you read through the comments there, this bit of code checks each package in the list you pass to tbe libs object when you create it, and if it is not installed it installs for you, and if it is, it just loads it for you. It can be a handy bit of code to keep around. We also want to introduce pacmac, developed by Dason Kurkiewicz, to make your life a lot easier in the realm of R packages. While the library() function does its job, but could be the tedious task, installing and loading each package one by one. The p_load() function, a single line code will automatically checks for missing missing packages and installs/loads all libraries into you R. So, try! library(pacman) p_load(cartogram, DCluster, dplyr, geogrid, ggplot2, ggspatial, hexbin, janitor, sf, sp, spdep, tmap, readxl, readr) 5.2 Smoothing rates: adjusting for small sample noise In week 3 we discussed how to map rates. It seems a fairly straightforward issue: you calculate a rate by dividing your numerator (e.g., number of crimes) by an appropriately selected denominator (e.g., daytime population). You get your variable with the relevant rate and you map it using a choropleth map. However, things are not always that simple. Rates are funny animals. Gelman and Price (1999) go so far as to suggest that all maps of rates are misleading. The problem at hand is well known in spatial epidemiology: “plotting observed rates can have serious drawbacks when sample sizes vary by area, since very high (and low) observed rates are found disproportionately in poorly-sampled areas” (Gelman and Price 1999, 3221). There is associated noise for those areas where the denominators give us a small sample size. And it is hard to solve this problem. Let’s illustrate with an example. We are going to use historic data on homicide across US counties. The dataset was used as the basis for the study by Baller et al. (2001). It contains data on homicide counts and rates for various decades across the US, as well as information on structural factors often thought to be associated with violence. The data is freely available through the webpage of Geoda, a clever point-and-click interface developed by Luc Anselin (a spatial econometrician and coauthor of the above paper) and his team, to make spatial analysis accessible. It is also available as one of the datasets in the geodaData package. To read data available in a library we have loaded, we can use the data() function. If we check the class() of this object, we will see it was already stored in geodaData as a sf object. data(&quot;ncovr&quot;) class(ncovr) ## [1] &quot;sf&quot; &quot;data.frame&quot; Let’s look at the “ncvor” data. We can start by looking at the homicide rate for 1960. summary(ncovr$HR60) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 2.783 4.504 6.885 92.937 We can see that the county with the highest homicide rate in the 1960s had a rate of 92.936803 homicides per 100,000 individuals. That is very high. Just to put it into context in the UK the homicide rate is about 0.92 per 100,000 individuals. Where is that place? I can tell you it is a place called Borden. Check it out: borden &lt;- filter(ncovr, NAME == &quot;Borden&quot;) ## old-style crs object detected; please recreate object with a recent sf::st_crs() borden$HR60 ## [1] 92.9368 Borden county is in Texas. You may be thinking “Texas Chainsaw Massacre” perhaps? No, not really. Ed Gein, who inspired the film, was based and operated in Wisconsin. Borden’s claim to fame is rather more prosaic: it was named after Gail Borden, the inventor of condensed milk. So, what’s going on here? Why do we have a homicide rate in Borden that makes it look like a war zone? Is it that it is only one of the six counties where alcohol is banned in Texas? To get to the bottom of this, we can look at the variable HC60 which tells us about the homicide count in Borden: borden$HC60 ## [1] 1 What? A total homicide count of 1. How can a county with just one homicide have a rate that makes it look like the most dangerous place in the US? To answer this, let’s look at the population of Borden county in the 1960s, contained in the PO60 variable. borden$PO60 ## [1] 1076 Well, there were about 1076 people living there. It is among some of the least populous counties in our data: summary(ncovr$PO60) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 208 9417 18408 57845 39165 7781984 If you contrast that population count with the population of the average county in the US, that’s tiny. One homicide in such a small place can end up producing a big rate. Remember that the rate is simply dividing the number of relevant events by the exposure variable (in this case, population) and multiplying by a constant (in this case, 100,000 since we expressed crime rates in those terms). Most times Borden looks like a very peaceful place: borden$HR70 ## [1] 0 borden$HR80 ## [1] 0 borden$HR90 ## [1] 0 It has a homicide rate of 0 in most decades. But it only takes one homicide and, bang, it goes top of the league. So a standard map of rates is bound to be noisy. There is the instability that is introduced by virtue of having areas that may be sparsely populated and in which one single event, like in this case, will produce a very noticeable change in the rate. In fact, if you look at the counties with the highest homicide rate in the “ncovr” dataset, you will notice all of them are places like Borden, areas that are sparsely populated, not because they are that dangerous, but because of the instability of rates. Conversely, the same happens with those places with the lowest rate. They tend to be areas with a very small sample size. This is a problem that was first noted by epidemiologists doing disease mapping. But a number of other disciplines have now noted this and used some of the approaches developed by public health researchers that confronted this problem when producing maps of disease (aside: techniques and approaches used by spatial epidemiologists are very similar to those used by criminologists, in case you ever think of changing careers or need inspiration for how to solve a crime analysis problem). One way of dealing with this is by smoothing or shrinking the rates. This basically, as the word implies, aims for a smoother representation that avoids hard spikes associated with random noise. There are different ways of doing that. Some ways use a non-spatial approach to smoothing, using something called a empirical Bayesian smoother. How does this work? This approach takes the raw rates and tries to “shrink” them towards the overall average. What does this mean? Essentially, we compute a weighted average between the raw rate for each area and the global average across all areas, with weights proportional to the underlying population at risk. What this procedure does is adjusting considerably (brought closer to the global average) the rates of smaller areas (those with a small population at risk), whereas the rates for the larger areas will barely change. Here we are going to introduce the approach implemented in DCluster, a package developed for epidemiological research and detection of clusters of disease. Specifically, we can implement the empbaysmooth() function which creates a smooth relative risks from a set of expected and observed number of cases using a Poisson-Gamma model as proposed by Clayton and Kaldor (1987). The function empbaysmooth() expects two parameters, the expected value and the observed value. Let’s define them first. #First we define the observed number of cases ncovr$observed &lt;- ncovr$HC60 #To compute the expected number of cases through indirect standardisation #we need the overall incidence ratio overall_incidence_ratio &lt;- sum(ncovr$HC60)/sum(ncovr$PO60) #The expected number of cases can then be obtained by multiplying the overall #incidence rate by the population ncovr$expected &lt;- ncovr$PO60 * overall_incidence_ratio With this parameters we can obtain the raw relative risk: ncovr$raw_risk &lt;- ncovr$observed / ncovr$expected summary(ncovr$raw_risk) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.6143 0.9940 1.5195 20.5105 And then estimate the smoothed relative risk: res &lt;- empbaysmooth(ncovr$observed, ncovr$expected) In the new object we generated, which is a list, you have an element which contains the computed rates. We can add those to our dataset: ncovr$H60EBS &lt;- res$smthrr summary(ncovr$H60EBS) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.2336 0.8699 0.9365 0.9675 1.0347 2.7869 We can observe that the dispersion narrows significantly and that there are fewer observations with extreme values once we use this smoother. Instead of shrinking to the global relative risk, we can shrink to a relative rate based on the neighbours of each county. Shrinking to the global risk ignores the spatial dimension of the phenomenon being mapped out and may mask existing heterogeneity. If instead of shrinking to a global risk, we shrink to a local rate, we may be able to take unobserved heterogeneity into account. Marshall (1991) proposed a local smoother estimator in which the crude rate is shrunk towards a local, “neighbourhood”, rate. To compute this, we need the list of neighbours that surround each county (we will discuss this code in Chapter 11, so for now just trust we are computing the rate of the areas that surround each country): ncovr_sp &lt;- as(ncovr, &quot;Spatial&quot;) w_nb &lt;- poly2nb(ncovr_sp, row.names=ncovr_sp$FIPSNO) eb2 &lt;- EBlocal(ncovr$HC60, ncovr$PO60, w_nb) ncovr$HR60EBSL &lt;- eb2$est * 100000 We can now plot the maps and compare them: tmap_mode(&quot;plot&quot;) current_style &lt;- tmap_style(&quot;col_blind&quot;) map1&lt;- tm_shape(ncovr) + tm_fill(&quot;HR60&quot;, style=&quot;quantile&quot;, title = &quot;Raw rate&quot;, palette = &quot;Reds&quot;) + tm_layout(legend.position = c(&quot;left&quot;, &quot;bottom&quot;), legend.title.size = 0.8, legend.text.size = 0.5) map2&lt;- tm_shape(ncovr) + tm_fill(&quot;HR60EBSL&quot;, style=&quot;quantile&quot;, title = &quot;Local Smooth&quot;, palette = &quot;Reds&quot;) + tm_layout(legend.position = c(&quot;left&quot;, &quot;bottom&quot;), legend.title.size = 0.8, legend.text.size = 0.5) tmap_arrange(map1, map2) Figure 5.1: Compare raw and smoothed rates across counties in the USA Notice that the quantiles are not the same, so that will make your comparison difficult. Let’s look at a boxplot of these variables. In the map of raw rates, we have the most variation. #Boxplots with base R graphics boxplot(ncovr$HR60, ncovr$HR60EBSL, main = &quot;Homicide per 100,000 people&quot;, names = c(&quot;Raw rate&quot;, &quot;Local base smoother&quot;), ylab = &quot;Rates&quot;) Figure 5.2: Boxplots to compare variation in rates The range for the raw rates is nearly 93. Much of the variation in observed homicide rates by county is attributable to statistical noise due to the small number of (observed and expected) homicides in low-population counties. Because of this noise, a disproportionate fraction of low-population counties are observed to have extremely high (or low) homicide rates when compared to typical counties in the United States. With smoothing, we reduce this problem, and if you contrast the maps you will see how this results in a clearer and smoother spatial pattern for the rate that is estimated borrowing information from their neighbours. So to smooth or not too smooth? Clearly we can see how smoothing stabilises the rates and removes noise. But as Gelman and Price (1999) suggests this introduces other artifacts and autocorrelation into our estimates. Some people are also not too keen on maps of statistically adjusted estimates. Yet, the conclusions one can derive from mapping raw rates (when the denominator varies significantly and we have areas with small sample size) means that smoothing is often a preferable alternative (Waller and Gotway 2004). The problem we have with maps of estimates is that we need information about the variability and it is hard to map this out in a convenient way (Gelman and Price 1999). Lawson (2021), in relation to the similar problem of disease mapping, suggests that “at the minimum any map of relative risk for a disease should be accompanied with information pertaining to estimates of rates within each region as well as estimates of variability within each region” (p. 38), whereas “at the other extreme it could be recommended that such maps be only used as a presentational aid, and not as a fundamental decision-making tool” (p. 38). 5.3 Binning points We’re going to move away from area-level data now, and go back to point-level data. In GIS it is often difficult to present point-based data because in many instances there are several different points and data symbologies that need to be shown. As the number of different data points grows they can become complicated to interpret and manage which can result in convoluted and sometimes inaccurate maps. This becomes an even larger problem in web maps that are able to be depicted at different scales because smaller scale maps need to show more area and more data. This makes the maps convoluted if multiple data points are included. In many maps there are so many data points included that little can be interpreted from them. In order to reduce congestion on maps many GIS users and cartographers have turned to a process known as binning. Binning is defined as the process of grouping pairs of locations based on their distance from one another. These points can then be grouped as categories to make less complex and more meaningful maps. Researchers and practitioners often require a way to systematically divide a region into equal-sized portions. As well as making maps with many points easier to read, binning data into regions can help identify spatial influence of neighbourhoods, and can be an essential step in developing systematic sampling designs. This approach to binning generates an array of repeating shapes over a user-specified area. These shapes can be hexagons, squares, rectangles, triangles, circles or points, and they can be generated with any directional orientation. 5.3.1 The Binning Process Binning is a data modification technique that changes the way data is shown at small scales. It is done in the pre-processing stage of data analysis to convert the original data values into a range of small intervals, known as a bin. These bins are then replaced by a value that is representative of the interval to reduce the number of data points. Spatial binning (also called spatial discretization) discretizes the location values into a small number of groups associated with geographical areas or shapes. The assignment of a location to a group can be done by any of the following methods: - Using the coordinates of the point to identify which “bin” it belongs to. - Using a common variable in the attribute table of the bin and the point layers. 5.3.2 Different Binning Techniques Binning itself is a general term used to describe the grouping of a dataset’s values into smaller groups (Johnson, 2011). The bins can be based on a variety of factors and attributes such as spatial and temporal and can thus be used for many different projects. 5.3.2.1 Choropleth maps You might be thinking, “grouping points into a larger spatial unit, haven’t we already done this when making choropleth maps?”. In a way you are right. Choropleth maps are another type of map to that uses binning. Proportional symbol and choropleth maps group similar data points together to show a range of data instead of many individual points. We’ve covered this extensively, and is generally the best approch to consider spatial grouping of your point variables, because the polygons (shapes) to which you are aggregating your points are meaningful. You can group into LSOAs because you want to show variation in neighbourhoods. Or you can group into police force areas because you want to look at differences between those units of analysis. But sometimes there is just not a geography present to meet your needs. Let’s say you are conducting some days of action in Manchester city centre, focusing on antisocial behaviour. You are going to put up some information booths and staff them with officers to engage with the local population about antisocial behaviour. For these to be most effective, as an analyst you decide that they should go into the areas with the highest count of antisocial beaviour. You want to be very specific about where you put these as well, and so LSOA level would be too broad, you want to zoom in more. One approach can be to split central Manchester into some smaller polygons, and just calculate the number of antisocial behaviour incidents recorded in each. That way you can then decide to put your information booths somewhere inside the top 5 highest count bins. 5.3.2.2 Rectangular binning The aggregation of incident point data to regularly shaped grids is used for many reasons such as normalizing geography for mapping or to mitigate the issues of using irregularly shaped polygons created arbitrarily (such as county boundaries or block groups that have been created from a political process). Regularly shaped grids can only be comprised of equilateral triangles, squares, or hexagons, as these three polygon shapes are the only three that can tessellate (repeating the same shape over and over again, edge to edge, to cover an area without gaps or overlaps) to create an evenly spaced grid. Rectangular binning is the simplest binning method and as such it heavily used. However, there are some reasons why rectangular bins are less preferable over hexagonal bins. Before we cover this, let’s have a look at hexagonal bins. 5.3.2.3 Hexagonal binning In many applications binning is done using a technique called hexagonal binning. This technique uses hexagon shapes to create a grid of points and develops a spatial histogram that shows different data points as a range or group of pairs with common distances and directions. In hexagonal binning the number of points falling within a particular rectangular or hexagon in a gridded surface is what makes the different colors to easily visualize data (Smith, 2012). Hexagonnal binning was first developed in 1987 and today “hexbinning” is conducted by laying a hexagonal grid on top of 2-dimensional data (Johnson, 2011). Once this is done users can conduct data point counts to determine the number of points for each hexagon (Johnson, 2011). The bins are then symbolized differently to show meaningful patterns in the data. 5.3.3 Activity 7: Hexbinning So how can we use hexbinning to solve our antisocial behaviour days of action task? Well let’s say we split Manchester city centre into hexagons, and count the number of antisocial behaviour instances in these. We can then identify the top hexagons, and locate our booths somewhere within these. Also let’s get some data. You could go and get this data yourself from police.uk, we’ve been through all the steps for downloading data from there a few times now. But for now, I have a tidied set of data ready for you. This data is one year’s worth of antisocial behaviour from the police.uk data, from May 2016 to May 2017, for the borough of Manchester. We can take our GMP crimes data, and select only the cases from ASB using the crime.type variable. If you want, however, I have already done this, so you can also download from my dropbox using the link here, (or get it from Blackboard): mcr_asb &lt;- read_csv(&quot;https://www.dropbox.com/s/93a0ovgcxz6pgiz/manchester_asb.csv?dl=1&quot;) ## New names: ## Rows: 32162 Columns: 15 ## ── Column specification ## ───────────────────────────────────────────── Delimiter: &quot;,&quot; chr ## (8): Month, Reported.by, Falls.within, Location, LSOA.code, ## LSOA.name, C... dbl (4): ...1, X, Longitude, Latitude lgl (3): ## Crime.ID, Last.outcome.category, Context ## ℹ Use `spec()` to retrieve the full column specification for this ## data. ℹ Specify the column types or set `show_col_types = FALSE` to ## quiet this message. ## • `` -&gt; `...1` This is currently just a text dataframe, so we need to let R know that actually this is a spatial object, who’s geometry can be find in its longitude and latitude coordinates. As we have long/lat we can assure it’s in WGS 84 projection. sf_mcr_asb &lt;- st_as_sf(mcr_asb, coords = c(&quot;Longitude&quot;, &quot;Latitude&quot;), crs = 4326, agr = &quot;constant&quot;) Now one thing that this does is it consumes our lng and lat columns into a geometry attribute. This is generally OK, but for the binning we will do, we would like to have them as separate coordinates. We can do this by adding the argument remove = FALSE to our st_as_sf function. We will also rename these coordinate columns to be lng and lat. #extract the coords to some columns, &quot;lng&quot; and &quot;lat&quot; sf_mcr_asb&lt;- st_as_sf(mcr_asb, coords = c(&quot;Longitude&quot;, &quot;Latitude&quot;), crs = 4326, agr = &quot;constant&quot;, remove = FALSE) %&gt;% rename(lng = Longitude, lat = Latitude) As a first step, we can plot asb in the borough of Manchester using simple ggplot! Remember the data visualisation session from weeks ago? We discussed how ggplot is such a great tool for building visualisations, because you can apply whatever geometry best suits your data. So for us to just have a look at the hexbinned version of our point data of antisocial behaviour, we can use the stat_binhex() function. We can also recreate the thematic map element, as we can use the frequency of points in each hex to shade each hexbin from white (least number of incidents) to red (most nuber of incidents). So let’s have a go: ggplot(sf_mcr_asb, aes(lng, lat)) + #define data and variables for x and y axes stat_binhex() + #add binhex layer (hexbin) scale_fill_gradientn(colours = c(&quot;white&quot;,&quot;red&quot;), name = &quot;Frequency&quot;) #add shading based on number of ASB incidents Neat, but doesn’t quite tell us where that really dark hexbon actually is. So it would be much better if we could do this with a basemap as the background, rather than our grey ggplot theme. Now, we can apply the same code as we used above, for the ggplot, to this ggmap, to add our hexbins on top of this basemap: ggplot(sf_mcr_asb, aes(x = lng, y = lat)) + annotation_map_tile() + stat_binhex(alpha=0.7) + #add binhex layer (hexbin) scale_fill_gradientn(colours = c(&quot;white&quot;,&quot;red&quot;), name = &quot;Frequency&quot;) #add shading based on number of ASB incidents ## Zoom: 10 Now this should give you some more context! Woo! So I mentioned we’d go over some reasons why you should consider aggregating into a hexagon grid rather than other shape: Hexagons reduce sampling bias due to edge effects of the grid shape. The edge effects of bounded space refers to the problem of truncated data that can skew the results of subsequent analyses (we’ll get to this in the next section). This is related to the low perimeter-to-area ratio of the shape of the hexagon. A circle has the lowest ratio but cannot tessellate to form a continuous grid. Hexagons are the most circular-shaped polygon that can tessellate to form an evenly spaced grid. This circularity of a hexagon grid allows it to represent curves in the patterns of your data more naturally than square grids. When comparing polygons with equal areas, the more similar to a circle the polygon is, the closer to the centroid the points near the border are (especially points near the vertices). This means that any point inside a hexagon is closer to the centroid of the hexagon than any given point in an equal-area square or triangle would be (this is due to the more acute angles of the square and triangle versus the hexagon). Hexagons are preferable when your analysis includes aspects of connectivity or movement paths. Due to the linear nature of rectangles, fishnet grids can draw our eyes to the straight, unbroken, parallel lines which may inhibit the underlying patterns in the data. Hexagons tend to break up the lines and allow any curvature of the patterns in the data to be seen more clearly and easily. This breakup of artificial linear patterns also diminishes any orientation bias that can be perceived in fishnet grids. If you are working over a large area, a hexagon grid will suffer less distortion due to the curvature of the earth than the shape of a fishnet grid. Finding neighbors is more straightforward with a hexagon grid. Since the edge or length of contact is the same on each side, the centroid of each neighbor is equidistant. However, with a fishnet grid, the Queen’s Case (above/below/right/left) neighbor’s centroids are N units away, while the centroids of the diagonal (Rook) neighbors are farther away (exactly the square root of 2 times N units away). Since the distance between centroids is the same in all six directions with hexagons, if you are using a distance band to find neighbors or are using the Optimized Hot Spot Analysis, Optimized Outlier Analysis or Create Space Time Cube By Aggregating Points tools, you will have more neighbors included in the calculations for each feature if you are using hexagonal grid as opposed to a fishnet grid. 5.3.4 Activity 8: Rectangular binning Now, to again illustrate the differences of different approaches, let’s see what this map would look like with: rectangular binning: ggplot(sf_mcr_asb, aes(x = lng, y = lat)) + annotation_map_tile() + stat_bin2d(alpha=0.7) + scale_fill_gradientn(colours = c(&quot;white&quot;,&quot;red&quot;), name = &quot;Frequency&quot;) ## Zoom: 10 hexagonal binning: ggplot(sf_mcr_asb, aes(x = lng, y = lat)) + annotation_map_tile() + stat_binhex(alpha=0.7) + scale_fill_gradientn(colours = c(&quot;white&quot;,&quot;red&quot;), name = &quot;Frequency&quot;) ## Zoom: 10 a simple “heatmap” (we will discuss these more thoroughly next week): ggplot(sf_mcr_asb, aes(x = lng, y = lat)) + annotation_map_tile() + stat_density2d(aes(fill = ..level.., # value corresponding to discretized density estimates alpha = ..level..), geom = &quot;polygon&quot;) + # creates the bands of differenc colors ## Configure the colors, transparency and panel scale_fill_gradientn(colours = c(&quot;white&quot;,&quot;red&quot;), name = &quot;Frequency&quot;) ## Warning: The dot-dot notation (`..level..`) was deprecated in ggplot2 3.4.0. ## ℹ Please use `after_stat(level)` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this ## warning was generated. ## Zoom: 11 Look at the difference between the three maps (hex, rectangle, and density). How would your conclusions change if you were given these maps? Would you make different decisions about where to place your booths for the days of action? Why or why not? Discuss. 5.3.5 Multivariate binning Multivariate binning is another binning method that lets you visualise slightly more complex data. In this method there can be many different variables consisting of different types of data. Like other binning methods the data is typically grouped with the sum or average of the data. Different types of symbology (such as size, shape and color) can also be used to represent this data as well. We won’t be covering this here but just so you can have a look at some examples here. 5.3.6 Benefits of Binning Because of the plethora of data types available and the wide variety of projects being done in GIS, binning is a popular method for mapping complex data and making it meaningful. Binning is a good option for map makers as well as users because it makes data easy to understand and it can be both static and interactive on many different map scales. If every different point were shown on a map it would have to be a very large scale map to ensure that the data points did not overlap and were easily understood by people using the maps. According to Kenneth Field, an Esri Research Cartographer, “Data binning is a great alternative for mapping large point-based data sets which allows us to tell a better story without interpolation. Binning is a way of converting point-based data into a regular grid of polygons so that each polygon represents the aggregation of points that fall within it.” By using binning to create categories of data maps are easier to understand, more accurate and more visually appealing. Hexbin plots can be viewed as an alternative to scatter plots. The hexagon-shaped bins were introduced to plot densely packed sunflower plots. They can be used to plot scatter plots with high-density data. 5.4 A note of caution: MAUP Now that we’ve shown you how to do a lot of spatial crime analysis, we wanted to close with some words of caution. Remember that everything you’ve learned here are just tools that you will be applying to data you are working with, but it’s up to you, the researcher, the analyst, the domain expert, to apply and use these with careful consideration and cautions. This discussion is very much part of spatial crime analysis, and an important field of thought. I borrow here from George Renghert and Brian Lockwood: When spatial analysis of crime is conducted, the analyst should not ignore the spatial units that data are aggregated into and the impact of this choice on the interpretation of findings. Just as several independent variables are considered to determine whether they have statistical significance, a consideration of multiple spatial units of analysis should be made as well, in order to determine whether the choice of aggregation level used in a spatial analysis can result in biased findings. In particular, they highlight four main issues inherent in most studies of space: issues associated with politically bounded units of aggregation, edge effects of bounded space the modifiable aerial unit problem (MAUP) and ways in which the results of statistical analyses can be manipulated by changes in the level of aggregation. In this lab we will focus on MAUP, but if you are interested in this kind of work, you should definitely read their paper to consider the other issues as well. There are techniques that can be used to alleviate each of the methodological difficulties, and they are described in accessible detail in their paper: Rengert, George F., and Brian Lockwood. “Geographical units of analysis and the analysis of crime.” Putting crime in its place. Springer, New York, NY, 2009. 109-122. 5.4.1 What is MAUP? The Modifiable Areal Unit Problem (MAUP) is an important issue for those who conduct spatial analysis using units of analysis at aggregations higher than incident level. It is one of the better-known problems in geography and spatial analysis. This phenomenon illustrates both the need for considering space in one’s analysis, and the fundamental uncertainties that accompany real-world analysis. The MAUP is “a problem arising from the imposition of artificial units of spatial reporting on continuous geographical phenomena, leading to artifacts or errors are created when one groups data into units for analysis. The classic text on MAUP is the 1983 paper Openshaw, Stan. “The modifiable areal unit problem. CATMOG (Concepts and techniques in modern geography) 38.” Geo Abstracts, Norwich. 1984.. There are two distinct types of MAUP: Scale (i.e. determining the appropriate size of units for aggregation) and zone (i.e. drawing boundaries or grouping). 5.4.1.1 Scale The scale problem involves results that change based on data that are analyzed at higher or lower levels of aggregation (Changing the number of units). For example, evaluating data at the state level vs. Census tract level. The scale problem has moved to the forefront of geographical criminology as a result of the recent interest in small-scale geographical units of analysis. It has been suggested that smaller is better since small areas can be directly perceived by individuals and are likely to be more homogenous than larger areas. - Gerell, Manne. “Smallest is better? The spatial distribution of arson and the modifiable areal unit problem.” Journal of quantitative criminology 33.2 (2017): 293-318. 5.4.1.2 Zone The zonal problem involves keeping the same scale of research (say, at the state level) but changing the actual shape and size of those areas. The basic issue with the MAUP is that aggregate units of analysis are often arbitrarily produced by whom ever is in charge of creating the aggregate units. A classic example of this problem is known as Gerrymandering. Gerrymandering involves shaping and re-shaping voting districts based on the political affiliations of the resident citizenry. The inherent problem with the MAUP and with situations such as Gerrymandering is that units of analysis are not based on geographic principles, and instead are based on political and social biases. For researchers and practitioners the MAUP has very important implications for research findings because it is possible that as arbitrarily defined units of analysis change shape findings based on these units will change as well. When spatial data are derived from counting or averaging data within areal units, the form of those areal units affects the data recorded, and any statistical measures derived from the data. Modifying the areal units therefore changes the data. Two effects are involved: a zoning effect arising from the particular choice of areas at a given scale; and an aggregation effect arising from the extent to which data are aggregated over smaller or larger areas. The modifiable areal unit problem arises in part from edge effect. If you’re interested, in particular about politics and voting, you can read this interesting piece to learn more about gerrymandering 5.4.2 Why does MAUP matter? The practical implications of MAUP are immense for almost all decision-making processes involving GIS technology, since with the availability of aggregated maps, policy could easily focus on issues and problems which might look different if the aggregation scheme used were changed . All studies based on geographical areas are susceptible to MAUP. The implications of the MAUP affect potentially any area level data, whether direct measures or complex model-based estimates. Here are a few examples of situations where the MAUP is expected to make a difference: The special case of the ecological fallacy is always present when Census area data are used to formulate and evaluate policies that address problems at individual level, such as deprivation. Also, it is recognised that a potential source of error in the analysis of Census data is ‘the arrangement of continuous space into defined regions for purposes of data reporting’ The MAUP has an impact on indices derived from areal data, such as measures of segregation, which can change significantly as a result of using different geographical levels of analysis to derive composite measures . The choice of boundaries for reporting mortality ratios is not without consequences: when the areas are too small, the values estimated are unstable, while when the areas are too large, the values reported may be over-smoothed, i.e. meaningful variation may be lost . Gerell, Manne. “Smallest is better? The spatial distribution of arson and the modifiable areal unit problem.” Journal of quantitative criminology 33.2 (2017): 293-318. 5.4.3 What can we do? Most often you will just have to remain aware of the MAUP and it’s possible effects. There are some techniques, that can help you address these issues, and the chapter pointed out at the beginning of this section is a great place to start to explore these. It is possible to use also an alternative, zone-free approach to mapping these crime patterns, perhaps by using kernel density estimation. Here we model the relative density of the points as a density surface - essentially a function of location (x,y) representing the relative likelihood of occurrence of an event at that point. We have covered KDE elsewhere in this course. For the purposes of this course, it’s enough that you know of, and understand the MAUP and its implications. Always be smart when choosing your appropriate spatial unit of analysis, and when you use binning of any form, make sure you consider how and if your conclusions might change compared to another possible approach. 5.5 Transforming polygons When you have meaningful spatial units of analysis in your polygons, for example you are interested specifically in Local Authorities, it might make sense to stick with what we did last week, and aggregate the points into these polygons to create thematic maps. However, while thematic maps are an accessible and visually appealing method for displaying spatial information, they can also be highly misleading. Irregularly shaped polygons and large differences in the size of areas being mapped can introduce misrepresentation. The message researchers want to get across might be lost, or even worse, misdirect the viewers to erroneous conclusions. This article provides a helpful discussion of the problem illustrating the case with UK election maps. It is worth reading. Fortunately, there are many methods in R to enhance the legibility of geographic information and the interpretability of what it is trying to be communicated. Broadly, the options are: cartogram hexmap grid Selecting the appropriate method might depend on the research question being posed (e.g. clustering) and the data itself. Even once a method has been selected, there are different ways of operationalising them. Let’s explore this using the example of the results of the 2016 EU referendum at Local Authority level, where remain areas clustered in London. A simple thematic map does not necessarily communicate this well because Local Authorities are both small and densely populated in London. You can download the full set of EU referendum result data as a csv from the Electoral Commission webside. Let’s read it straight into R: eu_ref &lt;- read_csv(&quot;https://www.electoralcommission.org.uk/sites/default/files/2019-07/EU-referendum-result-data.csv&quot;) ## Rows: 382 Columns: 21 ## ── Column specification ───────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (4): Region_Code, Region, Area_Code, Area ## dbl (17): id, Electorate, ExpectedBallots, VerifiedBallotPapers, Pct_Turnout... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. OKAY, now we need a shapefile to join it to. Remember when we got the Manchester lsoa shapefile with the boundary selector? Let’s go back, and this time get Local Authority Districts for England. In this case that means select “English Districts, UAs and London Boroughs, 2011”: Once you have the file, download, extract (unzip) and put the folder in your working directory. Mine is in a subfolder in my working directory called data, so I point R inside that folder to find my shape file. las &lt;- st_read(&quot;data/England_lad_2011_gen/england_lad_2011_gen.shp&quot;) ## Reading layer `england_lad_2011_gen&#39; from data source ## `/Users/user/Desktop/resquant/crime_mapping_textbook/data/England_lad_2011_gen/england_lad_2011_gen.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 326 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 82644.8 ymin: 5349.399 xmax: 655976.9 ymax: 657599.5 ## Projected CRS: OSGB36 / British National Grid We can now join the EU referendum data, as we have learned in the past weeks: eu_sf &lt;- left_join(las, eu_ref, by = c(&quot;name&quot; = &quot;Area&quot;)) Now we can have a look at these data: ggplot() + geom_sf(data = eu_sf, aes(fill = Pct_Leave)) We can see that in smaller LAs we don’t even really see the result, as the boundary lines pretty much cover everything. Hmm. Now what we can do is transform the shapes. 5.5.1 Activity 9: Cartograms The last thing we will do today is make some cartograms! Cartogram types of maps distort reality to convey information. They resize and exaggerate any variable on an attribute value. There are different types of cartograms. Density-equalizing (contiguous) cartograms are your traditional cartograms. In density-equalizing cartograms, map features bulge out a specific variable. Even though it distorts each feature, it remains connected during its creation. On the other hand, you can have Non-Contiguous Cartograms, where features in non-contiguous cartograms don’t have to stay connected. Finally, Dorling Cartogram (named after professor Danny Dorling) uses shapes like circles and rectangles to depict area. These types of cartograms make it easy to recognize patterns! Now we can make our own as well, using the cartogram package. library(cartogram) Within that there is the cartogram() function, which takes 2 arguments, 1 - the shape file (it can be a SpatialPolygonDataFrame or an sf object), and 2 - the variable which it should use to distort the polygon by. In our data set we have a variable “electorate” which refers to the total number of registered electors, which we will use to distort the polygons: # construct a cartogram using the size of the electorate in each LA eu_cartogram &lt;- cartogram(eu_sf, &quot;Electorate&quot;) Again this is some labour intensive work, much like the grid making, you have some time to chill now. Maybe read up on the maths behind this tranformation as well, in the paper Dougenik, J. A., Chrisman, N. R., &amp; Niemeyer, D. R. (1985). An Algorithm To Construct Continuous Area Cartograms. In The Professional Geographer, 37(1), 75-81.. I do have a tip for you if you want to make sure the process does not take too long. You can set a parameter in the cartogram function which is the “itermax” parameter. This specifies the maximum number of iterations we are happy with. If you don’t specify it’s set to 15. Let’s set to 5 for the sake of speed: # construct a cartogram using the size of the electorate in each LA eu_cartogram &lt;- cartogram_cont(eu_sf, &quot;Electorate&quot;, itermax = 5) And if your cartogram has been created, you can now plot again the referendum results, but using the electorate to change the size of the local authority: # plot the percentage voting leave onto our cartogram ggplot() + geom_sf(data = eu_cartogram, aes(fill = Pct_Leave)) We can now see London much better, and see that darker coloured cluster where much smaller percentage of people voted leave. Okay that’s probably enough for the day. Nice work crime mappers! 5.6 References and further reading 5.6.1 Binning Johnson, Zachary Forest. (18 October 2011). “Hexbins!” Retrieved from: http://indiemaps.com/blog/2011/10/hexbins/ (8 August 2014). Smith, Nate. (25 May 2012). “Binning: An Alternative to Point Maps.” Mapbox. Retrieved from: https://www.mapbox.com/blog/binning-alternative-point-maps/ (8 August 2014). Claudia A Engel’s fantastic R-pub on Making Maps in R. Hexbin Graph Gallery US Drought Hexmap Hexbin with ggplot2 5.6.2 MAUP Gerell, Manne. “Smallest is better? The spatial distribution of arson and the modifiable areal unit problem.” Journal of quantitative criminology 33.2 (2017): 293-318. Openshaw, Stan. “The modifiable areal unit problem. CATMOG (Concepts and techniques in modern geography) 38.” Geo Abstracts, Norwich. 1984.. Rengert, George F., and Brian Lockwood. “Geographical units of analysis and the analysis of crime.” Putting crime in its place. Springer, New York, NY, 2009. 109-122. 5.6.3 Transforming polygons Waldo Tobler (2004) Thirty Five Years of Computer Cartograms, Annals of the Association of American Geographers, 94:1, 58-73, DOI: 10.1111/j.1467-8306.2004.09401004.x Langton, S.H. &amp; Solymosi, R. (2018) ‘Visualising geographic information: examining methods of improving the thematic map.’ RPubs. Available: https://rpubs.com/langton_/visual_geography_study References Baller, Robert, Luc Anselin, Steven Messner, Glenn Deane, and Darnell Hawkins. 2001. “Structural Covariates of US County Homicide Rates: Incorporating Spatial Effects.” Criminology 39 (3): 561–88. Clayton, David, and John Kaldor. 1987. “Empirical Bayes Estimates of Age-Standardized Relative Risks for Use in Disease Mapping.” Biometrics, 671–81. Gelman, Andrew, and Phillip Price. 1999. “All Maps of Parameters Estimates Are Misleading.” Statistics in Medicine 18: 3221–34. Lawson, Andrew. 2021. Statistical Methods in Spatial Epidemiology. 2nd ed. Chichester, UK: John Wiley &amp; Sons. Marshall, Roger. 1991. “Mapping Disease and Mortality Rates Using Empirical Bayes Estimators.” Applied Statistics 40 (2): 283–94. Waller, HLance, and Carol Gotway. 2004. Applied Spatial Statistics for Public Health Data. Chichester, UK: John Wiley &amp; Sons. "],["studying-spatial-point-patterns.html", "Chapter 6 Studying spatial point patterns 6.1 What we’ll do today 6.2 Getting the data 6.3 Density estimates 6.4 Spatial point patterns along networks 6.5 Recap", " Chapter 6 Studying spatial point patterns 6.1 What we’ll do today We have now covered quite a bit! You’ve learnt about spatial objects and various formats in which they come and are stored by R, how to produce maps using a variety of packages, and also provided you with a brief introduction to common spatial operations. In what remains of the semester we are going to shift the emphasis and start focusing a bit more on spatial statistics. First we will focus on techniques that are used to explore and analyse points in a geographical space and in subsequent sessions we will cover techniques that are used to analyse spatial data when our unit of analysis are polygons (e.g., postal code areas, census areas, police beats, etc). We will introduce a new R package called spatstat, that was developed for spatial point pattern analysis and modelling. It was written by Adrian Baddeley and Rolf Turner. There is a webpage dedicated to this package. The thickest book in my library, at 810 pages, is dedicated to this package. So as you can imagine the theory and practice of spatial pattern analysis is something one could devote an entire course to. You can get a pdf document used in a course the authors of this package develop here. In our course we are only going to provide you with an introductory practical entry into this field of techniques. If this package is not installed in your machine, make sure you install it before we carry on. We will be using the following packages today: readxl janitor sf ggplot2 dplyr spatstat raster leaflet 6.2 Getting the data This week we will work with some slightly larger data sets than before: we will have one year’s worth of police-recorded crime data for Greater Manchester Police from the police.uk website. Within that, we will focus on burglary in the Fallowfield area. The code below has already been explained and used in previous sessions, so we won’t go over the detail again. But rather than cut and paste automatically, try to remember what each line of code is doing. If you have any questions about it, do ask in the lab, remember - practice makes perfect! By the way, the police data for Manchester we have used in previous sessions correspond to only one month of the year. Here we are using a full year worth of data, so the data import will take a bit longer. We’ll also be using a geojson shape file of wards. From this we will select Fallowfield ward specifically. You can get both the geojson file of wards and the excel file of crimes from Blackboard. Save to your computer, and remember to put it in the right place for the project! Here I saved mine into the “data” subfolder. #Read a geojson file with Manchester wards (remember we learned about geojson files in week 4). manchester_ward &lt;- st_read(&quot;https://raw.githubusercontent.com/eonk/cm_book/main/data/wards.geojson&quot;) ## Reading layer `wards&#39; from data source ## `https://raw.githubusercontent.com/eonk/cm_book/main/data/wards.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 215 features and 12 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 351664 ymin: 381168.6 xmax: 406087.5 ymax: 421039.8 ## Projected CRS: OSGB36 / British National Grid #step1: create a new object that only has the &#39;fallowfield&#39; ward df1 &lt;- manchester_ward %&gt;% filter(wd16nm == &quot;Fallowfield&quot;) #step2: change coordinate systems fallowfield &lt;- st_transform(df1, 4326) #step3: get rid of objects we no longer need rm(manchester_ward, df1) #step4: Read Greater Manchester police data #or you can use this link:&quot;https://www.dropbox.com/s/rs43mg8equy1zu5/gmp_crimes_2021.zip?dl=1&quot; #(see week5, 5.1.1.2. Activity 2, if you forget how to do!) crimes &lt;- read_xlsx(&quot;data/gmp_crimes_2021.xlsx&quot;) %&gt;% clean_names() #step5: filter Burglary burglary &lt;- filter(crimes, crime_type == &quot;Burglary&quot;) #step6: transform the dataframe with crime information into a sf object burglary_spatial &lt;- st_as_sf(burglary, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326, agr = &quot;constant&quot;) #step7: select only the crimes that take place within the space defined by the Ward boundaries # intersection bur_fal &lt;- st_intersects(fallowfield, burglary_spatial) # subsetting bur_fal &lt;- burglary_spatial[unlist(bur_fal),] #step8: again remove things we don&#39;t need rm(crimes, burglary) Now we have all our data cleaned and all our files prepared. Let’s see the results! ggplot() + geom_sf(data = fallowfield) + geom_sf(data = bur_fal) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank(), axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), panel.background = element_blank()) In the point pattern analysis literature each point is often referred to as an event and these events can have marks, attributes or characteristics that are also encoded in the data. In our spatial object one of these marks is the type of crime (although in this case it’s of little interest since we have filtered on it). 6.2.1 Activity 1: Getting the data into spatstat: the problem with duplicates So let’s start using spatstat.The first thing we need to do is to transform our sf object into a ppp object which is how spatstat likes to store its point patterns. Unfortunately, spatstat and many other packages for analysis of spatial data precede sf, so the transformation is a bit awkard. Also before we do that, it is important to realise that a point pattern is defined as a series of events in a given area, or window, of observation. It is therefore extremely important to precisely define this window. In spatstat the function owin() is used to set the observation window. However, the standard function takes the coordinates of a rectangle or of a polygon from a matrix, and therefore it may be a bit tricky to use. Luckily the package maptools provides a way to transform a SpatialPolygons into an object of class owin, using the function as.owin(). Here are the steps: First we transform the CRS of our ‘Falllowfield’ polygon into projected coordinates (British National Grid) as opposed to geographic coordinates (WGS84) : fallowfield_proj &lt;- st_transform(fallowfield, 27700) Then we use the as.owin function to define the window. window &lt;- as.owin(fallowfield_proj) Now, use the class function and print the window object to check that this worked: class(window) ## [1] &quot;owin&quot; window ## window: polygonal boundary ## enclosing rectangle: [382951.5, 385869.8] x [393616.3, 394988.8] units Now that we have created the window as an owin object let’s get the points. First we will extract the coordinates from our sf point data into a matrix: #we must transform these too to match our window in BNG bur_fal &lt;- st_transform(bur_fal, 27700) sf_bur_fal_coords &lt;- matrix(unlist(bur_fal$geometry), ncol = 2, byrow = T) Then we use the ppp function to create the ppp (point pattern) object using the information from our matrix and the window that we created. bur_ppp &lt;- ppp(x = sf_bur_fal_coords[,1], y = sf_bur_fal_coords[,2], window = window, check = T) ## Warning: data contain duplicated points plot(bur_ppp) Notice the warning message about duplicates. In spatial point pattern analysis an issue of significance is the presence of duplicates. The statistical methodology used for spatial point pattern processes is based largely on the assumption that processes are simple, that is, that the points cannot be coincident. That assumption may be unreasonable in many contexts (for example, the literature on repeat victimisation indeed suggests that we should expect the same households to be at a higher risk of being hit again). Even so the point (no pun intended) is that “when the data has coincidence points, some statistical procedures will be severely affected. So it is always strongly advisable to check for duplicate points and to decide on a strategy for dealing with them if they are present” (Baddeley et al., 2016: 60). We can check the duplication in a ppp object with the following syntax: any(duplicated(bur_ppp)) ## [1] TRUE To count the number of coincidence points we use the multiplicity() function. This will return a vector of integers, with one entry for each observation in our dataset, giving the number of points that are identical to the point in question (including itself). multiplicity(bur_ppp) If you want to know how many locations have more than one event you can use: sum(multiplicity(bur_ppp) &gt; 1) ## [1] 255 That’s quite something. 255 points here share coordinates. ggplot() + geom_sf(data = fallowfield) + geom_sf(data = bur_fal, alpha = 0.4) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank(), axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), panel.background = element_blank()) In the case of crime, as we have hinted some of this may be linked to the nature of crime itself, repeat victimisation. However, this pattern of duplication is fairly obvious across all crime categories in the police.uk website. This is due to the way in which spatial anonymisation of police.uk data is carried out. This is done using geomasking, whereby there exist a pre-determined list of points that each crime event gets “snapped” to its nearest one. So, the coordinates provided in the open data are not the exact locations of crimes, but they come from a list of points generated for purposes of data publication. You can see the details here. This process is likely inflating the amount of duplication we observe, because each snap point might have many crimes near it, resulting in those crimes being geo-coded to the same exact location. So keep in mind when analysing and working with this data set that it is not the same as working with the real locations. If you are interested in the effects of this read the paper Tompson, Johnson, Ashby, Perkins &amp; Edwards (2015) UK open source crime data: accuracy and possibilities for research, Cartography and Geographic Information Science, 42:2, 97-111, DOI: 10.1080/15230406.2014.972456. What to do about duplicates in spatial point pattern analysis is not always clear. You could simply delete the duplicates, but of course that may ignore issues such as repeat victimisation. You could also use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space. Which again, may ignore things like repeat victimisation. Another alternative is to make each point “unique” and then attach the multiplicites of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks. If you were to be doing this for real you would want access to the real thing, not this public version of the data and then go for the latter solution suggested above. We don’t have access to the source data, so for the sake of simplicity, so that we can illustrate how spatstat works we will instead add some jittering to the data. The first argument for the function is the object (bur_ppp), ‘retry’ asks whether we want the algorithm to have another go if the jittering places a point outside the window (we want this so that we don’t loose points), and the ‘drop’ argument is used to ensure we get a ppp object as a result of running this function (which we do). jitter_bur &lt;- rjitter(bur_ppp, retry=TRUE, nsim=1, drop=TRUE) plot(jitter_bur) Notice the difference with the original plot. Can you see how the circumferences do not overlap perfectly now? 6.2.2 Activity 2: Inspecting our data with spatstat This package supports all kind of exploratory point pattern analysis. One example of this is quadrant counting, which you learned about in the video prep for this week. One could divide the window of observation into quadrants and count the number of points into each of these quadrants. For example, if we want 4 quadrants along the X axis and 3 quadrants along the Y axis we could used those parameters in the quadratcount() function. Then we just use standard plotting functions from R base. Q &lt;- quadratcount(jitter_bur, nx = 4, ny = 3) plot(jitter_bur) plot(Q, add = TRUE, cex = 2) #cex = size of text In the video lectures for this week, Luc Anselin introduced the notion of complete spatial randomness (CSR for short). When we look at a point pattern process the first step in the process is to ask whether it has been generated in a random manner. Under CSR, points are independent of each other and have the same propensity to be found at any location. We can generate data that conform to complete spatial randomness using the rpoispp() function. The r at the beginning is used to denote we are simulating data (you will see this is common in R) and we are using a Poisson point process, a good probability distribution for these purposes. Let’s generate 277 points in a random manner: random &lt;- rpoispp(277) plot(random) Q &lt;- quadratcount(random, nx = 4, ny = 3) plot(Q, add = TRUE, cex = 2) You will notice that the points in a homogeneous Poisson process are not ‘uniformly spread’: there are empty gaps and clusters of points. Also, once you display the ‘quadratcount’ on the plot, the number of points in each area is similar unlike the burglary pattern in Fallowfield. Run the previous command a few times. You will see the map generated is different each time. In classical literature, the homogeneous Poisson process (CSR) is usually taken as the appropriate ‘null’ model for a point pattern. Our basic task in analysing a point pattern is to find evidence against CSR. We can run a Chi Square test to check this. So, for example: quadrat.test(jitter_bur, nx = 3, ny = 2) ## ## Chi-squared test of CSR using quadrat counts ## ## data: jitter_bur ## X2 = 248.71, df = 5, p-value &lt; 2.2e-16 ## alternative hypothesis: two.sided ## ## Quadrats: 6 tiles (irregular windows) Observing the results we see that the p value is well below convential standards for rejection of the null hypothesis (\\(\\alpha = 0.05\\)). Observing our data of burglary in Fallowfield would be extremely rare if the null hypothesis was true. We can then conclude that the burglary data is not randomly distributed in the observed space. But no cop nor criminologist would really question this. They would rarely be surprised by your findings! We do know that crime is not randomly distributed in space. 6.3 Density estimates In the presentations by Luc Anselin and the recommended reading materials we introduced the notion of density maps. Kernel density estimation involves applying a function (known as a “kernel”) to each data point, which averages the location of that point with respect to the location of other data points. The surface that results from this model allows us to produce isarithmic maps, also referred to in common parlor as heatmaps. Beware though, cartographers really dislike this common parlor. We saw this kind of maps when covering the various types of thematic maps. Kernel density estimation maps are very popular among crime analysts. According to Chainey (2012), 9 out of 10 intelligence professionals prefer it to other techniques for hot spot analysis. As compared to visualisations of crime that relies on point maps or thematic maps of geographic administrative units (such as LSOAs), kernel density estimation maps are considered best for location, size, shape and orientation of the hotspot (Chainey, 2012). Spencer Chainey and his colleagues (2008) have also suggested that this method produces some of the best prediction accuracy. The areas identified as hotspots by KDE (using historical data) tend to be the ones that better identify the areas that will have high levels of crime in the future. Yet, producing these maps (as with any map, really) requires you to take a number of decisions that will significantly affect the resulting product and the conveyed message. Like any other data visualisation technique they can be powerful, but they have to be handled with great care. Essentially this method uses a statistical technique (kernel density estimation) to generate a smooth continuous surface aiming to represent the density or volume of crimes across the target area. The technique, in one of its implementations (quartic kernel), is described in this way by Eck and colleagues (2005): “a fine grid is generated over the point distribution; a moving three-dimensional function of a specified radius visits each cell and calculates weights for each point within the kernel’s radius. Points closer to the centre will receive a higher weight, and therefore contribute more to the cell’s total density value; and final grid cell values are calculated by summing the values of all kernel estimates for each location” (Reproduced from Eck et al. 2012) The values that we attribute to the cells in crime mapping will typically refer to the number of crimes within the area’s unit of measurement. We don’t have the time to elaborate further on this technique now, but if you did the required reading you should have at least a notion of how this works. 6.3.1 Activity 3: Density maps Let’s produce one of this density maps: ds &lt;- density(jitter_bur) class(ds) ## [1] &quot;im&quot; plot(ds, main=&#39;Burglary density in Fallowfield&#39;) The density function is estimating a kernel density estimate. Density is nothing but the number of points per unit area. This method computes the intensity continuously across the study area and the object returns a raster image. To perform this analysis in R we need to define the bandwidth of the density estimation, which basically determines the area of influence of the estimation. There is no general rule to determine the correct bandwidth; generally speaking if the bandwidth is too small the estimate is too noisy, while if bandwidth is too high the estimate may miss crucial elements of the point pattern due to oversmoothing (Scott, 2009). The key argument to pass to the density method for point pattern objects is sigma=, which determines the bandwidth of the kernel. In spatstat the functions bw.diggle(), bw.ppl(), and bw.scott() can be used to estimate the bandwidth according to difference methods. The helpfiles recommend the use of the first two. These functions run algorithms that aim to select an appropriate bandwith. bw.diggle(jitter_bur) ## sigma ## 3.021559 bw.ppl(jitter_bur) ## sigma ## 17.42241 bw.scott(jitter_bur) ## sigma.x sigma.y ## 244.34970 86.03335 You can see the Diggle algorithm gives you the narrower bandwith. We can test how they work with our dataset using the following code: par(mfrow=c(2,2)) plot(density.ppp(jitter_bur, sigma = bw.diggle(jitter_bur),edge=T), main = paste(&quot;diggle&quot;)) plot(density.ppp(jitter_bur, sigma = bw.ppl(jitter_bur),edge=T), main=paste(&quot;likelihood cross-validation&quot;)) plot(density.ppp(jitter_bur, sigma = bw.scott(jitter_bur)[2],edge=T), main=paste(&quot;scott 1&quot;)) plot(density.ppp(jitter_bur, sigma = bw.scott(jitter_bur)[1],edge=T), main=paste(&quot;scott 2&quot;)) Baddeley et (2016) suggest the use of the bw.ppl() algorithm because in their experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if your purpose it to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best. Apart from selecting the bandwidth we also need to specify the particular kernel we will use. In density estimation there are different types of kernel (as illustrated below): Source: wikepedia You can read more about kernel types in the Wikipedia entry. This relates to the type of kernel drawn around each point in the process of counting points around each point. The use of these functions will result in slightly different estimations. They relate to the way we weight points within the radius: “The normal distribution weighs all points in the study area, though near points are weighted more highly than distant points. The other four techniques use a circumscribed circle around the grid cell. The uniform distribution weighs all points within the circle equally. The quartic function weighs near points more than far points, but the fall off is gradual. The triangular function weighs near points more than far points within the circle, but the fall off is more rapid. Finally, the negative exponential weighs near points much more highly than far points within the circle and the decay is very rapid.” (Levine, 2013: 10.10). Which one to use? Levine (2013) produces the following guidance: “The use of any of one of these depends on how much the user wants to weigh near points relative to far points. Using a kernel function which has a big difference in the weights of near versus far points (e.g., the negative exponential or the triangular) tends to produce finer variations within the surface than functions which weight more evenly (e.g., the normal distribution, the quartic, or the uniform); these latter ones tend to smooth the distribution more. However, Silverman (1986) has argued that it does not make that much difference as long as the kernel is symmetrical. Chainey (2013) suggest that in his experience most crime mappers prefer the quartic function, since it applies greater weight to crimes closer to the centre of the grid. The authors of the CrimeStat workbook (Smith and Bruce, 2008), on the other hand, suggest that the choice of the kernel should be based in our theoretical understanding of the data generating mechanisms. By this they mean that the processes behind spatial autocorrelation may be different according to various crime patterns and that this is something that we may want to take into account when selecting a particular function. They provide a table with some examples that may help you to understand what they mean: (Source: Smith and Bruce, 2008.) The default kernel in density.ppp() is the gaussian. But there are other options. We can use the epanechnikov, quartic or disc. There are also further options for customisation. We can compare these kernels: par(mfrow=c(2,2)) plot(density.ppp(jitter_bur, sigma = bw.ppl(jitter_bur),edge=T), main=paste(&quot;Gaussian&quot;)) plot(density.ppp(jitter_bur, kernel = &quot;epanechnikov&quot;, sigma = bw.ppl(jitter_bur),edge=T), main=paste(&quot;Epanechnikov&quot;)) plot(density.ppp(jitter_bur, kernel = &quot;quartic&quot;, sigma = bw.ppl(jitter_bur),edge=T), main=paste(&quot;Quartic&quot;)) plot(density.ppp(jitter_bur, kernel = &quot;disc&quot;, sigma = bw.ppl(jitter_bur),edge=T), main=paste(&quot;Disc&quot;)) When reading these maps you need to understand you are only looking at counts of crime in a smooth surface. Nothing more, nothing less. Unlike with choropleth maps we are not normalising the data. We are simply showing the areas where there is more crime, but we are not adjusting for anything (like number of people in the area, or number of houses to burgle). So, it is important you keep this in the back of your mind. As this comic suggests you may end up reading too much into it if you don’t remember this. There are ways to produce density maps adjusting for a second variable, such as population size, but we do not have the time to cover this. There are also general considerations to keep in mind. Hot spots of crime are a simply a convenient perceptual construct. As Ned Levine (2013: 7.1) highlights “Hot spots do not exist in reality, but are areas where there is sufficient clustering of certain activities (in this case, crime) such that they get labeled such. There is not a border around these incidents, but a gradient where people draw an imaginary line to indicate the location at which the hot spot starts.” Equally, there is not a unique solution to the identification of hot spots. Different techniques and algorithms will give you different answers. As Levine (2013: 7.7) emphasises: “It would be very naive to expect that a single technique can reveal the existence of hot spots in a jurisdiction that are unequivocally clear. In most cases, analysts are not sure why there are hot spots in the first place. Until that is solved, it would be unreasonable to expect a mathematical or statistical routine to solve that problem.” So, as with most data analysis exercises one has to try different approaches and use professional judgement to select a particular representation that may work best for a particular use. Equally, we should not reify what we produce and, instead, take the maps as a starting point for trying to understand the underlying patterns that are being revealed. Critically you want to try several different methods. You will be more persuaded a location is a hot spot if several methods for hot spot analysis point to the same location. 6.3.2 Activity 4: Adding some context Often it is convenient to use a basemap to provide context. In order to do that we first need to turn the image object generated by the spatstat package into a raster object, a more generic format for raster image used in R. Remember rasters from the first week? Now we finally get to use them a bit! library(raster) dmap1 &lt;- density.ppp(jitter_bur, sigma = bw.ppl(jitter_bur),edge=T) r1 &lt;- raster(dmap1) #remove very low density values r1[r1 &lt; 0.0001 ] &lt;- NA class(r1) ## [1] &quot;RasterLayer&quot; ## attr(,&quot;package&quot;) ## [1] &quot;raster&quot; Now that we have the raster we can add it to a basemap. Two-dimensional RasterLayer objects (from the raster package) can be turned into images and added to Leaflet maps using the addRasterImage() function. The addRasterImage() function works by projecting the RasterLayer object to EPSG:3857 and encoding each cell to an RGBA color, to produce a PNG image. That image is then embedded in the map widget. It’s important that the RasterLayer object is tagged with a proper coordinate reference system. Many raster files contain this information, but some do not. Here is how you’d tag a raster layer object “r1” which contains WGS84 data: library(leaflet) #make sure we have right CRS, which in this case is British National Grid epsg27700 &lt;- &quot;+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs&quot; crs(r1) &lt;- sp::CRS(epsg27700) #we also create a colour palet pal &lt;- colorNumeric(c(&quot;#0C2C84&quot;, &quot;#41B6C4&quot;, &quot;#FFFFCC&quot;), values(r1), na.color = &quot;transparent&quot;) #and then make map! leaflet() %&gt;% addTiles() %&gt;% addRasterImage(r1, colors = pal, opacity = 0.8) %&gt;% addLegend(pal = pal, values = values(r1), title = &quot;Burglary map&quot;) And there you have it. Perhaps those familiar with Fallowfield have some guesses as to what may be going on there? 6.4 Spatial point patterns along networks Have a look at these maps. Can we say that the spatial point process is random here? Can you identify the areas where we have hotspots of crime? Think about these questions for a little while. (Source: Okabe and Sugihara, 2012) Ok, so most likely you concluded that the process wasn’t random, which it isn’t in truth. It is also likely that you identified a number of potential hotspots? Now, look at the two maps below: (Source: Okabe and Sugihara, 2012) We are representing the same spatial point pattern process in each of them. But we do have additional information in map B. We now know the street layout. The structure we observed in the map is accounted by the street layout. So what look like a non random spatial point process when we considered the full two dimensional space, now looks less random when we realise that the points can only appear alongside the linear network. This problem is common in criminal justice applications. Crime is geocoded alongside a linear street network. Even if in physical space crime can take place along a spatial continuum, once crime is geocoded it will only be possible alongside the street network used for the geocoding process. 6.4.1 Activity 5: Spatial point pattern processes along networks For exploring this kind of spatial point pattern processes along networks we need special techniques. Some researchers have developed special applications, such as SANET. The spatstat package also provides some functionality for this kind of data structures. In spatstat a point pattern on a linear network is represented by an object of class lpp. The functions lpp() and as.lpp() convert raw data into an object of class lpp (but they require a specification of the underlying network of lines, which is represented by an object of class linnet). For simplicity and illustration purposes we will use the chicago dataset that is distributed as part of the spatstat package. The chicago data is of class lpp and contains information on crime in an area of Chicago. data(&quot;chicago&quot;) plot(chicago) summary(chicago) ## Multitype point pattern on linear network ## 116 points ## Linear network with 338 vertices and 503 lines ## Total length 31150.21 feet ## Average intensity 0.003723891 points per foot ## Types of points: ## frequency proportion intensity ## assault 21 0.18103450 0.0006741528 ## burglary 5 0.04310345 0.0001605126 ## cartheft 7 0.06034483 0.0002247176 ## damage 35 0.30172410 0.0011235880 ## robbery 4 0.03448276 0.0001284100 ## theft 38 0.32758620 0.0012198950 ## trespass 6 0.05172414 0.0001926151 ## Enclosing window: rectangle = [0.3894, 1281.9863] x [153.1035, 1276.5602] feet An lpp object contains the linear network information, the spatial coordinates of the data points, and any number of columns of marks (in this case the mark is telling us the type of crime we are dealing with). It also contains the local coordinates seg and tp for the data points. The local coordinate seg is an integer identifying the particular street segment the data point is located in. A segment is each of the sections of a street between two vertices (marking the intersection with another segment). The local coordinate tp is a real number between 0 and 1 indicating the position of the point within the segement: tp=0 corresponds to the first endpoint and tp=1 correspond to the second endpoint. The visual inspection of the map suggest that the intensity of crime along the network is not spatially uniform. Crime seems to be concentrated in particular segments. Like we did before we can estimate the density of data points along the networks using Kernel estimation (with the density.lpp() function), only now we only look at the street segments (rather than areas of the space that are outside the segments). The authors of the package are planning to introduce methods for automatic bandwidth selection but for now this is not possible, so we have to select a bandwidth. We could for example select 60 feet. d60 &lt;- density.lpp(unmark(chicago), 60) We use unmark() to ignore the fact the data points are marked (that is they provide marks with informtation, in this case about the crime type). By using unmark() in this example we will run density estimation for all crimes (rather than by type of crime). We can see the results below: plot(d60) If rather than colour you want to use the thickness of the street segment to identify hotpspots you would need to modify the code as shown below: plot(d60, style=&quot;width&quot;, adjust=2.5) This is very important for crime research, as offending will be constrained by all sorts of networks. Traditionally, hotspot analysis has been directed at crimes that are assumed to be situated across an infinite homogeneous environment (e.g., theft of motor vehicle), we must develop an increased awareness of perceptible geographical restrictions. There has been increasing recognition in recent years that the spatial existence of many phenomena is constrained by networks. These networks may be roads or rail networks, but there may be many more: Environmental crimes could exist along waterways such as streams, canals, and rivers; and thefts of metal could occur along utility networks such as pipelines. Those sociologically inclined might be able to offer more examples in the way of interpersonal networks. Tompson, Lisa, Henry Partridge, and Naomi Shepherd. “Hot routes: Developing a new technique for the spatial analysis of crime.” Crime Mapping: A Journal of Research and Practice 1, no. 1 (2009): 77-96. While sometimes there may be issues with linking points to routes due to problems such as bad geocoding, as we had discusses in great detail in week 4, there are obvious advantages to considering crime as distributed along networks, rather than continuous space. Now we have some ways of identifying hot spots under our belts! 6.5 Recap Today we learned about spatial point patterns. Specifically we explored how to do the following: - we looked at dividing our polygon into quadrants, and counting the number of crimes in each one - we used kernel density estimation to look for concentration of crimes in euclidean space - saved our kernel density heat map as a raster layer and presented on an interactive map - looked at spatial clustering along networks "],["global-and-local-spatial-autocorrelation.html", "Chapter 7 Global and local spatial autocorrelation 7.1 Get data 7.2 What is a neighbour? 7.3 Putting ‘neighbourness’ in our analysis - constructing a spatial weight matrix 7.4 Creating a list of neighbours 7.5 Generating the weight matrix 7.6 Moran’s I 7.7 Local spatial autocorrelation", " Chapter 7 Global and local spatial autocorrelation This session we begin to explore the analysis of local spatial autocorrelation statistics. Spatial autocorrelation is the correlation among data values, strictly due to the relative location proximity of the objects that the data refer to. Remember in the earlier weeks when we spoke about Tobler’s first law of geography - “everything is related to everything else, but near things are more related than distant things”? Spatial autocorrelation is the measure of this correlation between near things. If correlation is not a familiar term, there is a recommended reading for you on blackboard to refresh your memory. We’ll be making use of the following packages: dplyr janitor sf sp spdep tmap readxl 7.1 Get data So, let’s start by getting some data. We are going to take some of the data from past weeks. In getting the data ready you will have one more opportunity to practice how to read data into R but also how to perform some basic spatial checks, transformations and operations. It may seem like you have already done some of this stuff. But that’s the point: to force you to practice. The more you do this stuff, the easier it will be and -trust us- eventually things will click and become second nature. First let’s get the LSOA boundary data. #The following assumes you have a subdirectory called BoundaryData in your data folder, if not then you will need to change to the pathfile where you store your LSOA shapefile #option1: import data manchester_lsoa &lt;- st_read(&quot;data/BoundaryData/england_lsoa_2011.shp&quot;) #option2: import data #Alternatively, you can download the LSOA shapefile from where we saved the data. #Important! note that I store it in on my Data folder You HAVE TO change that if needed. download.file(&quot;https://www.dropbox.com/s/h5c1okn4m6t3rqe/BoundaryData.zip?dl=1&quot; , destfile=&quot;data/BoundaryData.zip&quot;, # change to your local directory mode = &quot;wb&quot;) #Important! note that I extract file to the data/BoundaryData folder. you HATE TO change exdir (the directory to extract files to) unzip(&quot;data/BoundaryData.zip&quot;, exdir = &quot;data/BoundaryData&quot;) manchester_lsoa &lt;- st_read(&quot;data/BoundaryData/BoundaryData/england_lsoa_2011.shp&quot;) Now check the coordinate system. st_crs(manchester_lsoa) ## Coordinate Reference System: ## User input: OSGB36 / British National Grid ## wkt: ## PROJCRS[&quot;OSGB36 / British National Grid&quot;, ## BASEGEOGCRS[&quot;OSGB36&quot;, ## DATUM[&quot;Ordnance Survey of Great Britain 1936&quot;, ## ELLIPSOID[&quot;Airy 1830&quot;,6377563.396,299.3249646, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4277]], ## CONVERSION[&quot;British National Grid&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,49, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,-2, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996012717, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,400000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,-100000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;Engineering survey, topographic mapping.&quot;], ## AREA[&quot;United Kingdom (UK) - offshore to boundary of UKCS within 49°45&#39;N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.&quot;], ## BBOX[49.75,-9,61.01,2.01]], ## ID[&quot;EPSG&quot;,27700]] There is no EPSG code assigned, but notice the datum is given for BNG. Let’s address this. lsoa_WGS84 &lt;- st_transform(manchester_lsoa, 4326) st_crs(lsoa_WGS84) ## Coordinate Reference System: ## User input: EPSG:4326 ## wkt: ## GEOGCRS[&quot;WGS 84&quot;, ## ENSEMBLE[&quot;World Geodetic System 1984 ensemble&quot;, ## MEMBER[&quot;World Geodetic System 1984 (Transit)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G730)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G873)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1150)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1674)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1762)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G2139)&quot;], ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]], ## ENSEMBLEACCURACY[2.0]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## CS[ellipsoidal,2], ## AXIS[&quot;geodetic latitude (Lat)&quot;,north, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## AXIS[&quot;geodetic longitude (Lon)&quot;,east, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## USAGE[ ## SCOPE[&quot;Horizontal component of 3D system.&quot;], ## AREA[&quot;World.&quot;], ## BBOX[-90,-180,90,180]], ## ID[&quot;EPSG&quot;,4326]] Now we have this WGS84 boundary, so we can plot this to make sure all looks well, and then remove the old object which we no longer need. plot(st_geometry(lsoa_WGS84)) rm(manchester_lsoa) Let’s add the burglary data from Greater Manchester. We have practiced this code in previous sessions so we won’t go over it on detail again, but try to remember and understand what each line of code rather than blindly cut and paste. If you don’t understand what each of these lines of codes is doing, raise your hand to call us over to help. #step1: read data into R #or you can use this link:&quot;https://www.dropbox.com/s/rs43mg8equy1zu5/gmp_crimes_2021.zip?dl=1&quot; #(see week5, 5.1.1.2. Activity 2, if you forget how to do!) crimes &lt;- read_xlsx(&quot;data/gmp_crimes_2021.xlsx&quot;) %&gt;% clean_names() #step2: filter out to select burglary burglary &lt;- filter(crimes, crime_type == &quot;Burglary&quot;) #step3: transform into spatial object burglary_spatial = st_as_sf(burglary, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326, agr = &quot;constant&quot;) #step4: select burglaries that intersect with the Manchester city LSOA map. bur_mc_intersects &lt;- st_intersects(lsoa_WGS84, burglary_spatial) bur_mc &lt;- burglary_spatial[unlist(bur_mc_intersects),] #step5: check results plot(st_geometry(bur_mc)) We now have the burglaries data, let’s now count how many burglaries there are within each LSOA polygon. This is a point in polygon operation that we covered in week 4 when we counted the number of violent crimes in the buffers of the licenced premises for example. If the code or the notion does not make much sense to you make sure you review the relevant session from week 4. #step6: point in polygon spatial operation (be patient this can take time) burglaries_per_lsoa &lt;- bur_mc %&gt;% st_join(lsoa_WGS84, ., left = FALSE) %&gt;% count(code) #step7: let&#39;s rename the column with the count of burglaries (n) into something more meaningful burglaries_per_lsoa &lt;- rename(burglaries_per_lsoa, burglary = n) #step8: Plot with tmap tm_shape(burglaries_per_lsoa) + tm_fill(&quot;burglary&quot;, style = &quot;quantile&quot;, palette = &quot;Reds&quot;) + tm_borders(alpha = 0.1) + tm_layout(main.title = &quot;Burglary counts&quot;, main.title.size = 0.7 , legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8) #step9: remove redundant objects rm(burglary) rm(crimes) rm(burglary_spatial) rm(bur_mc) Do you see any patterns? Are burglaries randomly spread around the map? Or would you say that areas that are closer to each other tend to be more alike? Is there evidence of clustering? Do burglaries seem to appear in certain pockets of the map? In this session we are going to discuss ways in which you can quantify the answer to this question. We will discuss measures of global spatial autocorrelation, which essentially aim to answer the degree to which areas that are near each other tend to be more alike. We say global because we are interested in the degree of clustering not on the location of the clusters. Later we will also cover techniques to identify local clusters of autocorrelation, but for now we will focus in quantifying whether areas are (on average) alike their neighbours. 7.2 What is a neighbour? Previously I asked whether areas are alike their neighbours or to areas that are close. But what is a neighbour? Or what do we mean by close? How can one define a set of neighbours for each area? If we want to know if what we measure in a particular area is similar to what happens on its neighbouring areas, we need to establish what we mean by a neighbour. There are various ways of defining a neighbour. We can say that two areas are neighbours if they share boundaries, if they are next to each other. In this case we talk of neighbours by contiguity. By contiguous you can, at the same time, mean all areas that share common boundaries (what we call contiguity using the rook criteria, like in chess) or areas that share common boundaries and common corners, that is, that have any point in common (and we call this contiguity using the queen criteria). When defining neighbours by contiguity we may also specify the order of contiguity. First order contiguity means that we are focusing on areas immediately contiguous. Second order means that we consider neighbours only those areas that are immediately contiguous to our first order neighbours (only the yellow areas in the figure below) and you could go on and on. Look at the graphic below for clarification: Figure 1 Source Alternatively we may define neighbours by distance. You can consider neighbours those areas that distant-wise are close to each other (regardless of whether boundaries are shared). In other words, areas will be defined as neighbours if they are within a specified radius. In sum, adjacency is an important concept in some spatial analysis. In some cases objects are considered adjacent when they “touch”, e.g. neighbouring countries. Contiguity measures tend to be more common when studying areas. It can also be based on distance. This is the most common approach when analysing point data, but can also be relevant when studying areas. 7.3 Putting ‘neighbourness’ in our analysis - constructing a spatial weight matrix You will come across the term spatial weight matrix at some point or, using mathematical notation, \\(W\\). Essentially the spatial weight matrix is a \\(n\\) by \\(n\\) matrix with ones and zeroes (in the case of contiguity-based definitions (v.s. distance-based)) identifying if any two observations are neighbours or not (1 or 0). You can think of the spatial weight matrix as a new data table that we are constructing with our definition of neighbours (whether that be rook or queen definition). How can we build such a matrix? To illustrate, let’s focus on Manchester’s City Centre. Calculating a spatial weights matrix is a computationally intensive process, which means it takes a long time (especially in older laptops…!). The larger area you have (which will have more LSOAs) the longer this will take. 7.3.1 Activity 1: Burglaries in Manchester City Centre ward We will use familiar code to clip the spatial object with the counts of burglaries to only those that intersect with the City Centre ward. Again, we have covered this code elsewhere, so we won’t explain here in detail. But don’t just cut and paste, if there is anything in this code you don’t fully understand you are expected to ask us. #Read a geojson file with Manchester wards manchester_ward &lt;- st_read(&quot;https://raw.githubusercontent.com/eonk/cm_book/main/data/wards.geojson&quot;) ## Reading layer `wards&#39; from data source ## `https://raw.githubusercontent.com/eonk/cm_book/main/data/wards.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 215 features and 12 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 351664 ymin: 381168.6 xmax: 406087.5 ymax: 421039.8 ## Projected CRS: OSGB36 / British National Grid #Create a new object that only has the city centre ward df1 &lt;- manchester_ward %&gt;% filter(wd16nm == &quot;City Centre&quot;) #Change coordinate systems cc_ward &lt;- st_transform(df1, 4326) #Check if their coordinate systems match st_crs(cc_ward) == st_crs(burglaries_per_lsoa) ## [1] TRUE #Get rid of objects we no longer need rm(manchester_ward) rm(df1) #Intersect cc_intersects &lt;- st_intersects(cc_ward, burglaries_per_lsoa) cc_burglary &lt;- burglaries_per_lsoa[unlist(cc_intersects),] #Plot with tmap tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(cc_burglary) + tm_fill(&quot;burglary&quot;, style = &quot;quantile&quot;, palette = &quot;Reds&quot;, id=&quot;code&quot;) + tm_borders() + tm_layout(main.title = &quot;Burglary counts&quot;, main.title.size = 0.7, legend.title.size = 0.8) + tm_view(view.legend.position = c(&quot;right&quot;, &quot;top&quot;)) So now we have a new spatial object cc_burglary with the 23 LSOA units that compose the City Centre Ward of Manchester. By focusing in a smaller subset of areas we can understand perhaps a bit better what comes next. But again we carry on. Do you perceive here some degree of spatial autocorrelation? 7.3.2 Activity 2: Manually explore neighbours The id argument in the tm_fill ensures that when you click over any of the areas you get not only the count of burglaries in that LSOA (the quantity we are mapping) gets displayed within a bubble, but you also get to see the code that identifies that LSOA. Move your cursor over the LSOA covering the West of Beswick (E01033688). You will see this area had 34 burglaries in 2019. Using the rook criteria identify the first order neighbors of this LSOA. List their identifiers. Are things different if we use the queen criteria? If so, how does it change? Think and think hard about what the lecture by Luc Anselin discussed. Have you identified all the neighbours of this area? (there are multiple ways of answering this question, just make sure you reason your answer). 7.4 Creating a list of neighbours It would be very, very tedious having to identify the neighbours of all the areas in our study area by hand, in the way we have done aboce in Activity 2. That’s why we love computers. We can automate tedious work so that they do it and we have more time to do fun stuff. We can use code to get the computer to establish what areas are next to each other (if we are using a contiguity based definition of being a neighbour). 7.4.1 Activity 3: Creating a neighbour list In order to identify neighbours we will use the poly2nb() function from the spdep package that we loaded at the beginning of our session. The spdep package provides basic functions for building neighbour lists and spatial weights, tests for spatial autocorrelation for areal data like Moran’s I (more on this below), and functions for fitting spatial regression models. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE. That is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria. If TRUE, a single shared boundary point meets the contiguity condition. w &lt;- poly2nb(cc_burglary, row.names=cc_burglary$code) class(w) ## [1] &quot;nb&quot; This has created an object of class nb - which is a neighbour list object. We can get some idea of what’s there if we ask for a summary. summary(w) ## Neighbour list object: ## Number of regions: 22 ## Number of nonzero links: 96 ## Percentage nonzero weights: 19.83471 ## Average number of links: 4.363636 ## Link number distribution: ## ## 2 3 4 5 6 7 8 ## 3 3 7 4 3 1 1 ## 3 least connected regions: ## E01033673 E01033674 E01033688 with 2 links ## 1 most connected region: ## E01033658 with 8 links This is basically telling us that using this criteria each LSOA polygon has an average of 4.3 neighbours (when we just focus on the city centre) and that all areas have some neighbours (there is no islands). The link number distribution gives you the number of links (neighbours) per area. So here we have 3 polygons with 2 neighbours, 3 with 3, 7 with 4, and so on. The summary function here also identifies the areas sitting at both extreme of the distribution. For more details we can look at the structure of w. str(w) ## List of 22 ## $ : int [1:4] 2 6 11 22 ## $ : int [1:5] 1 3 4 6 8 ## $ : int [1:5] 2 5 6 8 12 ## $ : int [1:3] 2 8 21 ## $ : int [1:7] 3 6 9 10 12 14 18 ## $ : int [1:6] 1 2 3 5 10 11 ## $ : int [1:3] 9 13 17 ## $ : int [1:6] 2 3 4 12 18 21 ## $ : int [1:8] 5 7 13 14 17 18 19 20 ## $ : int [1:4] 5 6 11 14 ## $ : int [1:4] 1 6 10 22 ## $ : int [1:4] 3 5 8 18 ## $ : int [1:3] 7 9 14 ## $ : int [1:4] 5 9 10 13 ## $ : int [1:4] 16 19 20 21 ## $ : int [1:2] 15 19 ## $ : int [1:2] 7 9 ## $ : int [1:6] 5 8 9 12 20 21 ## $ : int [1:4] 9 15 16 20 ## $ : int [1:5] 9 15 18 19 21 ## $ : int [1:5] 4 8 15 18 20 ## $ : int [1:2] 1 11 ## - attr(*, &quot;class&quot;)= chr &quot;nb&quot; ## - attr(*, &quot;region.id&quot;)= chr [1:22] &quot;E01005065&quot; &quot;E01005066&quot; &quot;E01005128&quot; &quot;E01005212&quot; ... ## - attr(*, &quot;call&quot;)= language poly2nb(pl = cc_burglary, row.names = cc_burglary$code) ## - attr(*, &quot;type&quot;)= chr &quot;queen&quot; ## - attr(*, &quot;snap&quot;)= num 9e-08 ## - attr(*, &quot;sym&quot;)= logi TRUE ## - attr(*, &quot;ncomp&quot;)=List of 2 ## ..$ nc : num 1 ## ..$ comp.id: num [1:22] 1 1 1 1 1 1 1 1 1 1 ... We can graphically represent the links using the following code: #We first plot the boundaries plot(st_geometry(cc_burglary), col=&#39;gray&#39;, border=&#39;blue&#39;, lwd=2) #Then we use the st_centroid and st_coordinates functions to obtain the coordinates of the polygon centroids xy &lt;- st_coordinates(st_centroid(cc_burglary)) ## Warning: st_centroid assumes attributes are constant over geometries #Then we draw lines between the polygons centroids for neighbours that are listed as linked in w plot(w, xy, col=&#39;red&#39;, lwd=2, add=TRUE) 7.5 Generating the weight matrix From this neighbourhood list we can specify our weight matrix. 7.5.1 Activity 4: Building a spatial weights matrix We can transform our neighbourhood list object w into a spatial weights matrix. A spatial weights matrix reflects the intensity of the geographic relationship between observations. For this we use the spdep function nb2mat(). wm &lt;- nb2mat(w, style=&#39;B&#39;) wm ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] ## E01005065 0 1 0 0 0 1 0 0 0 0 1 0 0 ## E01005066 1 0 1 1 0 1 0 1 0 0 0 0 0 ## E01005128 0 1 0 0 1 1 0 1 0 0 0 1 0 ## E01005212 0 1 0 0 0 0 0 1 0 0 0 0 0 ## E01033653 0 0 1 0 0 1 0 0 1 1 0 1 0 ## E01033654 1 1 1 0 1 0 0 0 0 1 1 0 0 ## E01033655 0 0 0 0 0 0 0 0 1 0 0 0 1 ## E01033656 0 1 1 1 0 0 0 0 0 0 0 1 0 ## E01033658 0 0 0 0 1 0 1 0 0 0 0 0 1 ## E01033659 0 0 0 0 1 1 0 0 0 0 1 0 0 ## E01033661 1 0 0 0 0 1 0 0 0 1 0 0 0 ## E01033662 0 0 1 0 1 0 0 1 0 0 0 0 0 ## E01033664 0 0 0 0 0 0 1 0 1 0 0 0 0 ## E01033667 0 0 0 0 1 0 0 0 1 1 0 0 1 ## E01033672 0 0 0 0 0 0 0 0 0 0 0 0 0 ## E01033673 0 0 0 0 0 0 0 0 0 0 0 0 0 ## E01033674 0 0 0 0 0 0 1 0 1 0 0 0 0 ## E01033677 0 0 0 0 1 0 0 1 1 0 0 1 0 ## E01033681 0 0 0 0 0 0 0 0 1 0 0 0 0 ## E01033682 0 0 0 0 0 0 0 0 1 0 0 0 0 ## E01033683 0 0 0 1 0 0 0 1 0 0 0 0 0 ## E01033688 1 0 0 0 0 0 0 0 0 0 1 0 0 ## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] ## E01005065 0 0 0 0 0 0 0 0 1 ## E01005066 0 0 0 0 0 0 0 0 0 ## E01005128 0 0 0 0 0 0 0 0 0 ## E01005212 0 0 0 0 0 0 0 1 0 ## E01033653 1 0 0 0 1 0 0 0 0 ## E01033654 0 0 0 0 0 0 0 0 0 ## E01033655 0 0 0 1 0 0 0 0 0 ## E01033656 0 0 0 0 1 0 0 1 0 ## E01033658 1 0 0 1 1 1 1 0 0 ## E01033659 1 0 0 0 0 0 0 0 0 ## E01033661 0 0 0 0 0 0 0 0 1 ## E01033662 0 0 0 0 1 0 0 0 0 ## E01033664 1 0 0 0 0 0 0 0 0 ## E01033667 0 0 0 0 0 0 0 0 0 ## E01033672 0 0 1 0 0 1 1 1 0 ## E01033673 0 1 0 0 0 1 0 0 0 ## E01033674 0 0 0 0 0 0 0 0 0 ## E01033677 0 0 0 0 0 0 1 1 0 ## E01033681 0 1 1 0 0 0 1 0 0 ## E01033682 0 1 0 0 1 1 0 1 0 ## E01033683 0 1 0 0 1 0 1 0 0 ## E01033688 0 0 0 0 0 0 0 0 0 ## attr(,&quot;call&quot;) ## nb2mat(neighbours = w, style = &quot;B&quot;) Starting from our neighbours list (w), in which regions are either listed as neighbours or are absent (thus not in the set of neighbours for some definition), the function creates an \\(n\\) by \\(n\\) weights matrix (where \\(n\\) is the number of neighbourhoods here) with values given by the coding scheme style chosen (specified with the style= parameter in the nb2mat() function. Here we specify this value as B which results in basic binary coding. That means that this matrix has values of 0 or 1 indicating whether the elements listed in the rows are adjacent (using our definition, which in this case was the Queen criteria) with each other. The diagonal is full of zeroes. This is because we exclude “self-influence” and specify that an area cannot be a neighbour of itself (formally \\(w_{ii} = 0\\) for all \\(i = 1,...,n\\)). Then, for each other cell, the matrix contains the “spatial influence” of unit \\(j\\) on unit \\(i\\). For example, the first column there is the first LSOA in our neighbour list object (w). Look back to when we printed the list of neighbours with the str(w) function, just above. You can see, for the first like the output was: $ : int [1:4] 2 6 11 22. So we see, this first LSOA has 4 neighbours, and these are the 2nd, 6th, 11th, and 22nd LSOAs. Sure enough, if you look across this first row in our weights matrix (wm), you will see that every value is a 0 except for four 1s, one at the 2nd column, one in the 6th, one in the 11th, and one in the 22nd. Here the 1 is telling us that yes, this is a neighbour (while 0s tell us no, these are not neighbours), as we used the binary coding scheme (style = 'B'). When our spatial weights matrix looks like this, it is symmetrical. That is the influence of one neighbour on the other is the same as it’s influence on that neighbourhood - if they neighbour, their influence is 1, if they do not, it is 0. 7.5.2 Activity 5: Row standardised spatial weights matrix So with binary coding scheme, we get a spatial influence of 1 if the LSOA is a neighbour, and 0 if it is not a neighbour. But we can also get more informative than that. In many computations we will see that the matrix is row standardised. We can obtain a row standardise matrix changing the style= parameter to style='W': wm_rs &lt;- nb2mat(w, style=&#39;W&#39;) wm_rs ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## E01005065 0.0000000 0.2500000 0.0000000 0.0000000 0.0000000 0.2500000 0.0000000 ## E01005066 0.2000000 0.0000000 0.2000000 0.2000000 0.0000000 0.2000000 0.0000000 ## E01005128 0.0000000 0.2000000 0.0000000 0.0000000 0.2000000 0.2000000 0.0000000 ## E01005212 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033653 0.0000000 0.0000000 0.1428571 0.0000000 0.0000000 0.1428571 0.0000000 ## E01033654 0.1666667 0.1666667 0.1666667 0.0000000 0.1666667 0.0000000 0.0000000 ## E01033655 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033656 0.0000000 0.1666667 0.1666667 0.1666667 0.0000000 0.0000000 0.0000000 ## E01033658 0.0000000 0.0000000 0.0000000 0.0000000 0.1250000 0.0000000 0.1250000 ## E01033659 0.0000000 0.0000000 0.0000000 0.0000000 0.2500000 0.2500000 0.0000000 ## E01033661 0.2500000 0.0000000 0.0000000 0.0000000 0.0000000 0.2500000 0.0000000 ## E01033662 0.0000000 0.0000000 0.2500000 0.0000000 0.2500000 0.0000000 0.0000000 ## E01033664 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333 ## E01033667 0.0000000 0.0000000 0.0000000 0.0000000 0.2500000 0.0000000 0.0000000 ## E01033672 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033673 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033674 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.5000000 ## E01033677 0.0000000 0.0000000 0.0000000 0.0000000 0.1666667 0.0000000 0.0000000 ## E01033681 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033682 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033683 0.0000000 0.0000000 0.0000000 0.2000000 0.0000000 0.0000000 0.0000000 ## E01033688 0.5000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## [,8] [,9] [,10] [,11] [,12] [,13] [,14] ## E01005065 0.0000000 0.0000000 0.0000000 0.2500000 0.0000000 0.0000000 0.0000000 ## E01005066 0.2000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01005128 0.2000000 0.0000000 0.0000000 0.0000000 0.2000000 0.0000000 0.0000000 ## E01005212 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033653 0.0000000 0.1428571 0.1428571 0.0000000 0.1428571 0.0000000 0.1428571 ## E01033654 0.0000000 0.0000000 0.1666667 0.1666667 0.0000000 0.0000000 0.0000000 ## E01033655 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.3333333 0.0000000 ## E01033656 0.0000000 0.0000000 0.0000000 0.0000000 0.1666667 0.0000000 0.0000000 ## E01033658 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1250000 0.1250000 ## E01033659 0.0000000 0.0000000 0.0000000 0.2500000 0.0000000 0.0000000 0.2500000 ## E01033661 0.0000000 0.0000000 0.2500000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033662 0.2500000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033664 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333 ## E01033667 0.0000000 0.2500000 0.2500000 0.0000000 0.0000000 0.2500000 0.0000000 ## E01033672 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033673 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033674 0.0000000 0.5000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033677 0.1666667 0.1666667 0.0000000 0.0000000 0.1666667 0.0000000 0.0000000 ## E01033681 0.0000000 0.2500000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033682 0.0000000 0.2000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033683 0.2000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 ## E01033688 0.0000000 0.0000000 0.0000000 0.5000000 0.0000000 0.0000000 0.0000000 ## [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] ## E01005065 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.25 ## E01005066 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.00 ## E01005128 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.00 ## E01005212 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.3333333 0.00 ## E01033653 0.00 0.00 0.0000000 0.1428571 0.000 0.0000000 0.0000000 0.00 ## E01033654 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.00 ## E01033655 0.00 0.00 0.3333333 0.0000000 0.000 0.0000000 0.0000000 0.00 ## E01033656 0.00 0.00 0.0000000 0.1666667 0.000 0.0000000 0.1666667 0.00 ## E01033658 0.00 0.00 0.1250000 0.1250000 0.125 0.1250000 0.0000000 0.00 ## E01033659 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.00 ## E01033661 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.25 ## E01033662 0.00 0.00 0.0000000 0.2500000 0.000 0.0000000 0.0000000 0.00 ## E01033664 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.00 ## E01033667 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.00 ## E01033672 0.00 0.25 0.0000000 0.0000000 0.250 0.2500000 0.2500000 0.00 ## E01033673 0.50 0.00 0.0000000 0.0000000 0.500 0.0000000 0.0000000 0.00 ## E01033674 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.00 ## E01033677 0.00 0.00 0.0000000 0.0000000 0.000 0.1666667 0.1666667 0.00 ## E01033681 0.25 0.25 0.0000000 0.0000000 0.000 0.2500000 0.0000000 0.00 ## E01033682 0.20 0.00 0.0000000 0.2000000 0.200 0.0000000 0.2000000 0.00 ## E01033683 0.20 0.00 0.0000000 0.2000000 0.000 0.2000000 0.0000000 0.00 ## E01033688 0.00 0.00 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.00 ## attr(,&quot;call&quot;) ## nb2mat(neighbours = w, style = &quot;W&quot;) Row standardisation of a matrix ensure that the sum of the values across each row add up to 1. So, for example, if you have four neighbours and that has to add up to 4, you need to divide 1 by 4, which gives you 0.25. So if we look back at our first row there, you can see in the 2nd, 6th, 11th, and 22nd column now a 0.25 instead of the 1 with the binary coding, representing the spatial influence for each of the neighbours. Row standardisation ensures that all weights are between 0 and 1. This facilities the interpretation of operation with the weights matrix as an averaging of neighboring values, and allows for the spatial parameter used in our analyses to be comparable between models. In this case our spatial weights matrix is not symmetrical. The spatial influence of one neighbourhood on the other depends on how many other neighbours it has. So for example, while the influence on LSOA 1 from LSOA 2 is 0.25 (since LSOA 1 has 4 neighbours), the influence of LSOA 1 on LSOA 2 is only 0.20, since LSOA 2 has 5 neighbours. 7.5.3 Activity 6: Spatial weights list Besides a spatial weights matrix, we can also have a spatial weights list. Before we can use the functions from spdep to compute the global Moran’s I we need to create a listw type spatial weights object (instead of the matrix we used above). To get the same value as above in the wm object, we use style='B' to use binary (TRUE/FALSE) distance weights. ww &lt;- nb2listw(w, style=&#39;B&#39;) ww ## Characteristics of weights list object: ## Neighbour list object: ## Number of regions: 22 ## Number of nonzero links: 96 ## Percentage nonzero weights: 19.83471 ## Average number of links: 4.363636 ## ## Weights style: B ## Weights constants summary: ## n nn S0 S1 S2 ## B 22 484 96 192 1888 7.6 Moran’s I The most well known measure of spatial autocorrelation is the Moran’s I. It was developed by Patrick Alfred Pierce Moran, an Australian statistician. You can find the formula and some explanation in the wikipedia article. The video lecture by Luc Anselin covers an explanation of Moran’s I. We strongly recommend you watch the video. You can also find helpful this link if things are still unclear. The formula you see may look intimidating but it is nothing but the formula for standard correlation expanded to incorporate the spatial weight matrix. $ I = * $ To compute this in R, we can use the moran() function. Have a look at ?moran to see a description of this in R. You will see the above formula but in code form: I = (n sum_i sum_j w_ij (x_i - xbar) (x_j - xbar)) / (S0 sum_i (x_i - xbar)^2). (Note: S0 is refers to the sum of the weights, which is also same as \\(\\sum_i \\sum_j w_{ij}\\)) 7.6.1 Activity 7: Calculate Moran’s I As the function is defined as moran(y, ww, n, Szero(ww)), we will need to add the arguments of x - our variable of interest, ww - our weights list, n - the number of observations, and S0 - the sum of the weights (note that when we have row standardised weights then S0 is the same as n, so actually that part can be ignored from the equation, but we still must supply this information). In order to supply this S0 we can use the Szero() function (in the spdep package) and pass to it our weights object (ww). You might think it odd to supply these parameters as they can be derived from the “ww” object which has that information. Anyway, we supply them and it works. There probably are cases where it makes sense to use other values. moran(cc_burglary$burglary, ww, n=length(ww$neighbours), S0=Szero(ww)) ## $I ## [1] 0.1342341 ## ## $K ## [1] 8.622859 So the Moran’s I here is 0.13, which is not very large. The Index is usually bounded by -1 and 1 (the exact bounds depend on the weights matrix used - when the matrix is row-standardised it will always be between -1 and 1), so 0.13 is not large, but it is still above zero, so we might want to explore whether this is significant using a test of statistical significance for this statistic. The Spatial Autocorrelation (Global Moran’s I) tool is an inferential statistic, which means that the results of the analysis are always interpreted within the context of its null hypothesis. For the Global Moran’s I statistic, the null hypothesis states that the attribute being analysed is randomly distributed among the features in your study area; said another way, the spatial processes promoting the observed pattern of values is random chance. Imagine that you could pick up the values for the attribute you are analysing and throw them down onto your features, letting each value fall where it may. This process (picking up and throwing down the values) is an example of a random chance spatial process. When the p-value returned by this tool is statistically significant, you can reject the null hypothesis. In some software you can use statistical tests invoking asymptotic theory, but like Luc Anselin mentions in his videos, the most appropriate way of doing these tests is by using a computational approach, such as a Monte Carlo procedure. The way Monte Carlo works is that the values of burglary are randomly assigned to the polygons, and the Moran’s I is computed. This is repeated several times to establish a distribution of expected values under the null hypothesis. The observed value of Moran’s I is then compared with the simulated distribution to see how likely it is that the observed values could be considered a random draw. If confused, watch this quick video on monte carlo simulations. We use the function moran.mc() to run a permutation test for Moran’s I statistic calculated by using some number of random permutations of our numeric vector, for the given spatial weighting scheme, to establish the rank of the observed statistic in relation to the simulated values. We need to specify our variable of interest (burglary), the listw object we created earlier (ww), and the number of permutations we want to run (here we choose 99). set.seed(1234) # The seed number you choose is the starting point used in the generation of a sequence of random numbers, which is why (provided you use the same pseudo-random number generator) you&#39;ll obtain the same results given the same seed number. burg_moranmc_results &lt;- moran.mc(cc_burglary$burglary, ww, nsim=99) burg_moranmc_results ## ## Monte-Carlo simulation of Moran I ## ## data: cc_burglary$burglary ## weights: ww ## number of simulations + 1: 100 ## ## statistic = 0.13423, observed rank = 90, p-value = 0.1 ## alternative hypothesis: greater So, the probability of observing this Moran’s I if the null hypothesis was true is 0.1. This is higher than our alpha level of 0.05. In this case, we can not reject our null hypothesis of spatial randomness, and must conclude that there isn’t a significant global spatial autocorrelation in our data. 7.6.2 Activity 8: Moran scatter plot We can make a “Moran scatter plot” to visualize spatial autocorrelation. Note the row standardisation of the weights matrix. rwm &lt;- mat2listw(wm, style=&#39;W&#39;) # Checking if rows add up to 1 (they should) mat &lt;- listw2mat(rwm) #This code is simply adding each row to see if we get one when we add their values up, we are only displaying the first 15 rows in the matrix apply(mat, 1, sum)[1:15] ## E01005065 E01005066 E01005128 E01005212 E01033653 E01033654 E01033655 E01033656 ## 1 1 1 1 1 1 1 1 ## E01033658 E01033659 E01033661 E01033662 E01033664 E01033667 E01033672 ## 1 1 1 1 1 1 1 Now we can plot: moran.plot(cc_burglary$burglary, rwm) The X axis represents the values of our burglary variable in each unit (each LSOA) and the Y axis represents a spatial lag of this variable. A spatial lag in this context is simply the weighted average value of the burglary count in the areas that are considered neighbours of each LSOA. So we are plotting the value of burglary against the weighted average value of burglary in the neighbours. And you can see the correlation is almost flat here. As with any correlation measure, you could get positive spatial autocorrelation, that would mean that as you move further to the right in the X axis you have higher levels of burglary in the surrounding area. This is what we see here. But the correlation is fairly low and as we saw is not statistically significant. You can also obtain negative spatial autocorrelation. That is, that would mean that areas with high level of crime tend (it’s all about the global average effect!) to be surrounded by areas with low levels of crime. This is clearly not what we see here. It is very important to understand that global statistics like the spatial autocorrelation (Global Moran’s I) tool assess the overall pattern and trend of your data. They are most effective when the spatial pattern is consistent across the study area. In other words, you may have clusters (local pockets of autocorrelation), without having clustering (global autocorrelation). This may happen if the sign of the clusters negate each other. But don’t just take our word for how important this is, or how it’s commonly applied in criminological research. Instead, now that you’ve gone through on how to do this, and have begun to get a sense of understanding, read the following paper on https://link.springer.com/article/10.1023/A:1007592124641 where the authors make use of Moran’s I to explain spatial characteristics of homicide. You will likely see this in other papers as well, and now you will know what it means and why it’s important. 7.7 Local spatial autocorrelation So now we know about global measures of spatial association, in particular the Moran’s I statistic, which provide a mechanism to make inferences about a population from a sample. While this is useful for us to be able to assess quantitatively whether crime events cluster in a non-random manner, in the words of Jerry Ratcliffe “this simply explains what most criminal justice students learn in their earliest classes.” For example, consider the study of robberies in Philadelphia: Aggregated to the police districts, this returns a global Moran’s I value (range 0 to 1) of 0.56, which suggests that there is clustering of robbery within police sectors. (Ratcliffe, Jerry. “Crime mapping: spatial and temporal challenges.” Handbook of quantitative criminology. Springer, New York, NY, 2010. 5-24.). While this should hardly be surprising given the above map, we as humans are likely to see patterns even if there aren’t any, and that is why these tests are helpful to verify (or disspell) our assumptions. But the global autocorrelation statistic only tells us about overall pattern, whether there is any clustering. It does not tell us about where this clustering is, or what it looks like (hotspots? cold spots? outliers?). In this section we will learn about local indicators of spatial association (LISA) and show how they allow for the decomposition of global indicators, such as Moran’s I, into the contribution of each observation. The LISA statistics serve two purposes. On one hand, they may be interpreted as indicators of local pockets of nonstationarity, or hot spots. On the other hand, they may be used to assess the influence of individual locations on the magnitude of the global statistic and to identify “outliers” (Anselin, Luc. “Local indicators of spatial association—LISA.” Geographical analysis 27.2 (1995): 93-115.). 7.7.1 Activity 9: Get data and weights for all Manchester To explore local indicators of spatial correlation, let’s go back to using all of Manchester, rather than just City Centre ward. We want to have enough data to see local variation, and while the code may take slightly longer to run, we can have a go at more meaningful stats. So this is our burglaries_per_lsoa object that we’re referring back to. To check what our data look like, we can always plot again with tmap: tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(burglaries_per_lsoa) + tm_fill(&quot;burglary&quot;, style = &quot;quantile&quot;, palette = &quot;Reds&quot;) + tm_borders(alpha = 0.1) + tm_layout(main.title = &quot;Burglary counts&quot;, main.title.size = 0.7 , legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8) Looks good! Now that we have the data we can generate the weight matrix. Again, what we do here is stuff we did above for the global correlation. In fact, if you did the optional homework already, you will also have run this code. #Generate list of neighbours using the Queen criteria w &lt;- poly2nb(burglaries_per_lsoa, row.names=burglaries_per_lsoa$code) #Generate list with weights using row standardisation ww &lt;- nb2listw(w, style=&#39;W&#39;) 7.7.2 Activity 10: Exploring a Local Indicator of Spatial Association: Local Moran’s I. To illustrate Local Indicators of Spatial association (LISA) we will demonstrate the example of the Local Moran’s I. The first step before we can generate this particular LISA map is to compute this local Moran’s I. The initial part of the video presentation by Luc Anselin that we expected you to watch explains the formula and logic underpinning these computations and we won’t reiterate here that detail. But at least a a general reminder: Global tests for spatial autocorrelation [introduced last week] are calculated from the local relationships between the values observed at a spatial entity and its neighbours, for the neighbour definition chosen. Because of this, we can break global measures down into their components, and by extension, construct localised testsintended to detect ‘clusters’ – observations with very similar neighbours –and ‘hotspots’ [spatial outliers] – observations with very different neighbours. (Bivand et al. 2008, highlights added) Let’s first look at the Moran’s scatterplot: moran.plot(burglaries_per_lsoa$burglary, ww) Notice how the plot is split in 4 quadrants. The top right corner belongs to areas that have high level of burglary and are surrounded by other areas that have above the average level of burglary. This are the high-high locations that Luc Anselin referred to. The bottom left corner belongs to the low-low areas. These are areas with low level of burglary and surrounded by areas with below average levels of burglary. Both the high-high and low-low represent clusters. A high-high cluster is what you may refer to as a hot spot. And the low-low clusters represent cold spots. In the opposite diagonal we have spatial outliers. They are not outliers in the standard sense, extreme observations, they are outliers in that they are surrounded by areas that are very unlike them. So you could have high-low spatial outliers, areas with high levels of burglary and low levels of surrounding burglary, or low-high spatial outliers, areas that have themselves low levels of burglary (or whatever else we are mapping) and that are surrounded by areas with above average levels of burglary. You can also see here that the positive spatial autocorrelation is more noticeable when we focus on the whole of Manchester city, unlike what we observed when only looked at the city centre. You can check this running the global Moran’s I. moran(burglaries_per_lsoa$burglary, ww, n=length(ww$neighbours), S0=Szero(ww)) ## $I ## [1] 0.3805359 ## ## $K ## [1] 29.6531 moran.mc(burglaries_per_lsoa$burglary, ww, nsim=99999) ## ## Monte-Carlo simulation of Moran I ## ## data: burglaries_per_lsoa$burglary ## weights: ww ## number of simulations + 1: 1e+05 ## ## statistic = 0.38054, observed rank = 1e+05, p-value = 1e-05 ## alternative hypothesis: greater You can see that the global Moran’s I statistic is 0.38 and that the pseudo p-value we generate with our computational Monte Carlo method is highly significant. There is indeed global spatial autocorrelation, when we look at all of Manchester (not just city centre ward). Knowing this we can try to decompose this, figure out what is driving this global measure. To compute the local Moran we can use a function from the spdep package. locm_bm &lt;- localmoran(burglaries_per_lsoa$burglary, ww) summary(locm_bm) ## Ii E.Ii Var.Ii Z.Ii ## Min. :-2.200079 Min. :-2.904e-01 Min. :0.000001 Min. :-5.61562 ## 1st Qu.:-0.006682 1st Qu.:-1.971e-03 1st Qu.:0.007952 1st Qu.:-0.05812 ## Median : 0.084961 Median :-8.279e-04 Median :0.039497 Median : 0.58237 ## Mean : 0.380536 Mean :-3.571e-03 Mean :0.149754 Mean : 0.58209 ## 3rd Qu.: 0.275671 3rd Qu.:-1.729e-04 3rd Qu.:0.119675 3rd Qu.: 1.13208 ## Max. :11.795065 Max. :-2.000e-08 Max. :6.249463 Max. : 6.46961 ## Pr(z != E(Ii)) ## Min. :0.0000 ## 1st Qu.:0.1889 ## Median :0.4300 ## Mean :0.4532 ## 3rd Qu.:0.7027 ## Max. :0.9955 The first column provides the summary statistic for the local moran statistic. Being local you will have one for each of the areas. The last column gives you a p value for this statistic. In order to produce the LISA map we need to do some previous work. First we are going to create some new variables that we are going to need: First we scale the variable of interest. When we scale burglary what we are doing is re-scaling the values so that the mean is zero. This is the process of computing a z-score, which you achieve through taking the value, subtracting the mean, and dividing by the standard deviation. See an explanation of what this does here. We can use scale(), which is a generic function whose default method centers and/or scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations: #scale the variable of interest and save it to a new column burglaries_per_lsoa$s_burglary &lt;- scale(burglaries_per_lsoa$burglary) %&gt;% as.vector() We’ve also added as.vector() to the end, to make sure that the data type we get out of this is a vector, that maps neatly into our dataframe. Now we also want to account for the spatial dependence of our values. Remember how we keep saying that “The First Law of Geography”, according to Waldo Tobler, is “everything is related to everything else, but near things are more related than distant things.” Seriously, we should all just tattoo this onto our foreheads because this is the key message of the module…! So what do we mean by this spatial dependence? When a value observed in one location depends on the values observed at neighbouring locations, there is a spatial dependence. And spatial data may show spatial dependence in the variables and error terms. Why should spatial dependence occur? There are two reasons commonly given. First, data collection of observations associated with spatial units may reflect measurement error. This happens when the boundaries for which information is collected do not accurately reflect the nature of the underlying process generating the sample data. A second reason for spatial dependence is that the spatial dimension of a social or economic characteristic may be an important aspect of the phenomenon. For example, based on the premise that location and distance are important forces at work, regional science theory relies on notions of spatial interaction and diffusion effects, hierarchies of place and spatial spillovers. There are two types of dependence, spatial error and spatial lag. Here we focus on spatial lag. Spatial lag is when the dependent variable y in place i is affected by the independent variables in both place i and j. This will be important to keep in mind when considering spatial regression. With spatial lag in ordinary least square regression, the assumption of uncorrelated error terms is violated, because near things will have associated error terms. Similarly, the assumption of independent observations is also violated, as the observations are influenced by the other observations near them. As a result, the estimates are biased and inefficient. Spatial lag is suggestive of a possible diffusion process – events in one place predict an increased likelihood of similar events in neighboring places. So to be able to account for the spatial lag in our model, we must create a variable to account for this. We can do this with the lag.listw() function. Remember: a spatial lag in this context is simply the average value of the burglary count in the areas that are considered neighbours of each LSOA. So we are plotting the value of burglary against the average value of burglary in the neighbours. For this we need our listw object, which is the ww object created earlier, when we generated the list with weights using row standardisation. We then pass this listw object into the lag.listw() function, which computes the spatial lag of a numeric vector using a listw sparse representation of a spatial weights matrix. #create a spatial lag variable and save it to a new column burglaries_per_lsoa$lag_s_burglary &lt;- lag.listw(ww, burglaries_per_lsoa$s_burglary) Make sure to check the summaries to ensure nothing weird is going on summary(burglaries_per_lsoa$s_burglary) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -1.1330 -0.5676 -0.2196 0.0000 0.2588 9.0013 summary(burglaries_per_lsoa$lag_s_burglary) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -0.85757 -0.37622 -0.13265 0.05835 0.23706 2.85981 We can create a Moran scatter plot so that you see that nothing has changed apart from the scale in which we are using the variables. The observations that are influential are highlighted in the plot as you can see. x &lt;- burglaries_per_lsoa$s_burglary y &lt;- burglaries_per_lsoa$lag_s_burglary xx &lt;- tibble(x,y) moran.plot(x, ww) We are now going to create a new variable to identify the quadrant in which each observation falls within the Moran Scatter plot, so that we can tell apart the high-high, low-low, high-low, and low-high areas. We will only identify those that are significant according to the p value that was provided by the local moran function. Before we get started, let’s quickly review the tools we will use. All our data is in this burglaries_per_lsoa object. This has a variable for the LSOA code (code), a variable for the number of burglaries (burglary), and then also the two variables we created, the scaled measure of burglary (s_burglary), and the spatial lag measure (lag_s_burglary). We also have our locm_bm object, which we created with the localmoran() function, that has calculated a variety of measures for each of our observations, which we explored with the summary() function. You can see (if you scroll up) that the 5th element in this object is the p-value (“Pr(z &gt; 0)”). To call the nth element of an object, you can use the square brackets after its name. So to return the nth column of thing, you can use thing[,n]. Again this should not be new to you, as we’ve been doing this sort of thing for a while. So the data we need for each observation, in order to identify whether it belongs to the high-high, low-low, high-low, or low-high quadrants are the standardised burglary score, the spatial lag score, and the p-value. Essentially all we’ll be doing, is assigning a variable values based on where in the plot it is. So for example, if it’s in the upper right, it is high-high, and has values larger than 0 for both the burglary and the spatial lag values. If it’s in the upper left, it’s low-high, and has a value larger than 0 for the spatial lag value, but lower than 0 on the burglary value. And so on, and so on. Here’s an image to illustrate: So let’s first initialise this variable. In this instance we are creating a new column in the burglaries_per_lsoa dataframe and calling it quad_sig. We are using the mutate() function from the dplyr package to create our new variable, just as we have in previous labs. We also use nested ifelse() statements. Nested ifelse() just means that it’s an ifelse() inside another ifelse() statement. To help us with these sorts of situations is the ifelse() function. We saw this with the previous exercises, but I’ll describe it brielfy again. It allows us to conditionally assign some value to some variable. The structure of the function is so that you have to pass it a condition, then a value to assign if the condition is true, and then another value if the condition is false. You are basically using this function to say: “if this condition is true, do first thing, else, do the second thing”. It would look something like this: dataframe$new_variable &lt;- ifelse(dataframe$some_numeric_var &lt; 100, &quot;smaller than 100&quot;, &quot;not smaller than 100&quot;) When nesting these, all you do is put another condition to check in the “thing to do if false”, so it checks all conditions. So in the first instance we check if the value for burglary is greater than zero, and the value for the lag is greater than zero, and the p-value is smaller than our threshold of 0.05. If it is, then this should belong to the “high-high” group. If any one of these conditions is not met, then we move into the ‘thing to do if false’ section, where we now check again another set of criteria, and so on and so on. If none of these are met, we assign it the non-significant value: burglaries_per_lsoa &lt;- burglaries_per_lsoa %&gt;% mutate(quad_sig = ifelse(s_burglary &gt; 0 &amp; lag_s_burglary &gt; 0 &amp; locm_bm[,5] &lt;= 0.05, &quot;high-high&quot;, ifelse(s_burglary &lt;= 0 &amp; lag_s_burglary &lt;= 0 &amp; locm_bm[,5] &lt;= 0.05, &quot;low-low&quot;, ifelse(s_burglary &gt; 0 &amp; lag_s_burglary &lt;= 0 &amp; locm_bm[,5] &lt;= 0.05, &quot;high-low&quot;, ifelse(s_burglary &lt;= 0 &amp; lag_s_burglary &gt; 0 &amp; locm_bm[,5] &lt;= 0.05, &quot;low-high&quot;, &quot;non-significant&quot;))))) Now we can have a look at what this returns us: table(burglaries_per_lsoa$quad_sig) ## ## high-high low-high low-low non-significant ## 25 10 1 245 This looks like a lot of non-significant results. We want to be sure this isn’t an artifact of our code but is true, we can check how many values are under 0.05: nrow(locm_bm[locm_bm[,5] &lt;= 0.05,]) ## [1] 36 We can see that only 36 areas have p-values under 0.05 threshold. So this is in line with our results, and we can rest assured. Well, this is exciting, but where are these regions? Let’s put ’em on a map, just simply, using quick thematic map (qtm()): qtm(burglaries_per_lsoa, fill=&quot;quad_sig&quot;, fill.title=&quot;LISA&quot;) ## Some legend labels were too wide. These labels have been resized to 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. Very nice! So how do we interpret these results? Well keep in mind: The LISA value for each location is determined from its individual contribution to the global Moran’s I calculation. Whether or not this value is statistically significant is assessed by comparing the actual value to the value calculated for the same location by randomly reassigning the data among all the areal units and recalculating the values each time (the Monte Carlo simulation approach discussed earlier). So essentially this map now tells us that there was statistically significant moderate clustering in burglaries in Manchester. When reporting your results, report at least the Moran’s I test value and the p value. So, for this test, you should report Moran’s I = 0.32, p &lt; .001. Including the LISA cluster map is also a great way of showing how the attribute is actually clustering. "],["regression-analysis-a-refresher.html", "Chapter 8 Regression analysis (a refresher) 8.1 Introduction 8.2 Motivating regression 8.3 Fitting a simple regression model 8.4 Residuals revisited: R squared 8.5 Inference with regression 8.6 Fitting regression with categorical predictors 8.7 Motivating multiple regression 8.8 Fitting and interpreting a multiple regression model 8.9 Presenting your regression results. 8.10 Rescaling input variables to assist interpretation 8.11 Testing conditional hypothesis: interactions 8.12 Model building and variable selection 8.13 Regression assumptions", " Chapter 8 Regression analysis (a refresher) 8.1 Introduction In science one of our main concerns is to develop models of the world, models that help us to understand the world a bit better or to predict how things will develop better. You can read more about modelling in scientific research here. Statistics provides a set of tools that help researchers build and test scientific models. Our models can be simple. We can think that unemployment is a factor that may help us to understand why cities differ in their level of violent crime. We could express such a model like this: Surely we know the world is complex and likely there are other things that may help us to understand why some cities have more crime than others. So, we may want to have tools that allow us to examine such models. Like, for example, the one below: In this session we are going to cover regression analysis or, rather, we are beginning to talk about regression modelling. Some experience with data analysis modules is a pre-requisite for this module, so it is likely you have learned this in those courses, but just for the sake of those who may be a bit rusty, we will have this refresher here. We’ll be making use of the following packages: readr ggplot2 arm sjPlot effects lmtest car olsrr Regression has been one the main technique of data analysis in the social sciences for many years and it belongs to a family of techniques called generalised linear models. Regression is a flexible model that allows you to “explain” or “predict” a given outcome (Y), variously called your outcome, response or dependent variable, as a function of a number of what is variously called inputs, features or independent, explanatory, or predictive variables (X1, X2, X3, etc.). Following Gelman and Hill (2007), we will try to stick for the most part to the terms outputs and inputs. Today we will cover linear regression or ordinary least squares regression (OLS), which is a technique that you use when you are interested in explaining variation in an interval level variable. First we will see how you can use regression analysis when you only have one input and then we will move to situations when we have several explanatory variables or inputs. For those of you already familiar with regression analysis this session can be a bit of a refresher, for those that aren’t a bit of an introduction. Today we will cover regression models more generally and in the next lab we will discuss adaptations to the regression model that are necessary when you have spatial autocorrelation. 8.1.1 Activity 1: Getting some homicide data We will use a dataset that includes information about homicides in the US, as well as information in a number of sociodemographic variables that are often thought of as associated with the geographical distribution of homicides. As always, you can download the data from the webpage or it is available on blackboard under the data tab for this week’s learning materials. Is is the file NAT.csv inside the ncovr.zip file (remember you’ll have to extract the zip folder first!). ncovr &lt;- read_csv(&quot;https://www.dropbox.com/s/zhn66q5y46dontn/NAT.csv?dl=1&quot;) ## Rows: 3085 Columns: 69 ## ── Column specification ───────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (5): NAME, STATE_NAME, STATE_FIPS, CNTY_FIPS, FIPS ## dbl (64): STFIPS, COFIPS, FIPSNO, SOUTH, HR60, HR70, HR80, HR90, HC60, HC70,... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #or, use your local path ncovr &lt;- read_csv(&#39;data/ncovr/NAT.csv&#39;) ## Rows: 3085 Columns: 69 ## ── Column specification ───────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (5): NAME, STATE_NAME, STATE_FIPS, CNTY_FIPS, FIPS ## dbl (64): STFIPS, COFIPS, FIPSNO, SOUTH, HR60, HR70, HR80, HR90, HC60, HC70,... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. The dataset contains information about 3085 counties in the US and if you view it you will see it has information about several decades, the 60s, 70s, 80s, and 90s. The number at the end of the variable names denotes the relevant decade and you will see that for each decade we have the same variables. The purpose of this and next session is to help you choose a model to represent the relationship between homicide and various predictors. You can think of a model as a map. A map aims to represent a given reality, but as you may have already discovered there are many ways of presenting the same information through a map. As an analyst you decide what the most appropriate representation for your needs is. Each representation you choose will involve an element of distortion. Maps (and models) are not exact representations of the real word, they are simply good approximations that may serve well a particular functional need. They may not be terribly good reflections of the world, but may give us approximations that allows us to develop useful insights. Choosing a good model is like choosing a good way for displaying quantitative information in a map. Decisions, decisions, decisions. There are many parameters and options one can choose from. This can be overwhelming, particularly as you are learning how to model and map phenomena. How to make good decisions is something that you learn on earnest by practice, practice, practice. Nobody expects you to get the maps you are doing as you are learning, and the models you are developing as you are learning spot on. So please do not stress out about this. All we can do here is to learn some basic principles and start getting some practice, which you will be able to further develop in a professional context or in further training. 8.1.2 Activity 2: Familiarise yourself with the data The first step in any analysis is to develop some familiarity with the data you are going to be working with. We have been here before. Read the codebook. Run summary statistics for your quantitative variables, frequency distributions for your categorical variables, and visualise your variables. This will help you to detect any anomalies and give you a sense for what you have. If, for example, you run a histogram for the homicide rate for 1990 (HR90), you will get a sense of the distribution form –which of course is skewed. ggplot(ncovr, aes(x = HR90)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. We can also look at other variables in our data set. You may wish to use the skim() function from the skimr package maybe, which we introduced all the way back in the first lab!. Once one has gone through the process of exploring the data in this way for all the variables you want to work with, you can start exploring bivariate associations with your dependent variable (also called response or outcome variable). In this case, our outcome variable is homicide rate in the 90s, which we explored in the histogram above (HR90). As an illustration, you could explore the association with resource deprivation (RD90), a measure of the level of concentrated disadvantage or social exclusion in an area, via a scatterplot: ggplot(ncovr, aes(x = RD90, y = HR90)) + geom_point(alpha=.2) What do you think when looking at this scatterplot? Is there a relationship between the variables? Does it look as if individuals that have a high score on the X axis also have a high score on the Y axis? Or viceversa? 8.2 Motivating regression 8.2.1 Activity 3: Guessing games Now, imagine that we play a game. Imagine we have all the respondents waiting in a room, and we randomly call one of them to the stage. You’re sitting in the audience, so that might be you! Well now we ask you to guess the level of homicide (HR90) for a randomly chosen county in the data set. Imagine that we pay £150 to the respondent that gets the closest to the right value. What would you guess if you only have one guess and you knew (as we do) how homicide in the 90s is distributed? ggplot(ncovr, aes(x = HR90)) + geom_density() + geom_vline(xintercept = median(ncovr$HR90), linetype = &quot;dashed&quot;, linewidth = 1, color=&quot;red&quot;) + # median = 4.377 geom_vline(xintercept = mean(ncovr$HR90), linetype = &quot;dashed&quot;, linewidth = 1, color=&quot;blue&quot;) + # mean = 6.183 ggtitle(&quot;Density estimate, mean and median of homicide rate 1990&quot;) summary(ncovr$HR90) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.334 4.377 6.183 8.938 71.378 If you only had one shot, you could go for the median, in red, (given the skew) but the mean, in blue, perhaps would be your second best. Most of observations are clustered around those two values, which is another way of saying they are bound to be not too far from them. Imagine, however, that now when someone is called to the stage, you are told the resource deprivation level of the county, for example, the resource deprivation score = 4 and ask your expectation on the HR90 value of the country. Would you still go for the value of “4.377 (the median of HR90)” as your best guess for the value of the selected county? I certainly would not go with the overall mean or median as my prediction anymore. If somebody said to me, the value RD90 for the selected respondent is 4, we would be more inclined to guess the mean value for the level of homicide with that level of resource deprivation (the conditional mean), rather than the overall mean across all the counties. Wouldn’t you? If we plot the conditional means we can see that the mean of homicide rate for counties that report a value of 4 in RD90 is around 22. So you may be better off guessing that. ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this ## warning was generated. Linear regression tackles this problem using a slightly different approach. Rather than focusing on the conditional mean (smoothed or not), it draws a straight line that tries to capture the trend in the data. If we focus in the region of the scatterplot that are less sparse we see that this is an upward trend, suggesting that as resource deprivation increases so does the homicide rate. Simple linear regression draws a single straight line of predicted values as the model for the data. This line would be a model, a simplification of the real world like any other model (e.g., a toy pistol, an architectural drawing, a subway map), that assumes that there is approximately a linear relationship between X and Y. Let’s draw the regression line: ggplot(data = ncovr, aes(x = RD90, y = HR90)) + geom_point(alpha = .2) + geom_smooth(method = &quot;lm&quot;, se = FALSE, color = &quot;red&quot;, size = 1) #This ask for a geom with the regression line, method=lm asks for the linear regression line, se=FALSE ask for just the line to be printed but not the standard error, the other arguments specify the color and thickness of the line ## `geom_smooth()` using formula = &#39;y ~ x&#39; What that line is doing is giving you guesses (predictions) for the values of homicide based in the information that we have about the level of resource deprivation. It gives you one possible guess for the value of homicide for every possible value of resource deprivation and links them all together in a straight line. The linear model then is a model that takes the form of the equation of a straight line through the data. The line does not go through all the points. In fact, you can see that it is a slightly less accurate representation of the (smoothed) conditional means: Our regression line underpredicts at low levels of resource deprivation and does not seem to capture well the variability at higher levels of resource deprivation. But imperfect as a model as it might be it simplifies well the overall growing trend for homicide as resource deprivation increases. As De Veaux et al (2012: 179) highlight: “like all models of the real world, the line will be wrong, wrong in the sense that it can’t match reality exactly. But it can help us understand how the variables are associated”. A map is never a perfect representation of the world, the same happens with statistical models. Yet, as with maps, models can be helpful. 8.3 Fitting a simple regression model In order to draw a regression line (or in fact any line in a Cartesian coordinate system) we need to know two things: We need to know where the line begins, what is the value of Y (our dependent variable) when X (our independent variable) is 0, so that we have a point from which to start drawing the line. The technical name for this point is the intercept. And we need to know the slope of that line, that is, how inclined the line is, the angle of the line. If you recall from elementary algebra (and you may not), the equation for any straight line is: \\(y = m*x + b\\) In statistics we use a slightly different notation, although the equation remains the same: \\(y = \\beta_0 + \\beta_1*x\\) We need the origin of the line (\\(\\beta_0\\)) and the slope of the line (\\(\\beta_1\\)). How does R get the intercept and the slope for the red line? How does R know where to draw this line? We need to estimate these parameters (or coefficients) from the data. How? We don’t have the time to get into these more mathematical details now. You should study the required reading to understand this (required means it is required, it is not optional)1. For now, suffice to say that for linear regression models like the one we cover here, when drawing the line, R tries to minimise the distance from every point in the scatterplot to the regression line using a method called least squares estimation. 8.3.1 Activity 4: Regressing homicide rate on deprivation score Let’s apply this to the example of our data - looking at the relationship between homicide rate and deprivation score. In order to fit the model we use the lm() function using the formula specification \\((Y \\sim X)\\). Typically you want to store your regression model in an object, let’s call it fit_1: fit_1 &lt;- lm(HR90 ~ RD90, data = ncovr) You will see in your R Studio global environment space that there is a new object called fit_1 with 12 elements on it. We can get a sense for what this object is and includes using the functions we introduced in previous weeks: class(fit_1) ## [1] &quot;lm&quot; attributes(fit_1) ## $names ## [1] &quot;coefficients&quot; &quot;residuals&quot; &quot;effects&quot; &quot;rank&quot; ## [5] &quot;fitted.values&quot; &quot;assign&quot; &quot;qr&quot; &quot;df.residual&quot; ## [9] &quot;xlevels&quot; &quot;call&quot; &quot;terms&quot; &quot;model&quot; ## ## $class ## [1] &quot;lm&quot; R is telling us that this is an object of class lm and that it includes a number of attributes. One of the beauties of R is that you are producing all the results from running the model, putting them in an object, and then giving you the opportunity for using them later on. If you want to simply see the basic results from running the model you can use the summary() function. summary(fit_1) ## ## Call: ## lm(formula = HR90 ~ RD90, data = ncovr) ## ## Residuals: ## Min 1Q Median 3Q Max ## -17.796 -3.415 -0.719 2.540 67.103 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.18286 0.09844 62.81 &lt;2e-16 *** ## RD90 3.77121 0.09846 38.30 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.468 on 3083 degrees of freedom ## Multiple R-squared: 0.3224, Adjusted R-squared: 0.3222 ## F-statistic: 1467 on 1 and 3083 DF, p-value: &lt; 2.2e-16 Or if you prefer more parsimonious presentation you could use the display() function of the arm package: arm::display(fit_1) ## lm(formula = HR90 ~ RD90, data = ncovr) ## coef.est coef.se ## (Intercept) 6.18 0.10 ## RD90 3.77 0.10 ## --- ## n = 3085, k = 2 ## residual sd = 5.47, R-Squared = 0.32 For now we just want you to focus on the numbers in the “Estimate” (or coef.est) column. The value of 6.18 estimated for the intercept is the “predicted” value for Y when X equals zero. This is the predicted value of the homicide rate when resource deprivation has a value of zero. summary(ncovr$RD90) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -2.4103 -0.6667 -0.2016 0.0000 0.4393 5.5831 RD90 is a variable that has been centered in 0. It has been created by the researchers in such a way that it has a mean value of 0. Since we only have one explanatory variable in the model this corresponds to the mean of the homicide rate, 6.18. In many other contexts the intercept has less of a meaning. We then need the \\(\\beta_1\\) regression coefficient for our independent variable, the value that will shape the slope in this scenario. This value is 3.77. This estimated regression coefficient for our independent variable has a convenient interpretation. When the value is positive, it tells us that for every one unit increase in X there is a \\(\\beta_1\\) increase on Y. If the coefficient is negative then it represents a decrease on Y. Here, we can read it as “for every one unit increase in the resource deprivation score, there is a 3.77 unit increase in the homicide rate.” Knowing these two parameters not only allows us to draw the line, we can also solve for any given value of X. Let’s go back to our guess-the-homicide-rate game. Imagine we tell you the level of resource deprivation is 1. What would be your best bet now? We can simply go back to our regression line equation and insert the estimated parameters: \\(y = \\beta_0 + \\beta_1x\\) \\(y = 6.18 + 3.77 \\times 1\\) \\(y = 9.95\\) Or if you don’t want to do the calculation yourself, you can use the predict function (differences are due to rounding error): predict(fit_1, data.frame(RD90 = c(1))) #First you name your stored model and then you identify the new data (which has to be in a data frame format and with a variable name matching the one in the original data set) ## 1 ## 9.954065 This is the expected value of Y, homicide rate, when X, resource deprivation is 1 according to our model (according to our simplification of the real world, our simplification of the whole cloud of points into just one straight line). Look back at the scatterplot we produced earlier with the red line. Does it look as if the red line when X is 1 corresponds to a value of Y of 9.95? 8.4 Residuals revisited: R squared In the output above we saw there was something called the residuals. The residuals are the differences between the observed values of Y for each case minus the predicted or expected value of Y, in other words the distances between each point in the dataset and the regression line (see the visual example below). You see that we have our line, which is our predicted values, and then we have the black dots which are our actually observed values. The distance between them is essentially the amount by which we were wrong, and all these distances between observed and predicted values are our residuals. Least square estimation essentially aims to reduce the average of the squares of all these distances: that’s how it draws the line. Why do we have residuals? Well, think about it. The fact that the line is not a perfect representation of the cloud of points makes sense, doesn’t it? You cannot predict perfectly what the value of Y is for every observation just by looking ONLY at their level of resource deprivation! This line only uses information regarding resource deprivation. This means that there’s bound to be some difference between our predicted level of homicide given our knowledge of deprivation (the regression line) and the actual level of homicide (the actual location of the points in the scatterplot). There are other things that matter not being taken into account by our model to predict the values of Y. There are other things that surely matter in terms of understanding homicide. And then, of course, we have measurement error and other forms of noise. We can re-write our equation like this if we want to represent each value of Y (rather than the predicted value of Y) then: \\(y = \\beta_0 + \\beta_1x + e(residuals)\\) The residuals capture how much variation is unexplained, how much we still have to learn if we want to understand variation in Y. A good model tries to maximise explained variation and reduce the magnitude of the residuals. We can use information from the residuals to produce a measure of effect size, of how good our model is in predicting variation in our dependent variables. Remember our game where we try to guess homicide (Y)? If we did not have any information about X our best bet for Y would be the mean of Y. The regression line aims to improve that prediction. By knowing the values of X we can build a regression line that aims to get us closer to the actual values of Y (look at the Figure below). The distance between the mean (our best guess without any other piece of information) and the observed value of Y is what we call the total variation. The residual is the difference between our predicted value of Y and the observed value of Y. This is what we cannot explain (i.e. variation in Y that is unexplained). The difference between the mean value of Y and the expected value of Y (the value given by our regression line) is how much better we are doing with our prediction by using information about X (i.e. in our previous example it would be variation in Y that can be explained by knowing about resource deprivation). How much closer the regression line gets us to the observed values. We can then contrast these two different sources of variation (explained and unexplained) to produce a single measure of how good our model is. The formula is as follows: \\(R^2 = \\dfrac{SSR}{SST} = \\dfrac{\\Sigma(\\hat y_i - \\bar y )^2}{\\Sigma(y_i - \\bar y )^2}\\) All this formula is doing is taking a ratio of the explained variation (the squared differences between the regression line and the mean of Y for each observation) by the total variation (the squared differences of the observed values of Y for each observation from the mean of Y). This gives us a measure of the percentage of variation in Y that is “explained” by X. If this sounds familiar is because it is a measure similar to eta squared (\\(\\eta^2\\)) in ANOVA. 8.4.1 Activity 5: Residuals for our homicide rate model Now then we can take this value as a measure of the strength of our model. If you look at the R output you will see that the \\(R^2\\) for our model was .32 (look at the multiple R square value in the output). We can say that our model explains 32% of the variance in homicide. When doing regression, you will often find that regression models with aggregate data such as county level data will give you better results than when dealing with individuals. It is much harder understanding individual variation than county level variation. #As an aside, and to continue emphasising your appreciation of the object oriented nature of R, when we run the summary() function we are simply generating a list object of the class summary.lm. attributes(summary(fit_1)) ## $names ## [1] &quot;call&quot; &quot;terms&quot; &quot;residuals&quot; &quot;coefficients&quot; ## [5] &quot;aliased&quot; &quot;sigma&quot; &quot;df&quot; &quot;r.squared&quot; ## [9] &quot;adj.r.squared&quot; &quot;fstatistic&quot; &quot;cov.unscaled&quot; ## ## $class ## [1] &quot;summary.lm&quot; #This means that we can access its elements if so we wish. So, for example, to obtain just the R Squared, we could ask for: summary(fit_1)$r.squared ## [1] 0.3224335 Knowing how to interpret this is important. \\(R^2\\) ranges from 0 to 1. The greater it is the more powerful our model is, the more explaining we are doing, the better we are able to account for variation in our outcome Y with our input. In other words, the stronger the relationship is between Y and X. As with all the other measures of effect size, interpretation is a matter of judgement. You are advised to see what other researchers report in relation to the particular outcome that you may be exploring. Weisburd and Britt (2009: 437) suggest that in criminal justice you rarely see values for \\(R^2\\) greater than .40. Thus, if your \\(R^2\\) is larger than .40, you can assume you have a powerful model. When, on the other hand, \\(R^2\\) is lower than .15 or .2 the model is likely to be viewed as relatively weak. Our observed r squared here is rather poor. There is considerable room for improvement if we want to develop a better model to explain fear of violent crime2. In any case, many people would argue that \\(R^2\\) is a bit overrated. You need to be aware of what it measures and the context in which you are using it. Read here for some additional detail. 8.5 Inference with regression In real applications, we have access to a set of observations from which we can compute the least squares line, but the population regression line is unobserved. So our regression line is one of many that could be estimated. A different sample would produce a different regression line. The same sort of ideas that we introduced when discussing the estimation of sample means or proportions also apply here. if we estimate \\(\\beta_0\\) and \\(\\beta_1\\) from a particular sample, then our estimates won’t be exactly equal to \\(\\beta_0\\) and \\(\\beta_1\\) in the population. But if we could average the estimates obtained over a very large number of data sets, the average of these estimates would equal the coefficients of the regression line in the population. We can compute standard errors for the regression coefficients to quantify our uncertainty about these estimates. These standard errors can in turn be used to produce confidence intervals. This would require us to assume that the residuals are normally distributed. As seen in the image, and for a simple regression model, you are assuming that the values of Y are approximately normally distributed for each level of X: In those circumstances we can trust the confidence intervals that we can draw around the regression line as in the image below: The dark-blue line marks the best fit. The two dark-pink lines mark the limits of the confidence interval. The light-pink lines show the sampling distributions around each of the confidence-interval limits (the many regression lines that would result from repeated sampling); notice that the best-fit line falls at the extreme of each sampling distribution. You can also then perform a standard hypothesis test on the coefficients. As we saw before when summarising the model, R will compute the standard errors and a t test for each of the coefficients. summary(fit_1)$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.182860 0.09844166 62.80735 0.000000e+00 ## RD90 3.771206 0.09845761 38.30283 6.535551e-263 In our example, we can see that the coefficient for our predictor here is statistically significant3. We can also obtain confidence intervals for the estimated coefficients using the confint() function: confint(fit_1) ## 2.5 % 97.5 % ## (Intercept) 5.989842 6.375877 ## RD90 3.578156 3.964255 8.6 Fitting regression with categorical predictors So far we have explained regression using a numeric input. It turns out we can also use regression with categorical explanatory variables. It is quite straightforward to run it. 8.6.1 Activity 6: Homicide rates in the South v the North There is only one categorical explanatory variable in this dataset, a binary indicator that indicates whether the county is in a Southern State or not. We can also explore this relationship using regression and a regression line. This is how you would express the model: #We use the as.factor function to tell R that SOUTH is a categorical variable fit_2 &lt;- lm(HR90 ~ as.factor(SOUTH), data=ncovr) Notice that there is nothing different in how we ask for the model. And see below the regression line: Although in the plot we still see a line, what we are really estimating here is the average of HR90 for each of the two categories. Let’s have a look at the results: summary(fit_2) ## ## Call: ## lm(formula = HR90 ~ as.factor(SOUTH), data = ncovr) ## ## Residuals: ## Min 1Q Median 3Q Max ## -9.549 -3.342 -1.172 1.931 68.036 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.3416 0.1437 23.25 &lt;2e-16 *** ## as.factor(SOUTH)1 6.2077 0.2124 29.22 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.878 on 3083 degrees of freedom ## Multiple R-squared: 0.2169, Adjusted R-squared: 0.2167 ## F-statistic: 854 on 1 and 3083 DF, p-value: &lt; 2.2e-16 As you will see the output does not look too different. But notice that in the print out you see how the row with the coefficient and other values for our input variable SOUTH we see that R is printing 1. What does this mean? It turns out that a linear regression model with just one dichotomous categorical predictor is just the equivalent of a t test. When you only have one predictor the value of the intercept is the mean value of the reference category and the coefficient for the slope tells you how much higher (if it is positive) or how much lower (if it is negative) is the mean value for the other category in your factor. The reference category is the one for which R does not print the level next to the name of the variable for which it gives you the regression coefficient. Here we see that the named level is “1”. That’s telling you that the reference category here is “0”. If you look at the codebook you will see that 1 means the county is in a Southern state. Therefore the Y intercept in this case is the mean value of fear of violent crime for the northern counties, whereas the coefficient for the slope is telling you how much higher (since it is a positive value) the mean value is for the southern counties. Don’t believe me? mean(ncovr$HR90[ncovr$SOUTH == 0], na.rm=TRUE) ## [1] 3.341614 mean(ncovr$HR90[ncovr$SOUTH == 1], na.rm=TRUE) - mean(ncovr$HR90[ncovr$SOUTH == 0], na.rm=TRUE) ## [1] 6.207679 So, to reiterate, for a binary predictor, the coefficient is nothing else than the difference between the mean of the two levels in your factor variable, between the averages in your two groups. With categorical variables encoded as factors you always have a situation like this: a reference category and then as many additional coefficients as there are additional levels in your categorical variable. Each of these additional categories is included into the model as “dummy” variables. Here our categorical variable has two levels, thus we have only one dummy variable. There will always be one fewer dummy variable than the number of levels. The level with no dummy variable, northern counties in this example, is known as the reference category or the baseline. It turns out then that the regression table is printing out for us a t test of statistical significance for every input in the model. If we look at the table above this t value is 29.22 and the p value associated with it is near 0. This is indeed considerably lower than the conventional significance level of 0.05. So we could conclude that the probability of obtaining this value if the null hypothesis is true is very low. The r squared is not too bad either, although lower than we saw when using resource deprivation. 8.7 Motivating multiple regression So we have seen that we can fit models with just one predictor. We can build better models by expanding the number of predictors (although keep in mind you should also aim to build models as parsimonious (i.e. as simply) as possible). Another reason why it is important to think about additional variables in your model is to control for spurious correlations (although here you may also want to use your common sense when selecting your variables!). You must have heard before that correlation does not equal causation. Just because two things are associated we cannot assume that one is the cause of the other. Typically we see how the pilots switch the secure the seatbelt button when there is turbulence. These two things are associated, they tend to come together. But the pilots are not causing the turbulence by pressing a switch! The world is full of spurious correlations, associations between two variables that should not be taken too seriously. You can explore a few here. It’s funny. Looking only at covariation between a pair of variables can be misleading. It may lead you to conclude that a relationship is more important than it really is. This is no trivial matter, it’s one of the most important ones we confront in research and policy4. It’s not an exaggeration to say that most quantitative explanatory research is about trying to control for the presence of confounders, variables that may explain away observed associations. Think about any criminology question: Does marriage reduces crime? Or is it that people that get married are different from those that don’t (and are those pre-existing differences associated with less crime)? Do gangs lead to more crime? Or is it that young people that join gangs are more likely to be offenders to start with? Are the police being racist when they stop and search more members of ethnic minorities? Or is it that there are other factors (i.e. offending, area of residence, time spent in the street) that, once controlled, would mean there is no ethnic dis-proportionality in stop and searches? Does a particular program reduce crime? Or is the observed change due to something else? These things also matter for policy. Wilson and Kelling, for example, argued that signs of incivility (or antisocial behaviour) in a community lead to more serious forms of crime later on as people withdraw to the safety of their homes when they see those signs of incivilities and this leads to a reduction in informal mechanisms of social control. All the policies to tackle antisocial behaviour in this country are very much informed by this model and were heavily influenced by broken windows theory. But is the model right? Sampson and Raudenbush argue it is not entirely correct. They argue, and tried to show, that there are other confounding factors (poverty, collective efficacy) that explain the association of signs of incivility and more serious crime. In other words, the reason why you see antisocial behaviour in the same communities that you see crime is because other structural factors explain both of those outcomes. They also argue that perceptions of antisocial behaviour are not just produced by observed antisocial behaviour but also by stereotypes about social class and race. If you believe them, then the policy implications are that only tackling antisocial behaviour won’t help you to reduce crime (as Wilson and Kelling have argued). So as you can see this stuff matters for policy not just for theory. Multiple regression is one way of checking the relevance of competing explanations. You could set up a model where you try to predict crime levels with an indicator of broken windows and an indicator of structural disadvantage. If after controlling for structural disadvantage you see that the regression coefficient for broken windows is still significant you may be onto something, particularly if the estimated effect is still large. If, on the other hand, the t test for the regression coefficient of your broken windows variable is no longer significant, then you may be tempted to think that perhaps Sampson and Raudenbush were onto something. 8.8 Fitting and interpreting a multiple regression model It could not be any easier to fit a multiple regression model. You simply modify the formula in the lm() function by adding terms for the additional inputs. 8.8.1 Activity 7: Better explaining homicide rates Let’s try this with our data, using two predictors, the deprivation score and whether the county is in the north or the south to explain homicide rates. ncovr$SOUTH_f &lt;- as.factor(ncovr$SOUTH) fit_3 &lt;- lm(HR90 ~ RD90 + SOUTH_f, data=ncovr) summary(fit_3) ## ## Call: ## lm(formula = HR90 ~ RD90 + SOUTH_f, data = ncovr) ## ## Residuals: ## Min 1Q Median 3Q Max ## -16.480 -2.996 -0.576 2.216 68.151 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.7270 0.1394 33.90 &lt;2e-16 *** ## RD90 2.9649 0.1108 26.77 &lt;2e-16 *** ## SOUTH_f1 3.1809 0.2223 14.31 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.295 on 3082 degrees of freedom ## Multiple R-squared: 0.3647, Adjusted R-squared: 0.3642 ## F-statistic: 884.4 on 2 and 3082 DF, p-value: &lt; 2.2e-16 With more than one input, you need to ask yourself whether all of the regression coefficients are zero. This hypothesis is tested with a F test. Again we are assuming the residuals are normally distributed, though with large samples the F statistic approximates the F distribution. You see the F test printed at the bottom of the summary output and the associated p value, which in this case is way below the conventional .05 that we use to declare statistical significance and reject the null hypothesis. At least one of our inputs must be related to our response variable. Notice that the table printed also reports a t test for each of the predictors. These are testing whether each of these predictors is associated with the response variable when adjusting for the other variables in the model. They report the “partial effect of adding that variable to the model” (James et al. 2014: 77). In this case we can see that both variables seem to be significantly associated with the response variable. If we look at the r squared we can now see that it is higher than before. r squared will always increase as a consequence of adding new variables, even if the new variables added are weakly related to the response variable. We see that the coefficients for the predictors change somehow, it goes down a bit for RD90 and it halves for SOUTH. But their interpretation now changes. A common interpretation is that now the regression for each variable tells you about changes in Y related to that variable when the other variables in the model are held constant. So, for example, you could say the coefficient for RD90 represents the increase in homicide for every one-unit increase in the measure of resource deprivation when holding all other variables in the model constant (in this case that refers to holding constant SOUTH). But this terminology can be a bit misleading. Other interpretations are also possible and are more generalizable. Gelman and Hill (2007: p. 34) emphasise what they call the predictive interpretation that considers how “the outcome variable differs, on average, when comparing two groups of units that differ by 1 in the relevant predictor while being identical in all the other predictors”. So if you’re regressing y on u and v, the coefficient of u is the average difference in y per difference in u, comparing pairs of items that differ in u but are identical in v. So, for example, in this case we could say that comparing counties that have the same level of resource deprivation but that differed in whether they are North or South, the model predicts an expected difference of 3.18 in their homicide rate. And that respondents that do not vary in whether they are North or South, but that differ by one point in the level of resource deprivation, we would expect to see a difference of 2.96 in their homicide rate. So we are interpreting the regression slopes as comparisons of cases that differ in one predictor while being at the same levels of the other predictors. As you can see, interpreting regression coefficients can be kind of tricky5. The relationship between the response Y and any one explanatory variable can change greatly depending on what other explanatory variables are present in the model. For example, if you contrast this model with the one we run with only SOUTH as a predictor you will notice the intercept has changed. You can no longer read the intercept as the mean value of homicide rate for Northern counties. Adding predictors to the model changes their meaning. Now the intercept indicates the value of homicide for southern counties that score 0 in RD90. In this case you have cases that meet this condition (equal zero in all your predictors), but often you may not have any case that does meet the definition of the intercept. More often than not, then, there is not much value in bothering to interpret the intercept. Something you need to be particularly careful about is to not interpret the coefficients in a causal manner. Unless your data come from an experiment, this is unlikely to be helpful. With observational data regression coefficients should not be read as indicating causal relations. This sort of textbook warning is, however, often neglectfully ignored by professional researchers. Often authors carefully draw sharp distinctions between causal and correlational claims when discussing their data analysis, but then interpret the correlational patterns in a totally causal way in their conclusion section. This is what is called the causation or causal creep. Beware. Don’t do this, as tempting as it may be. Comparing the simple models with this more complex model we could say that adjusting for SOUTH does not really change the impact of RD90 in homicide, but that adjusting for resource deprivation halves the impact of the regional effect on homicide. 8.9 Presenting your regression results. Communicating your results in a clear manner is incredibly important. We have seen the tabular results produced by R. If you want to use them in a paper you may need to do some tidying up of those results. There are a number of packages (textreg, stargazer) that automate that process. They take your lm objects and produce tables that you can put straight into your reports or papers. One popular trend in presenting results is the coefficient plot as an alternative to the table of regression coefficients. There are various ways of producing coefficient plots with R for a variety of models. See here or here, for example. 8.9.1 Activity 8: Plotting your results We are going to use instead the plot_model() function of the sjPlot package, that makes it easier to produce these sorts of plots. You can find a more detailed tutorial about this function here. See below for an example: library(sjPlot) Let’s try with a more complex example: fit_4 &lt;- lm(HR90 ~ RD90 + SOUTH_f + DV90 + MA90 + PS90, data=ncovr) plot_model(fit_4, breakLabelsAt = 30) What you see plotted here is the point estimates (the circles), the confidence intervals around those estimates (the longer the line the less precise the estimate), and the colours represent whether the effect is negative (red) or positive (blue). There are other packages that also provide similar functionality, like the dotwhisker package that you may want to explore, see more details here. The sjPlot package also allows you to produce html tables for more professional presentation of your regression tables. For this we use the tab_model() function. This kind of tabulation may be particularly helpful for your final assignment. tab_model(fit_4)   HR 90 Predictors Estimates CI p (Intercept) 4.20 2.27 – 6.13 &lt;0.001 RD90 3.20 2.98 – 3.42 &lt;0.001 SOUTH f [1] 2.60 2.18 – 3.02 &lt;0.001 DV90 0.48 0.37 – 0.58 &lt;0.001 MA90 -0.08 -0.13 – -0.02 0.006 PS90 1.26 1.07 – 1.46 &lt;0.001 Observations 3085 R2 / R2 adjusted 0.426 / 0.425 As before you can further customise this table. Let’s change for example the name that is displayed for the dependent variable. tab_model(fit_4, dv.labels = &quot;Homicide rate 1990&quot;)   Homicide rate 1990 Predictors Estimates CI p (Intercept) 4.20 2.27 – 6.13 &lt;0.001 RD90 3.20 2.98 – 3.42 &lt;0.001 SOUTH f [1] 2.60 2.18 – 3.02 &lt;0.001 DV90 0.48 0.37 – 0.58 &lt;0.001 MA90 -0.08 -0.13 – -0.02 0.006 PS90 1.26 1.07 – 1.46 &lt;0.001 Observations 3085 R2 / R2 adjusted 0.426 / 0.425 Or you could change the labels for the independent variables: tab_model(fit_4, pred.labels = c(&quot;(Intercept)&quot;, &quot;Resource deprivation&quot;, &quot;South&quot;, &quot;Percent divorced males&quot;, &quot;Median age&quot;, &quot;Population structure&quot;), dv.labels = &quot;Homicide rate&quot;)   Homicide rate Predictors Estimates CI p (Intercept) 4.20 2.27 – 6.13 &lt;0.001 Resource deprivation 3.20 2.98 – 3.42 &lt;0.001 South 2.60 2.18 – 3.02 &lt;0.001 Percent divorced males 0.48 0.37 – 0.58 &lt;0.001 Median age -0.08 -0.13 – -0.02 0.006 Population structure 1.26 1.07 – 1.46 &lt;0.001 Observations 3085 R2 / R2 adjusted 0.426 / 0.425 Visual display of the effects of the variables in the model are particularly helpful. The effects package allows us to produce plots to visualise these relationships (when adjusting for the other variables in the model). Here’s an example going back to our model fit_3 which contained SOUTH and RD90 predictor variables: library(effects) plot(allEffects(fit_3), ask=FALSE) Notice that the line has a confidence interval drawn around it and that the predicted means for southern and northern counties (when controlling for RD90) also have a confidence interval. 8.10 Rescaling input variables to assist interpretation The interpretation or regression coefficients is sensitive to the scale of measurement of the predictors. This means one cannot compare the magnitude of the coefficients to compare the relevance of variables to predict the response variable. Let’s look at the more recent model, how can we tell what predictors have a stronger effect? summary(fit_4) ## ## Call: ## lm(formula = HR90 ~ RD90 + SOUTH_f + DV90 + MA90 + PS90, data = ncovr) ## ## Residuals: ## Min 1Q Median 3Q Max ## -15.740 -2.588 -0.678 1.708 69.180 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.20350 0.98475 4.269 2.03e-05 *** ## RD90 3.19923 0.11167 28.648 &lt; 2e-16 *** ## SOUTH_f1 2.59975 0.21557 12.060 &lt; 2e-16 *** ## DV90 0.47594 0.05308 8.967 &lt; 2e-16 *** ## MA90 -0.07609 0.02743 -2.774 0.00557 ** ## PS90 1.26451 0.10047 12.587 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.035 on 3079 degrees of freedom ## Multiple R-squared: 0.4262, Adjusted R-squared: 0.4252 ## F-statistic: 457.3 on 5 and 3079 DF, p-value: &lt; 2.2e-16 We just cannot. One way of dealing with this is by rescaling the input variables. A common method involves subtracting the mean and dividing by the standard deviation of each numerical input. The coefficients in these models is the expected difference in the response variable, comparing units that differ by one standard deviation in the predictor while adjusting for other predictors in the model. Instead, Gelman (2008) has proposed dividing each numeric variables by two times its standard deviation, so that the generic comparison is with inputs equal to plus/minus one standard deviation. As Gelman explains the resulting coefficients are then comparable to untransformed binary predictors. The implementation of this approach in the arm package subtracts the mean of each binary input while it subtracts the mean and divides by two standard deviations for every numeric input. The way we would obtain these rescaled inputs uses the standardize() function of the arm package, that takes as an argument the name of the stored fit model. arm::standardize(fit_4) ## ## Call: ## lm(formula = HR90 ~ z.RD90 + c.SOUTH_f + z.DV90 + z.MA90 + z.PS90, ## data = ncovr) ## ## Coefficients: ## (Intercept) z.RD90 c.SOUTH_f z.DV90 z.MA90 z.PS90 ## 6.1829 6.3985 2.5998 1.6497 -0.5478 2.5290 Notice the main change affects the numerical predictors. The unstandardised coefficients are influenced by the degree of variability in your predictors, which means that typically they will be larger for your binary inputs. With unstandardised coefficients you are comparing complete change in one variable (whether one is a Southern county or not) with one-unit changes in your numerical variable, which may not amount to much change. So, by putting in a comparable scale, you avoid this problem. Standardising in the way described here will help you to make fairer comparisons. These standardised coefficients are comparable in a way that the unstandardised coefficients are not. We can now see what inputs have a comparatively stronger effect. It is very important to realise, though, that one should not compare standardised coefficients across different models. 8.11 Testing conditional hypothesis: interactions In the social sciences there is a great interest in what are called conditional hypothesis or interactions. Many of our theories do not assume simply additive effects but multiplicative effects.For example, Wikstrom and his colleagues (2011) suggest that the threat of punishment only affects the probability of involvement on crime for those that have a propensity to offend but are largely irrelevant for people who do not have this propensity. Or you may think that a particular crime prevention programme may work in some environments but not in others. The interest in this kind of conditional hypothesis is growing. One of the assumptions of the regression model is that the relationship between the response variable and your predictors is additive. That is, if you have two predictors x1 and x2, regression assumes that the effect of x1 on y is the same at all levels of x2. If that is not the case, then you are then violating one of the assumptions of the regression. This is in fact one of the most important assumptions of regression, even if researchers often overlook it. One way of extending our model to accommodate for interaction effects is to add additional terms to our model, a third predictor x3, where x3 is simply the product of multiplying x1 by x2. Notice we keep a term for each of the main effects (the original predictors) as well as a new term for the interaction effect. “Analysts should include all constitutive terms when specifying multiplicative interaction models except in very rare circumstances” (Brambor et al., 2006: 66). A nice way of understanding interactions effects is to think of ‘interaction’ meaning ‘depends on’. So if you include an interaction between variables x1 and x2 in your model, you’re saying that the value of x1 depends on the value of x2. 8.11.1 Activity 9: Interaction effects How do we do this in R? One way is to use the following notation in the formula argument. Notice how we have added a third term RD90:SOUTH_f, which is asking R to test the conditional hypothesis that resource deprivation may have a different impact on homicide for southern and northern counties. fit_5 &lt;- lm(HR90 ~ RD90 + SOUTH_f + RD90:SOUTH_f , data=ncovr) # which is equivalent to: # fit_5 &lt;- lm(HR90 ~ RD90 * SOUTH_f , data=ncovr) summary(fit_5) ## ## Call: ## lm(formula = HR90 ~ RD90 + SOUTH_f + RD90:SOUTH_f, data = ncovr) ## ## Residuals: ## Min 1Q Median 3Q Max ## -17.055 -2.998 -0.566 2.227 68.136 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.5477 0.1586 28.675 &lt;2e-16 *** ## RD90 2.5814 0.1963 13.148 &lt;2e-16 *** ## SOUTH_f1 3.2612 0.2247 14.515 &lt;2e-16 *** ## RD90:SOUTH_f1 0.5622 0.2377 2.365 0.0181 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.292 on 3081 degrees of freedom ## Multiple R-squared: 0.3658, Adjusted R-squared: 0.3652 ## F-statistic: 592.4 on 3 and 3081 DF, p-value: &lt; 2.2e-16 You see here that essentially you have only two inputs (resource deprivation and south) but several regression coefficients. Gelman and Hill (2007) suggest reserving the term input for the variables encoding the information and to use the term predictor to refer to each of the terms in the model. So here we have two inputs and three predictors (one for SOUTH, another for resource deprivation, and a final one for the interaction effect). In this case the test for the interaction effect is significant, which suggests there is such an interaction. Let’s visualise the results with the effects package: plot(allEffects(fit_5), ask=FALSE) Notice that essentially what we are doing is running two regression lines and testing whether the slope is different for the two groups. The intercept is different, we know that Southern counties are more violent, but what we are testing here is whether the level of homicide goes up in a steeper fashion (and in the same direction) for one or the other group as the level of resource deprivation goes up. We see that’s the case here. The estimated lines are almost parallel, but the slope is a bit more steep in the Southern counties. In southern counties, resource deprivation seems to have more of an impact on homicide than in northern counties. A word of warning, the moment you introduce an interaction effect the meaning of the coefficients for the other predictors changes (what is often referred as to the “main effects” as opposed to the interaction effect). You cannot retain the interpretation we introduced earlier. Now, for example, the coefficient for the SOUTH variable relates the marginal effect of this variable when RD90 equals zero. The typical table of results helps you to understand whether the effects are significant but offers little of interest that will help you to meaningfully interpret what the effects are. For this, it’s better that you use some of the graphical displays we have covered. Essentially what happens is that the regression coefficients that get printed are interpretable only for certain groups. So now: The intercept still represents the predicted score of homicide for southern counties and have a score of 0 in resource deprivation (as before). The coefficient of SOUTH_f1 can now be thought of as the difference between the predicted score of homicide rate for northern counties that have a score of 0 in resource deprivation and northern counties that have a score of 0 in resource deprivation. The coefficient of RD90 now becomes the comparison of mean homicide rate for southern counties who differ by one point in resource deprivation. The coefficient for the interaction term represents the difference in the slope for RD90 comparing southern and northern counties, the difference in the slope of the two lines that we visualised above. Models with interaction terms are too often misinterpreted. we strongly recommend you read this piece by Brambor et al (2005) to understand some of the issues involved. When discussing logistic regression we will return to this and will consider tricks to ease the interpretation. Equally, John Fox (2003) piece on the effects package goes into much more detail than we can here to explain the logic and some of the options that are available when producing plots to show interactions with this package. 8.12 Model building and variable selection How do you construct a good model? This partly depends on your goal, although there are commonalities. You do want to start with theory as a way to select your predictors and when specifying the nature of the relationship to your response variable (e.g., additive, multiplicative). Gelman and Hill (2007) provide a series of general principles6. we would like to emphasise at this stage two of them: Include all input variables that, for substantive reasons, might be expected to be important in predicting the outcome. For inputs with large effects, consider including their interactions as well. It is often the case that for any model, the response variable is only related to a subset of the predictors. There are some scenarios where you may be interested in understanding what is the best subset of predictors. Imagine that you want to develop a risk assessment tool to be used by police officers that respond to a domestic violence incident, so that you could use this tool for forecasting the future risk of violence. There is a cost to adding too many predictors. A police officer’s time should not be wasted gathering information on predictors that are not associated with future risk. So you may want to identify the predictors that will help in this process. Ideally, we would like to perform variable selection by trying out a lot of different models, each containing a different subset of the predictors. There are various statistics that help in making comparisons across models. Unfortunately, as the number of potentially relevant predictors increases the number of potential models to compare increases exponentially. So you need methods that help you in this process. There are a number of tools that you can use for variable selection but this goes beyond the aims of this introduction. If you are interested you may want to read this. 8.13 Regression assumptions Although so far we have discussed the practicalities of fitting and interpreting regression models, in practical applications you want to first check your model and proceed from there. There is not much point spending time interpreting your model until you know that the model reasonably fits your data. In previous data analysis modules we covered assumptions made by various statistical tests. The regression model also makes assumptions of its own. In fact, there are so many that we could spend an entire class discussing them. Gelman and Hill (2007) point out that the most important regression assumptions by decreasing order of importance are: Validity. The data should be appropriate for the question that you are trying to answer: “Optimally, this means that the outcome measure should accurately reflect the phenomenon of interest, the model should include all relevant predictors, and the model should generalize to all cases to which it will be applied… Data used in empirical research rarely meet all (if any) of these criteria precisely. However, keeping these goals in mind can help you be precise about the types of questions you can and cannot answer reliably” Additiviy and linearity. These are the most important mathematical assumptions of the model. We already talked about additivity in the previous section and discussed how you can include interaction effects in your models if the additivity assumption is violated. We will discuss problems with non-linearities today as well as ways to diagnose and solve this problem. If the relationship is non linear (e.g, it is curvilinear) predicted values will be wrong in a biased manner, meaning that predicted values will systematically miss the true pattern of the mean of y (as related to the x-variables). Independence of errors. Regression assumes that the errors from the prediction line (or hyperplane) are independent. If there is dependency between the observations (you are assessing change across the same units, working with spatial units, or with units that are somehow grouped such as students from the same class), you may have to use models that are more appropriate (e.g., multilevel models, spatial regression, etc.). Equal variances of errors. When the variance of the residuals is unequal, you may need different estimation methods. This is, nonetheless, considered a minor issue. There is a small effect on the validity of t-test and F-test results, but generally regression inferences are robust with regard to the variance issue. Normality of errors. The residuals should be normally distributed. Gelman and Hill (2007: 46) discuss this as the least important of the assumptions and in fact “do not recommend diagnostics of the normality of the regression residuals”. If the errors do not have a normal distribution, it usually is not particularly serious. Regression inferences tend to be robust with respect to normality (or nonnormality of the errors). In practice, the residuals may appear to be nonnormal when the wrong regression equation has been used. So, we will show you how to inspect normality of the residuals not because this is a problem on itself, but because it may be give you further evidence that there is some other problem with the model you are applying to your data. Apart from this, it is convenient to diagnose multicollinearity (this affects interpretation) and influential observations. So these are the assumptions of linear regression. In this section we can go through very quickly how to test for some of them using visuals. While finding that some of the assumptions are violated do not necessarily mean that you have to scrap your model, it is important to use these diagnostics to illustrate that you have considered what the possible issues with your model is, and if you find any serious issues that you address them. In r, we can use the plot() function on our output lm object to look through some diagnostics. This gives us 4 plots, so to show them all, we’ll use the code par(mfrow = c(2, 2)) to split our plot window into 4 panes (remember to set back, run par(mfrow = c(1, 1))). For example, let’s return to fit_1, our very first model. par(mfrow = c(2, 2)) plot(fit_1) The 4 plots we get are Residuals vs Fitted. Used to check the linear relationship assumptions. A horizontal line, without distinct patterns is an indication for a linear relationship, what is good. Normal Q-Q. Used to examine whether the residuals are normally distributed. It’s good if residuals points follow the straight dashed line. Scale-Location (or Spread-Location). Used to check the homogeneity of variance of the residuals (homoscedasticity). Horizontal line with equally spread points is a good indication of homoscedasticity. This is not the case in our example, where we have a bit of a heteroscedasticity problem (remember funnel-shape from the video!). Residuals vs Leverage. Used to identify influential cases, that is extreme values that might influence the regression results when included or excluded from the analysis. We can also run some tests to confirm what we see in the plots. For example, to test for heteroskedasticity (unequal variance in our residuals) we can run a Breusch-Pagan test from the lmtest package or a NCV test from the car package. lmtest::bptest(fit_1) # Breusch-Pagan test ## ## studentized Breusch-Pagan test ## ## data: fit_1 ## BP = 75.912, df = 1, p-value &lt; 2.2e-16 car::ncvTest(fit_1) # NCV test ## Non-constant Variance Score Test ## Variance formula: ~ fitted.values ## Chisquare = 598.5657, Df = 1, p = &lt; 2.22e-16 Both these test have a p-value less that a significance level of 0.05, therefore we can reject the null hypothesis that the variance of the residuals is constant and infer that heteroscedasticity is indeed present, thereby confirming our graphical inference. For testing whether the residuals violate the normality assumption, we can use the ols_test_normality() function from the olsrr package. olsrr::ols_test_normality(fit_1) ## ----------------------------------------------- ## Test Statistic pvalue ## ----------------------------------------------- ## Shapiro-Wilk 0.8917 0.0000 ## Kolmogorov-Smirnov 0.078 0.0000 ## Cramer-von Mises 254.8478 0.0000 ## Anderson-Darling 46.495 0.0000 ## ----------------------------------------------- NOTE: You may have noticed the second of this assumption is independence of errors. This is an issue with spatial data. If you have spatial autocorrelation basically you are saying that your observations are not independent. What happens in area X is likely to be similar to what happens in its surrounding neighbours (if you have positive spatial autocorrelation). What do you do? Well, that’s what we will cover next week. We will learn how to fit regression models where you have spatial dependency. Alright, that’s enough for this week! This is a fine chapter too if you struggle with the explanations in the required reading. Many universities, like the University of Manchester, have full access to Springer ebooks. You can also have a look at these notes.↩︎ This is a reasonable explanation of how to interpret R-Squared.↩︎ This blog post provides a nice animation of the confidence interval and hypothesis testing.↩︎ This is a nice illustration of the Simpon’s Paradox, a well known example of omitted variable bias.↩︎ we recommend reading chapter 13 “Woes of regression coefficients” of an old book Mostseller and Tukey (1977) Data Analysis and Regression. Reading: Addison-Wesley Publishing.↩︎ Look at this too.↩︎ "],["spatial-regression-models.html", "Chapter 9 Spatial regression models 9.1 Introduction 9.2 Looking at the residuals and testing for spatial autocorrelation in regression 9.3 What to do now? 9.4 Spatial Regimes 9.5 Lagrange multipliers 9.6 Fitting and interpreting a spatially lagged model 9.7 Fitting an interpreting a spatial error model 9.8 Time matters! 9.9 Recap", " Chapter 9 Spatial regression models 9.1 Introduction Last week we provided you with an introduction to regression analysis with R. The data we used had a spatial component. We were modelling the geographical distribution of homicide across US counties. However, we did not incorporate this spatial component into our models. As we have explained throughout the semester criminal events often cluster geographically in space. So if we want to develop a regression model for crime we may have to recognise this spatial component. Remember as well, from last week, that regression models assume independence between the observations. That is, a regression model is formally assuming that what happens in area Xi is not in any way related (it is independent) of what happens in area Xii. But if those two areas are adjacent in geographical space we know that there is a good chance that this assumption may be violated. In previous weeks we covered formal tests for spatial autocorrelation, which allow us to test whether this assumption is met or not. So before we fit a regression model with spatial data we need to explore the issue of autocorrelation. We already know how to do this. In this session, we will examine the data from last week, explore whether autocorrelation is an issue, and then introduce models that allow us to take into account spatial autocorrelation. We will see that there are two basic ways of adjusting for spatial autocorrelation: through a spatial lag model or through a spatial error model. Before we do any of this, we need to load the libraries we will use today: library(sf) library(tmap) library(ggplot2) library(sp) library(spdep) library(spatialreg) library(readr) library(janitor) library(dplyr) library(gganimate) library(lubridate) # library(transformr) - this needs to be installed, but doesn&#39;t need loading Then we will be using the ncovr data from last week. You can go back to last week’s learning materials to download from Blackboard. Last week we did not treat the data as spatial and, consequently, relied on the .csv file. But notice that in the unzipped ncovr file there is also a shapefile that we can load as a spatial object into R: shp_name &lt;- &quot;data/ncovr/NAT.shp&quot; ncovr_sf &lt;- st_read(shp_name) ## Reading layer `NAT&#39; from data source ## `/Users/user/Desktop/resquant/crime_mapping_textbook/data/ncovr/NAT.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 3085 features and 69 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -124.7314 ymin: 24.95597 xmax: -66.96985 ymax: 49.37173 ## Geodetic CRS: WGS 84 We can indeed represent our variable of interest using a choropleth map. current_style &lt;- tmap_style(&quot;col_blind&quot;) ## tmap style set to &quot;col_blind&quot; ## other available styles are: &quot;white&quot;, &quot;gray&quot;, &quot;natural&quot;, &quot;cobalt&quot;, &quot;albatross&quot;, &quot;beaver&quot;, &quot;bw&quot;, &quot;classic&quot;, &quot;watercolor&quot; tm_shape(ncovr_sf) + tm_fill(&quot;HR90&quot;, title = &quot;Homicide Rate (Quantiles)&quot;, style=&quot;quantile&quot;, palette = &quot;Reds&quot;) + tm_borders(alpha = 0.1) + tm_layout(main.title = &quot;Homicide Rate across US Counties, 1990&quot;, main.title.size = 0.7 , legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8) Do you think there is spatial patterning for homicide? 9.2 Looking at the residuals and testing for spatial autocorrelation in regression Residuals, as we have explained last week, give you an idea of the distance between our observed Y values and the predicted Y values. So in essence they are deviations of observed reality from your model. Your regression line or hyperplane is optimised to be the one that best represents your data if those assumptions are met. Therefore, residuals are very helpful in diagnosing whether your model is a good representation of reality or not. Most diagnostics of the assumptions for OLS regression rely on exploring the residuals. In order to explore the residuals we need to fit our model first. Let’s look at one of the models from last week. 9.2.1 Activity 1: A non-spatial regression on spatial data - listen to the residuals So here is the function lm() which we learned all about last week (or refreshed about…!). Anyway, here we model homicide rate in the 1990s (HR90) using all 6 variables of interest, RD90- Resource Deprivation/Affluence, SOUTH - Counties in the southern region scored 1, DV90 divorce rate, MA90 the median age, PS90 - population structure, and UE90 unemployment. Let’s fit the model now: fit_1 &lt;- lm(HR90 ~ RD90 + SOUTH + DV90 + MA90 + PS90 + UE90, data=ncovr_sf) Now that we have fitted the model we can extract the residuals. If you look at the fit_1 object in your RStudio environment or if you run the str() function to look inside this object you will see that this object is a list with different elements, one of which is the residuals. An element of this object then includes the residual for each of your observations (the difference between the observed value and the value predicted by your model). We can extract the residuals using the residuals() function and add them to our spatial data set. ncovr_sf$res_fit1 &lt;- residuals(fit_1) If you now look at the dataset you will see that there is a new variable with the residuals. In those cases where the residual is negative this is telling us that the observed value is lower than the predicted (that is, our model is overpredicting the level of homicide for that observation) and when the residual is positive, the observed value is higher than the predicted (that is, our model is underpredicting the level of homicide for that observation). We could also extract the predicted values if we wanted. We would use the fitted() function. ncovr_sf$fitted_fit1 &lt;- fitted(fit_1) Now look at the second county in the dataset. It has a homicide rate in 1990 of 15.88. This is the observed value. If we look at the new column we have created (“fitted_fit1”), our model predicts a homicide rate of 2.41. That is, knowing the level unemployment, whether the county is North or South, the level of resource deprivation, etc., we are predicting a homicide rate of 2.41. Now, this is lower than the observed value, so our model is underpredicting the level of homicide in this case. If you observed the residual you will see that it has a value of 13.46, which is simply the difference between the observed and the predicted value. With spatial data one useful thing to do is to look at any spatial patterning in the distribution of the residuals. Notice that the residuals are the difference between the observed values for homicide and the predicted values for homicide, so you want your residual to NOT display any spatial patterning. If, on the other hand, your model displays a patterning in the areas of the study region where it predicts badly, then you may have a problem. This is telling you that your model is not a good representation of the social phenomena you are studying across the full study area: there is systematically more distortion in some areas than in others. We are going to produce a choropleth map for the residuals, but we will use a common classification method we haven’t covered yet: standard deviations. Standard deviation is a statistical technique that is based on how much the data differs from the mean. First, you measure the mean and standard deviation for your data. Then, each standard deviation becomes a class in your choropleth maps. In order to do that we will compute the mean and the standard deviation for the variable we want to plot and break the variable according to these values. The following code creates a new variable in which we will express the residuals in terms of standard deviations away from the mean. So, for each observation, we subtract the mean and divide by the standard deviation. Remember, this is exactly what the scale function does, which we have introduced in week 7: ncovr_sf$sd_breaks &lt;- scale(ncovr_sf$res_fit1)[,1] # because scale is made for matrices, we just need to get the first column using [,1] # this is equal to (ncovr_sf$res_fit1 - mean(ncovr_sf$res_fit1)) / sd(ncovr_sf$res_fit1) summary(ncovr_sf$sd_breaks) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -3.5370 -0.5238 -0.1404 0.0000 0.3314 13.7407 Next we use a new style, fixed, within the tm_fill function. When we break the variable into classes using the fixed argument we need to specify the boundaries of the classes. We do this using the breaks argument. In this case we are going to ask R to create 7 classes based on standard deviations away from the mean. Remember that a value of 1 would be 1 standard deviation (s.d.) higher than the mean, and -1 would be one s.d. lower. If we assume normal distribution, then 68% of all counties should lie within the middle band from -1 to +1 s.d. (you can find a refresher of this on Wikipedia). my_breaks &lt;- c(-14,-3,-2,-1,1,2,3,14) tm_shape(ncovr_sf) + tm_fill(&quot;sd_breaks&quot;, title = &quot;Residuals&quot;, style = &quot;fixed&quot;, breaks = my_breaks, palette = &quot;-RdBu&quot;) + tm_borders(alpha = 0.1) + tm_layout(main.title = &quot;Residuals&quot;, main.title.size = 0.7 , legend.position = c(&quot;right&quot;, &quot;bottom&quot;), legend.title.size = 0.8) ## Variable(s) &quot;sd_breaks&quot; contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette. Notice the spatial patterning of areas of over-prediction (negative residuals, or blue tones) and under-prediction (positive residuals, or brown tones). This visual inspection of the residuals is telling you that spatial autocorrelation may be present here. This, however, would require a more formal test. 9.2.2 Activity 2: Spatial autocorrelation (again) Remember from week 7 that in order to do this, we first need to create the spatial weight matrix. If the code below and what it does is not clear to you, revise the notes from week 7, when we first introduced it. # We create a list of neighbours using the Queen criteria w &lt;- poly2nb(ncovr_sf, row.names=ncovr_sf$FIPSNO) summary(w) ## Neighbour list object: ## Number of regions: 3085 ## Number of nonzero links: 18168 ## Percentage nonzero weights: 0.190896 ## Average number of links: 5.889141 ## Link number distribution: ## ## 1 2 3 4 5 6 7 8 9 10 11 13 14 ## 24 36 91 281 620 1037 704 227 50 11 2 1 1 ## 24 least connected regions: ## 53009 53029 25001 44005 36103 51840 51660 6041 51790 51820 51540 51560 6075 51580 51530 51131 51115 51770 51720 51690 51590 27031 26083 55029 with 1 link ## 1 most connected region: ## 49037 with 14 links This should give you an idea of the distribution of connectedness across the data, with counties having on average nearly 6 neighbours. Now we can generate the row-standardised spatial weight matrix and the Moran Scatterplot. wm &lt;- nb2mat(w, style=&#39;B&#39;) rwm &lt;- mat2listw(wm, style=&#39;W&#39;) We obtain the Moran’s test for regression residuals using the function lm.morantest() as below. It is important to realize that the Moran’s I test statistic for residual spatial autocorrelation takes into account the fact that the variable under consideration is a residual, computed from a regression. The usual Moran’s I test statistic does not. It is therefore incorrect to simply apply a Moran’s I test to the residuals from the regression without correcting for the fact that these are residuals. lm.morantest(fit_1, rwm, alternative=&quot;two.sided&quot;) ## ## Global Moran I for regression residuals ## ## data: ## model: lm(formula = HR90 ~ RD90 + SOUTH + DV90 + MA90 + PS90 + UE90, ## data = ncovr_sf) ## weights: rwm ## ## Moran I statistic standard deviate = 10.321, p-value &lt; 2.2e-16 ## alternative hypothesis: two.sided ## sample estimates: ## Observed Moran I Expectation Variance ## 0.1093062514 -0.0014498532 0.0001151682 You will notice we obtain a statistically significant value for Moran’s I. The value of the Moran’s I test is not too high, but we still need to keep it in mind. If we diagnose that spatial autocorrelation is an issue, that is, that the errors (the residuals) are related systematically among themselves, then we have a problem and need to use a more appropriate approach: a spatial regression model. 9.3 What to do now? If the test is significant (as in this case), then we possibly need to think of a more suitable model to represent our data: a spatial regression model. Remember spatial dependence means that (more typically) there will be areas of spatial clustering for the residuals in our regression model. So our predicted line (or hyperplane) will systematically under-predict or over-predict in areas that are close to each other. That’s not good. We want a better model that does not display any spatial clustering in the residuals. There are two general ways of incorporating spatial dependence in a regression model, through what we called a spatial error model or by means of a spatially lagged model. There are spdep functions that provides us with some tools to help us make a decision as to which of these two is most appropriate: the Lagrange Multiplier tests. The difference between these two models is both technical and conceptual. The spatial error model treats the spatial autocorrelation as a nuisance that needs to be dealt with. A spatial error model basically implies that the: “spatial dependence observed in our data does not reflect a truly spatial process, but merely the geographical clustering of the sources of the behaviour of interest. For example, citizens in adjoining neighbourhoods may favour the same (political) candidate not because they talk to their neighbors, but because citizens with similar incomes tend to cluster geographically, and income also predicts vote choice. Such spatial dependence can be termed attributional dependence” (Darmofal, 2015: 4) The spatially lagged model, on the other hand, incorporates spatial dependence explicitly by adding a “spatially lagged” variable y on the right hand side of our regression equation. Its distinctive characteristic is that it includes a spatially lagged “dependent” variable among the explanatory factors. It’s basically explicitly saying that the values of y in the neighbouring areas of observation \\(i\\) is an important predictor of y on each individual area \\(i\\) . This is one way of saying that the spatial dependence may be produced by a spatial process such as the diffusion of behaviour between neighboring units: “If so the behaviour is likely to be highly social in nature, and understanding the interactions between interdependent units is critical to understanding the behaviour in question. For example, citizens may discuss politics across adjoining neighbours such that an increase in support for a candidate in one neighbourhood directly leads to an increase in support for the candidate in adjoining neighbourhoods” (Darmofal, 2015: 4) 9.4 Spatial Regimes Before we proceed to a more detailed description of these two models it is important that we examine another aspect of our model that also links to geography. Remember that when we brought up our data into R, we decided to test for the presence of an interaction. We looked at whether the role of unemployment was different in Southern and Northern states. We found that this interaction was indeed significant. Unemployment had a more significant effect in Southern than in Northern states. This was particularly obvious during the 1970s, when unemployment did not affect homicide rates in the Northern states, but it did lead to a decrease in homicide in the Southern states. We could have attempted to test other interaction effects between some of our other predictors and their geographical location in the South or the North. But we did not. If you have read the Ballen et al. (2001) paper that we are replicating in the lab last week and this week, you will have noticed that they decided that they needed to run separate models for the South and the North. This kind of situation, where sub-regions seem to display different patterns is often alluded to by the name of spatial regimes. In the context of regression analysis, spatial regimes relate to the possibility that we may need to split our data into two (or more) sub-regions in order to run our models, because we presume that the relationship of the predictors to the outcome may play out differently in these sub-regions (spatial regimes). So how can we assess whether this is an issue in our data? As with many other diagnostics of regression, you may want to start by looking at your residuals. 9.4.1 Activity 3: Assessing spatial regimes using residuals Look at the residual map we produced earlier. Do you think that the residuals look different in the South and in the North? If the pattern is not clear to you, you may want to run other forms of visualisation. ggplot(ncovr_sf, aes(x = res_fit1, colour = as.factor(SOUTH))) + geom_density() What do you see in this plot? And, critically, what does it mean? What is this telling you about the predicted values that result from our model? (Remember what a residual is: the difference between the observed values and the predicted values). There are formal tests that one can use to further explore these issues. The paper by Bollen et al. (2001) mentions them (Chow tests). But those are beyond the scope of this course. Sufficient to say that, as Bollen et al. (2001), we are going to split our analysis and run them separately for the Southern and the Northern states. We have covered the filter() function from dplyr to split datasets based on values of a variable. But to split sf objects it is better to rely on the more generic subset function, since filter() doesn’t accommodate well the column with the geographic information that sf provides. ncovr_s_sf &lt;- subset(ncovr_sf, SOUTH == 1) ncovr_n_sf &lt;- subset(ncovr_sf, SOUTH == 0) 9.5 Lagrange multipliers The Moran’s I test statistic has high power against a range of spatial alternatives. However, it does not provide much help in terms of which alternative model would be most appropriate. The Lagrange Multiplier test statistics do allow a distinction between spatial error models and spatial lag models. In order to practice their computation and interpretation, let’s run two separate OLS regression models (one for the South and one for the North), using the same predictors as we used last week and, first, focusing on homicide in the northern counties in the 1990s. We have split the data in two, so that means that before we do this we need to create new files for the spatial weight matrix: in particular we will create one using first order queen criteria. #Create a list of neighbours using the Queen criteria w_n &lt;- poly2nb(ncovr_n_sf, row.names=ncovr_n_sf$FIPSNO) wm_n &lt;- nb2mat(w_n, style=&#39;B&#39;) rwm_n &lt;- mat2listw(wm_n, style=&#39;W&#39;) fit_2 &lt;- lm(HR90 ~ RD90 + DV90 + MA90 + PS90 +UE90, data=ncovr_n_sf) First look at the Moran’s I. lm.morantest(fit_2, rwm_n, alternative=&quot;two.sided&quot;) ## ## Global Moran I for regression residuals ## ## data: ## model: lm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data = ## ncovr_n_sf) ## weights: rwm_n ## ## Moran I statistic standard deviate = 4.3371, p-value = 1.443e-05 ## alternative hypothesis: two.sided ## sample estimates: ## Observed Moran I Expectation Variance ## 0.0617118442 -0.0020421389 0.0002160761 The p (probability) value associated with this Moran’s I is below our standard threshold. So we will say that we have an issue with spatial autocorrelation that we need to deal with. OLS regression won’t do. In order to decide whether to fit a spatial error or a spatially lagged model we need to run the Lagrange Multipliers. 9.5.1 Activity 4: Lagrange multiplier tests Both Lagrange multiplier tests (for the error and the lagged models, LMerr and LMlag respectively), as well as their robust forms (RLMerr and RLMLag, also respectively) are included in the lm.LMtests function. Again, a regression object and a spatial listw object must be passed as arguments. In addition, the tests must be specified as a character vector (the default is only LMerror), using the c( ) operator (concatenate), as illustrated below. lm.LMtests(fit_2, rwm_n, test = c(&quot;LMerr&quot;,&quot;LMlag&quot;,&quot;RLMerr&quot;,&quot;RLMlag&quot;,&quot;SARMA&quot;)) ## Please update scripts to use lm.RStests in place of lm.LMtests ## ## Rao&#39;s score (a.k.a Lagrange multiplier) diagnostics for spatial ## dependence ## ## data: ## model: lm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data = ## ncovr_n_sf) ## test weights: listw ## ## RSerr = 17.44, df = 1, p-value = 2.965e-05 ## ## ## Rao&#39;s score (a.k.a Lagrange multiplier) diagnostics for spatial ## dependence ## ## data: ## model: lm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data = ## ncovr_n_sf) ## test weights: listw ## ## RSlag = 9.8255, df = 1, p-value = 0.001721 ## ## ## Rao&#39;s score (a.k.a Lagrange multiplier) diagnostics for spatial ## dependence ## ## data: ## model: lm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data = ## ncovr_n_sf) ## test weights: listw ## ## adjRSerr = 9.1435, df = 1, p-value = 0.002496 ## ## ## Rao&#39;s score (a.k.a Lagrange multiplier) diagnostics for spatial ## dependence ## ## data: ## model: lm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data = ## ncovr_n_sf) ## test weights: listw ## ## adjRSlag = 1.5288, df = 1, p-value = 0.2163 ## ## ## Rao&#39;s score (a.k.a Lagrange multiplier) diagnostics for spatial ## dependence ## ## data: ## model: lm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data = ## ncovr_n_sf) ## test weights: listw ## ## SARMA = 18.969, df = 2, p-value = 7.602e-05 How do we interpret the Lagrange Multipliers? First we look at the standard ones (LMerr and LMlag). If both are below the .05 level this means we need to have a look at the robust version of these tests (Robust LM). If the non-robust version is not significant, the mathematical properties of the robust tests may not hold, so we don’t look at them in those scenarios. It is fairly common to find that both the lag (LMlag) and the error (LMerr) non-robust LM are significant. If only one of them are: problem solved. We would choose a spatial lag or a spatial error model according to this (i.e., if the lag LM was significant and the error LM was not we would run a spatial lag model or viceversa). Here we see that the p-value for RLMlag is 0.2163, which means it is not significant. This should guide us to use the spatial error model. What happens if both of these are significant? - if you look at the robust Lagrange multipliers (RLMlag and RLMerr) and encounter that both are significant Luc Anselin (2008: 199-200) proposes the following criteria: “When both LM test statistics reject the null hypothesis, proceed to the bottom part of the graph and consider the Robust forms of the test statistics. Typically, only one of them will be significant, or one will be orders of magnitude more significant than the other (e.g., p &lt; 0.00000 compared to p &lt; 0.03). In that case the decision is simple: estimate the spatial regression model matching the (most) significant” robust “statistic. In the rare instance that both would be highly significant, go with the model with the largest value for the test statistic. However, in this situation, some caution is needed, since there may be other sources of misspecification. One obvious action to take is to consider the results for different spatial weight and/or change the basic (i.e., not the spatial part) specification of the model. there are also rare instances where neither of the Robust LM test statistics are significant. In those cases, more serious specification problems are likely present and those should be addressed first”. By other specification errors Prof. Anselin refers to problems with some of the other assumptions of regression that we covered last week. Now even though here we would run with the spatial error model, I want to show you both models and how to fit/interpret them, so we will demonstrate both! 9.6 Fitting and interpreting a spatially lagged model Just to reiterate,the Lagrange Multiplier suggests this spatial lag test may not be appropriate, but that a spatial error test may be better. However, we can also make a theory-based argument for running this model. It may be the case that we believe that the values of \\(y\\) in one county, \\(i\\), are directly influenced by the values of \\(y\\) that exist in the “neighbours” of \\(i\\). This is an influence that goes beyond other explanatory variables that are specific to \\(i\\). Remember what we said earlier in the spatial lag model we are simply adding as an additional explanatory variable the values of y in the surrounding area. What we mean by “surrounding” will be defined by our spatial weight matrix. It’s important to emphasise that one has to think very carefully and explore appropriate definitions of “surrounding” (as we discussed, though just superficially, in the section on spatial clustering a few weeks ago). We are using here the first order queen criteria, but in real practice you would need to explore whether this is the best definition and one that makes theoretical sense. 9.6.1 Activity 5: Spatial lag model Maximum Likelihood (ML) estimation of the spatial lag model is carried out with the lagsarlm() function. The required arguments are a regression “formula”, a data set and a listw spatial weights object. The default method uses Ord’s eigenvalue decomposition of the spatial weights matrix. This function lives in the spatialreg package. fit_2_lag &lt;- lagsarlm(HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data=ncovr_n_sf, rwm_n) summary(fit_2_lag) ## ## Call: ## lagsarlm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data = ncovr_n_sf, ## listw = rwm_n) ## ## Residuals: ## Min 1Q Median 3Q Max ## -11.92646 -1.98383 -0.69986 0.97484 68.01185 ## ## Type: lag ## Coefficients: (asymptotic standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 4.497161 1.153958 3.8972 9.733e-05 ## RD90 2.774666 0.199905 13.8800 &lt; 2.2e-16 ## DV90 0.532917 0.056360 9.4556 &lt; 2.2e-16 ## MA90 -0.098468 0.029841 -3.2998 0.0009676 ## PS90 0.933888 0.100593 9.2838 &lt; 2.2e-16 ## UE90 -0.079751 0.046792 -1.7044 0.0883131 ## ## Rho: 0.1029, LR test value: 9.0515, p-value: 0.0026249 ## Asymptotic standard error: 0.034564 ## z-value: 2.9772, p-value: 0.0029093 ## Wald statistic: 8.8635, p-value: 0.0029093 ## ## Log likelihood: -4699.465 for lag model ## ML residual variance (sigma squared): 16.091, (sigma: 4.0113) ## Number of observations: 1673 ## Number of parameters estimated: 8 ## AIC: 9414.9, (AIC for lm: 9422) ## LM test for residual autocorrelation ## test value: 7.5881, p-value: 0.0058754 As expected, the spatial autoregressive parameter (Rho) is statistically significant, as indicated by the p-value of 0.003 on an asymptotic t-test (based on the asymptotic variance matrix). The Likelihood Ratio test (LR) on this parameter is also significant (p value 0.003). How do you interpret these results? First, you need to look at the general measures of fit of the model. I know what you are thinking. Look at the R Square and compare them, right? Well, don’t. This R Square is not a real R Square, but a pseudo-R Square and therefore is not comparable to the one we obtain from the OLS regression model. Instead we can look at the Akaike Information Criterion (AIC). When comparing two models, a lower AIC indicates that a model fits the data better. We see that the lag model has an AIC of 9414.9 whereas the linear model with no lags has an AIC of 9422 (AIC for lm: 9422), so this is telling us there is a better fit when we include the spatial lag. In our spatial lag model you will notice that there is a new term Rho. What is this? This is our spatial lag. It is a variable that measures the homicide rate in the counties that are defined as surrounding each county in our spatial weights matrix. We are simply using this variable as an additional explanatory variable to our model, so that we can appropriately take into account the spatial clustering detected by our Moran’s I test. You will notice that the estimated coefficient for this term is both positive and statistically significant. In other words, when the homicide rate in surrounding areas increases, so does the homicide rate in each county, even when we adjust for the other explanatory variables in our model. The fact the lag is significant adds further evidence that this is a better model than the OLS regression specification. You also see at the bottom further tests for spatial dependence, a likelihood ratio test. This is not a test for residual spatial autocorrelation after we introduce our spatial lag. What you want is for this test to be significant because in essence it is further evidence that the spatial lag model is a good fit. How about the coefficients? It may be tempting to look at the regression coefficients for the other explanatory variables for the original OLS model and compare them to those in the spatial lag model. But you should be careful when doing this. Their meaning now has changed: “Interpreting the substantive effects of each predictor in a spatial lag model is much more complex than in a nonspatial model (or in a spatial error model) because of the presence of the spatial multiplier that links the independent variables to the dependent. In the nonspatial model, it does not matter which unit is experiencing the change on the independent variable. The effect” in the dependent variable “of a change” in the value of an independent variable “is constant across all observations” (Darmofal, 2015: 107). Remember, when interpreting a regression coefficient for variable \\(X_i\\), we say that they indicate how much \\(Y\\) goes up or down for every one unit increase in \\(X_i\\) when holding all other variables in the model constant. In our example, for the nonspatial model this effect is the same for every county in our dataset. But in the spatial lag model things are not the same. We cannot interpret the regression coefficients for the substantive predictors in the same way because the “substantive effects of the independent variables vary by observation as a result of the different neighbors for each unit in the data” (Darmofal, 2015: 107). In the OLS regression model, the coefficients for any of the explanatory variables measure the absolute impact of these variables. It is a simpler scenario. We look at the effect of X on Y within each county. So X in county A affects Y in county A. In the spatial lag model there are two components to how X affects Y. X affects Y within each county directly but remember we are also including the spatial lag, the measure of Y in the surrounding counties (call them B, C, and D). So our model includes the effect of X in county A in the level of Y in county A. By virtue of including the spatial lag (a measure of Y in county B, C and D) we are indirectly incorporating as well the effect that X has on Y in counties B, C, and D. So the effect of a covariate (independent variable) is the sum of two particular effects: a direct, local effect of the covariate in that unit, and an indirect, spillover effect due to the spatial lag. In other words, in the spatial lag model, the coefficients only focus on the “short-run impact” of \\(x_i\\) on \\(y_i\\) , rather than the net effect. As Ward and Gleditsch (2008) explain “Since the value of \\(y_i\\) will influence the level of” homicide “in other” counties \\(y_j\\) and these \\(y_j\\) , in turn, feedback on to \\(y_i\\) , we need to take into account the additional effects that the short impact of \\(x_i\\) exerts on \\(y_i\\) through its impact on the level of” homicide “in other” counties. You can still read the coefficients in the same way but need to keep in mind that they are not measuring the net effect. Part of their effect will be captured by the spatial lag. Yet, you may still want to have a look at whether things change dramatically, particularly in terms of their significance (which is not the case in this example). In sum, this implies that a change in the \\(i^{th}\\) region’s predictor can affect the \\(j^{th}\\) region’s outcome. We have 2 situations: (a) the direct impact of an observation’s predictor on its own outcome, and (b) the indirect impact of an observation’s neighbour’s predictor on its outcome.This leads to three quantities that we want to know: Average Direct Impact, which is similar to a traditional interpretation Average Total impact, which would be the total of direct and indirect impacts of a predictor on one’s outcome Average Indirect impact, which would be the average impact of one’s neighbours on one’s outcome These quantities can be found using the impacts() function in the spatialreg library. This function performs the calculation of impacts for spatial lag, which is needed in order to interpret the regression coefficients correctly, because of the spillovers between the terms in these data generation processes Impacts takes the argument of our model (fit_2_lag), as well as our spatial weights. Now we could specify our already existing spatial weights object rwm_n using the listw= parameter, however, we have a very large matrix, and this might mean our calculations will take all day (if you don’t believe me, try it! But don’t say I didn’t warn you!). Instead, what we can do is follow the example that converts the spatial weight matrix into a “sparse” matrix, and power it up using the trW() function. This follows the approximation methods described in Lesage and Pace, 2009. It prepares a vector of traces of powers of a spatial weights matrix. Here, we use Monte Carlo simulation to obtain simulated distributions of the various impacts. If we use this, our outcome will be much faster. The trW() function needs our spatial weights to be in a sparse matrix class object, so we can transform this using the as() function: W &lt;- as(rwm_n, &quot;CsparseMatrix&quot;) trMC &lt;- trW(W, type=&quot;MC&quot;) Finally, R= asks for the number of simulations used to compute the distribution for the impact measures. im&lt;-impacts(fit_2_lag, tr = trMC, R=100) sums&lt;-summary(im, zstats=T) data.frame(sums$res) ## direct indirect total ## 1 2.78000997 0.312926477 3.09293644 ## 2 0.53394329 0.060102299 0.59404559 ## 3 -0.09865771 -0.011105216 -0.10976293 ## 4 0.93568704 0.105323812 1.04101085 ## 5 -0.07990449 -0.008994295 -0.08889878 #To print the p values data.frame(sums$pzmat) ## Direct Indirect Total ## RD90 0.000000000 0.004402578 0.000000000 ## DV90 0.000000000 0.003655513 0.000000000 ## MA90 0.003623684 0.059391980 0.004282742 ## PS90 0.000000000 0.004631352 0.000000000 ## UE90 0.127424906 0.235831583 0.134232336 We see that all the variables except unemployment have significant direct, indirect and total effects. You may want to have a look at how things differ when you just run a non spatial model. fit_1_OLS &lt;- lm(HR90 ~ RD90 + DV90 + MA90 + PS90 +UE90, data=ncovr_n_sf) summary(fit_1_OLS) ## ## Call: ## lm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data = ncovr_n_sf) ## ## Residuals: ## Min 1Q Median 3Q Max ## -12.410 -2.025 -0.714 1.046 67.793 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.91322 1.15953 4.237 2.39e-05 *** ## RD90 2.83090 0.19971 14.175 &lt; 2e-16 *** ## DV90 0.56374 0.05554 10.151 &lt; 2e-16 *** ## MA90 -0.10623 0.03000 -3.541 0.00041 *** ## PS90 0.96744 0.10056 9.621 &lt; 2e-16 *** ## UE90 -0.07804 0.04693 -1.663 0.09656 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4.033 on 1667 degrees of freedom ## Multiple R-squared: 0.2594, Adjusted R-squared: 0.2572 ## F-statistic: 116.8 on 5 and 1667 DF, p-value: &lt; 2.2e-16 9.7 Fitting an interpreting a spatial error model When we used Lagrange multipliers, we saw that for the case of homicide in the 90s for Southern states, the spatial error model was more appropriate when using the 1st order contiguity queen criteria. In this case then, we need to run a spatial error model. The spatial lag model is probably the most common specification and maybe the most generally useful way to think about spatial dependence. But we can also enter the spatial dependence through the error term in our regression equation. Whereas the spatial lag model sees the spatial dependence as substantively meaningful (in that y, say homicide, in county i is influenced by homicide in its neighbours), the spatial error model simply treats the spatial dependence as a nuisance. This model focuses on estimating the regression parameters for the explanatory variables of interest and disregards the possibility that the spatial clustering, the spatial autocorrelation, may reflect something meaningful (other than attributional dependence, as explained earlier). So instead of assuming that a spatial lag influences the dependent variable, we estimate a model that relaxes the standard regression model assumption about the need for the errors to be independent. It’s beyond the scope of this introductory course to cover the mathematical details of this procedure, though you can use the suggested reading (particularly the highly accessible Ward and Gleditsch,2008 book or the more recent Darmofal, 2015) or some of the video lectures on the matter that are available on the GeoDa website. 9.7.1 Activity 6: Spatial error model Maximum likelihood estimation of the spatial error model is similar to the lag procedure and implemented in the errorsarlm() function. Again, the formula, data set and a listw spatial weights object must be specified, as illustrated below. #Create a list of neighbours using the Queen criteria w_s &lt;- poly2nb(ncovr_s_sf, row.names=ncovr_s_sf$FIPSNO) wm_s &lt;- nb2mat(w_s, style=&#39;B&#39;) rwm_s &lt;- mat2listw(wm_s, style=&#39;W&#39;) fit_3_err &lt;- errorsarlm(HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, data=ncovr_s_sf, rwm_s) summary(fit_3_err) ## ## Call:errorsarlm(formula = HR90 ~ RD90 + DV90 + MA90 + PS90 + UE90, ## data = ncovr_s_sf, listw = rwm_s) ## ## Residuals: ## Min 1Q Median 3Q Max ## -18.12072 -3.47386 -0.65447 2.47020 41.88765 ## ## Type: error ## Coefficients: (asymptotic standard errors) ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 6.518274 1.963847 3.3191 0.000903 ## RD90 4.395116 0.238312 18.4427 &lt; 2.2e-16 ## DV90 0.492009 0.125188 3.9302 8.489e-05 ## MA90 -0.011567 0.053045 -0.2181 0.827378 ## PS90 1.763051 0.225642 7.8135 5.551e-15 ## UE90 -0.380113 0.078674 -4.8315 1.355e-06 ## ## Lambda: 0.29815, LR test value: 51.977, p-value: 5.6166e-13 ## Asymptotic standard error: 0.037839 ## z-value: 7.8794, p-value: 3.3307e-15 ## Wald statistic: 62.085, p-value: 3.3307e-15 ## ## Log likelihood: -4471.384 for error model ## ML residual variance (sigma squared): 32.409, (sigma: 5.6929) ## Number of observations: 1412 ## Number of parameters estimated: 8 ## AIC: 8958.8, (AIC for lm: 9008.7) As before, the AIC is better for the spatial model (8958.8) than for the non spatial model (9008.7). In this case, you can compare the regression coefficients with those from the OLS model, since we don’t have a spatial lag capturing some of their effect. Compare the coefficient estimates for the two models and see what differences you notice. You will see the table includes a new parameter (lambda) but you don’t need to worry about this for the purpose of this course. It is something you would understand if you get into the mathematical estimation details. We have reached a point now where you are able to model spatial dependence. How exciting! No longer will you be using OLS models for your data with spatial elements, as now, finally, we have learned how to account for Tobler’s first law: (I imagine this all said together in chorus by this point…!!) everything is related to everything else, but near things are more related to each other than far away things! Remember - most of what you study as criminologists takes place in a particular place in a particular time. Now we haven’t covered time in this module, but you can sure account for the space component now. Well done all! Now I said we don’t deal with time, but I cannot let you go without addressing this just a little tiny bit… So one more section to go! 9.8 Time matters! All crimes occur at a specific date and time, however such definite temporal information is only available when victims or witnesses are present, alarms are triggered, etc., at the time of occurrence. This specific temporal data is most often collected in crimes against persons. In these cases, cross-tabulations or histogram of weekday and hour by count will suffice. The great majority of reported events are crimes against property. In these cases, there are seldom victims or witnesses present. These events present the analyst with ‘ranged’ temporal data, that is, an event reported as occurring over a range of hours or even days. In the case of ranged temporal data, analysis is possible through use of equal chance or probability methods. If an event was reported as having occurred from Monday to Tuesday, in the absence of evidence to the contrary, it is assumed the event had an equal chance or probability of occurring on each of the two days, or 0.5 (50%). In the same manner, if an event was reported as having occurred over a 10 hour span there is a 10% chance the event occurred during any one of the hours. This technique requires a reasonable number of events in the data set to be effective. The resulting probabilities are totalled in each category and graphed or cross-tabulated. This produces a comparison of relative frequency, by weekday or hour (source). Temporal crime analysis looks at trends in crime or incidents. A crime or incident trend is a broad direction or pattern that specific types or general crime and/or incidents are following. Three types of trend can be identified: overall trend – highlights if the problem is getting worse, better or staying the same over a period of time seasonal, monthly, weekly or daily cycles of offences – identified by comparing previous time periods with the same period being analysed random fluctuations – caused by a large number of minor influences, or a one-off event, and can include displacement of crime from neighbouring areas due to partnership activity or crime initiatives. Decomposing these trends is an important part of what time series analysis is all about. This could be a whole other course (and it is, there are modules on this for example in the Economics department!) so we will not cover it here. HOWEVER, I will show you one super cool way to introduce time into your crime mapping practice. We’ll try two things: small multiples, and animations. 9.8.1 Activity 7: Small multiples One way that we can represent change over time in our spatial data is to create small multiples of the same map. Faceting and small multiples is a format for comparing the geographical distribution of different social phenomena. For this session we will be using the spatial object of ASB in Manchester between 2016-2017 (manchester_asb.csv) which you can download from Blackboard. mcr_asb &lt;- read_csv(&quot;data/manchester_asb.csv&quot;) %&gt;% clean_names() ## New names: ## Rows: 32162 Columns: 15 ## ── Column specification ## ───────────────────────────────────────────── Delimiter: &quot;,&quot; chr ## (8): Month, Reported.by, Falls.within, Location, LSOA.code, ## LSOA.name, C... dbl (4): ...1, X, Longitude, Latitude lgl (3): ## Crime.ID, Last.outcome.category, Context ## ℹ Use `spec()` to retrieve the full column specification for this ## data. ℹ Specify the column types or set `show_col_types = FALSE` to ## quiet this message. ## • `` -&gt; `...1` We’ll also need our boundary data. Read in the city centre LSOAs geojson (also on Blackboard) cc_lsoas.geojson. cc_lsoas &lt;- st_read(&quot;data/cc_lsoas.geojson&quot;) ## Reading layer `cc_lsoas&#39; from data source ## `/Users/user/Desktop/resquant/crime_mapping_textbook/data/cc_lsoas.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 23 features and 3 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -2.265664 ymin: 53.46601 xmax: -2.20089 ymax: 53.50136 ## Geodetic CRS: WGS 84 Create a frequency table of the number of ASB incidents by month and by LSOA, and select only the city centre LSOAs. asb_by_lsoa &lt;- mcr_asb %&gt;% group_by(lsoa_code, month) %&gt;% count() %&gt;% filter(lsoa_code %in% cc_lsoas$code) Now you might notice that there should be 13 months in the data set (from 05-2016 to 05-2017), however, the number of resulting rows is not \\(23\\times13 = 299\\) (which you might expect as there are 23 LSOAs in the city centre), but instead 289. This indicates that we have some missing observations. There are months when there were no ASBs in some of our areas, but here that is just an absence of recorded data, rather than a recorded value of 0. To fix this, we can identify the LSOAs and the missing months by selecting those where we have fewer than 13 observations: asb_by_lsoa %&gt;% group_by(lsoa_code) %&gt;% count() %&gt;% filter(n &lt; 13) %&gt;% pull(lsoa_code) ## [1] &quot;E01033673&quot; &quot;E01033684&quot; There are two such LSOAs here. Let’s see which months we have data or for each. asb_by_lsoa %&gt;% filter(lsoa_code %in% c(&quot;E01033673&quot;, &quot;E01033684&quot;) ) %&gt;% group_by(lsoa_code, month) %&gt;% count() ## # A tibble: 16 × 3 ## # Groups: lsoa_code, month [16] ## lsoa_code month n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 E01033673 2016-05 1 ## 2 E01033673 2016-06 1 ## 3 E01033673 2016-07 1 ## 4 E01033673 2016-08 1 ## 5 E01033673 2016-09 1 ## 6 E01033673 2016-10 1 ## 7 E01033673 2016-11 1 ## 8 E01033673 2017-01 1 ## 9 E01033673 2017-02 1 ## 10 E01033673 2017-03 1 ## 11 E01033673 2017-04 1 ## 12 E01033684 2016-05 1 ## 13 E01033684 2016-07 1 ## 14 E01033684 2016-10 1 ## 15 E01033684 2016-12 1 ## 16 E01033684 2017-04 1 Looks like LSOA E01033673 is missing 2016-12 and 2017-05, while LSOA E01033684 is missing 2016-06, 2016-08, 2016-09, 2016-11, 2017-01, 2017-02, 2017-03, and 2017-05. Let’s create a dataframe where we have for each observation each of these missing months for the LSOAs, and an n of 0, as these months we know there were 0 stop and searches: missing_months &lt;- data.frame(lsoa_code = c(&quot;E01033673&quot;, &quot;E01033673&quot;, &quot;E01033684&quot;, &quot;E01033684&quot;, &quot;E01033684&quot;, &quot;E01033684&quot;, &quot;E01033684&quot;, &quot;E01033684&quot;, &quot;E01033684&quot;, &quot;E01033684&quot;), month = c(&quot;2016-12&quot;, &quot;2017-05&quot;, &quot;2016-06&quot;, &quot;2016-08&quot;, &quot;2016-09&quot;, &quot;2016-11&quot;, &quot;2017-01&quot;, &quot;2017-02&quot;, &quot;2017-03&quot;, &quot;2017-05&quot;), n = c(0,0,0,0,0,0,0,0,0,0) ) And bind this to our existing dataframe with rbind(): asb_by_lsoa &lt;- rbind(asb_by_lsoa, missing_months) Now we see we have the required 299 observations! We can now join this to our cc_lsoas boundary file. cc_lsoas_asb &lt;- left_join(cc_lsoas, asb_by_lsoa, by = c(&quot;code&quot; = &quot;lsoa_code&quot;)) Let’s also make sure that any NAs are replaced by 0s (if you’re unsure here, watch the feedback session video for week 4!) cc_lsoas_asb %&gt;% mutate(n = ifelse(is.na(n), 0, n)) ## Simple feature collection with 299 features and 5 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -2.265664 ymin: 53.46601 xmax: -2.20089 ymax: 53.50136 ## Geodetic CRS: WGS 84 ## First 10 features: ## label name code month n ## 1 E08000003E02001062E01005066 Manchester 018E E01005066 2016-05 1 ## 2 E08000003E02001062E01005066 Manchester 018E E01005066 2016-06 5 ## 3 E08000003E02001062E01005066 Manchester 018E E01005066 2016-07 4 ## 4 E08000003E02001062E01005066 Manchester 018E E01005066 2016-08 4 ## 5 E08000003E02001062E01005066 Manchester 018E E01005066 2016-09 2 ## 6 E08000003E02001062E01005066 Manchester 018E E01005066 2016-10 5 ## 7 E08000003E02001062E01005066 Manchester 018E E01005066 2016-11 7 ## 8 E08000003E02001062E01005066 Manchester 018E E01005066 2016-12 3 ## 9 E08000003E02001062E01005066 Manchester 018E E01005066 2017-01 3 ## 10 E08000003E02001062E01005066 Manchester 018E E01005066 2017-02 7 ## geometry ## 1 POLYGON ((-2.229713 53.4734... ## 2 POLYGON ((-2.229713 53.4734... ## 3 POLYGON ((-2.229713 53.4734... ## 4 POLYGON ((-2.229713 53.4734... ## 5 POLYGON ((-2.229713 53.4734... ## 6 POLYGON ((-2.229713 53.4734... ## 7 POLYGON ((-2.229713 53.4734... ## 8 POLYGON ((-2.229713 53.4734... ## 9 POLYGON ((-2.229713 53.4734... ## 10 POLYGON ((-2.229713 53.4734... We now have a simple features object which has in the attribute tables the number of ASB incidents (n) for each LSOA for each month in our data set. We can use the function tm_facets() from the tmap package to now try to produce the small multiples: tm_shape(cc_lsoas_asb) + tm_fill(&quot;n&quot;) + tm_borders() + tm_facets(&quot;month&quot;, free.coords=FALSE) We can now see how ASB varies across the months, and start to think about how this might change over seasons for example with seasonal patterns in routine activities! PS: you can also use the facet_wrap() and facet_grid() functions in ggplot2 package if you prefer - remember there are always many ways to solve the same problem in R! Pretty cool though, eh? Well just wait until the next section…! 9.8.2 Activity 8: Animations You want a data viz person to get excited? Mention animations! Now they are brought to ggplot2 thanks to the gganimate extension. So first thing we do is to load the gganimate package: library(gganimate) Also, to apply gganimate to sf objects, you need to have a package called transformr installed. You don’t need to load this, but make sure it’s installed! Then, we need to make sure that our temporal variable is a date object. We can use the ymd() function, from the fantastic lubridate package (really I cannot praise this package enough, it makes handling dates so easy…!) to make sure that our Month variable is a date object. But we have no day you say! Only month! How can we use ymd() which clearly requires year month and day! Well, one approach is to make this up, and just say that everything in our data happened on the 1st of the month. We can use the paste0() function to do this: library(lubridate) cc_lsoas_asb$date_month &lt;- ymd(paste0(cc_lsoas_asb$month, &quot;-01&quot;)) Now, we can create a simple static plot, the way we already know how. Let’s plot the number of ASB incidents per LSOA, and save this in an object called anim: anim &lt;- ggplot() + geom_sf(data = cc_lsoas_asb, aes(fill = n)) Now, finally, we can animate this graph. Take the object of the static graph (anim) and add a form of transition, which will be used to animate the graph. In this case, we can use transition_manual(). This transition splits your data into multiple frames based on the levels in a given column, much like how faceting splits up the data in multiple panels. It then shifts between frames, with each frame representing one level of the frame variable. Frames are the unquoted name of the column holding the frame levels in the data. You can then use current_frame to dynamically label the graph: anim + transition_manual(date_month) + labs(title = &quot;Month: {current_frame}&quot;) ## Warning: No renderer available. Please install the gifski, av, or magick ## package to create animated output ## NULL How cool is that!? You can now make animations about transition over time to impress your friends, family, future employers, and so on. What a way to end this course! 9.9 Recap Today we learned a lot! We finally reached the conclusion of our spatial analysis by applying spatial weights in order to account for dependence in our spatially explicit data. Specifically we explored how to do the following: we looked at how to look for spatial autocorrelation in our residuals. we explores spatial lag and spatial error models, and using Lagrange Multiplier tests to decide when to use which one we looked at interpreting the outputs from our spatial regression models, and how they differ from the non-spatial versions. finally we looked at two ways for accounting for time in our crime mapping activities, first by using small multiples and second through animations. Baller, Robert, Luc Anselin, Steven Messner, Glenn Deane, and Darnell Hawkins. 2001. “Structural Covariates of US County Homicide Rates: Incorporating Spatial Effects.” Criminology 39 (3): 561–88. Clayton, David, and John Kaldor. 1987. “Empirical Bayes Estimates of Age-Standardized Relative Risks for Use in Disease Mapping.” Biometrics, 671–81. Gelman, Andrew, and Phillip Price. 1999. “All Maps of Parameters Estimates Are Misleading.” Statistics in Medicine 18: 3221–34. Lawson, Andrew. 2021. Statistical Methods in Spatial Epidemiology. 2nd ed. Chichester, UK: John Wiley &amp; Sons. Marshall, Roger. 1991. “Mapping Disease and Mortality Rates Using Empirical Bayes Estimators.” Applied Statistics 40 (2): 283–94. Waller, HLance, and Carol Gotway. 2004. Applied Spatial Statistics for Public Health Data. Chichester, UK: John Wiley &amp; Sons. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
